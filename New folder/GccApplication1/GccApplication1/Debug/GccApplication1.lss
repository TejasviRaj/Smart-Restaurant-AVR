
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001298  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ac  00800060  00001298  0000132c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001eb  0080010c  0080010c  000013d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001408  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a4f  00000000  00000000  000015c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009c0  00000000  00000000  00004013  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001293  00000000  00000000  000049d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00005c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006fb  00000000  00000000  000060ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014c8  00000000  00000000  000067a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  00007c6f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_13>
      38:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e9       	ldi	r30, 0x98	; 152
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 30       	cpi	r26, 0x0C	; 12
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	ac e0       	ldi	r26, 0x0C	; 12
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 08 	call	0x1002	; 0x1002 <main>
      8a:	0c 94 4a 09 	jmp	0x1294	; 0x1294 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZL9lcd_writeh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      92:	9d e0       	ldi	r25, 0x0D	; 13
      94:	9a 95       	dec	r25
      96:	f1 f7       	brne	.-4      	; 0x94 <_ZL9lcd_writeh+0x2>
      98:	00 00       	nop
#define	LCD_STROBE()	((CPORT |= (1 << EN)),(CPORT &= ~(1 << EN)))
static void lcd_write(uint8_t c)
{
	_delay_us(40);

	if(c & 0x80)
      9a:	88 23       	and	r24, r24
      9c:	14 f4       	brge	.+4      	; 0xa2 <_ZL9lcd_writeh+0x10>
	DPORT |=  (1 << D7);
      9e:	da 9a       	sbi	0x1b, 2	; 27
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <_ZL9lcd_writeh+0x12>
	else
	DPORT &= ~(1 << D7);
      a2:	da 98       	cbi	0x1b, 2	; 27
	
	if(c & 0x40)
      a4:	86 ff       	sbrs	r24, 6
      a6:	02 c0       	rjmp	.+4      	; 0xac <_ZL9lcd_writeh+0x1a>
	DPORT |=  (1 << D6);
      a8:	db 9a       	sbi	0x1b, 3	; 27
      aa:	01 c0       	rjmp	.+2      	; 0xae <_ZL9lcd_writeh+0x1c>
	else
	DPORT &= ~(1 << D6);
      ac:	db 98       	cbi	0x1b, 3	; 27
	
	if(c & 0x20)
      ae:	85 ff       	sbrs	r24, 5
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <_ZL9lcd_writeh+0x24>
	DPORT |=  (1 << D5);
      b2:	dc 9a       	sbi	0x1b, 4	; 27
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <_ZL9lcd_writeh+0x26>
	else
	DPORT &= ~(1 << D5);
      b6:	dc 98       	cbi	0x1b, 4	; 27
	
	if(c & 0x10)
      b8:	84 ff       	sbrs	r24, 4
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <_ZL9lcd_writeh+0x2e>
	DPORT |=  (1 << D4);
      bc:	dd 9a       	sbi	0x1b, 5	; 27
      be:	01 c0       	rjmp	.+2      	; 0xc2 <_ZL9lcd_writeh+0x30>
	else
	DPORT &= ~(1 << D4);
      c0:	dd 98       	cbi	0x1b, 5	; 27
	
	LCD_STROBE();
      c2:	de 9a       	sbi	0x1b, 6	; 27
      c4:	de 98       	cbi	0x1b, 6	; 27
	
	

	if(c & 0x08)
      c6:	83 ff       	sbrs	r24, 3
      c8:	02 c0       	rjmp	.+4      	; 0xce <_ZL9lcd_writeh+0x3c>
	
	DPORT |=  (1 << D7);
      ca:	da 9a       	sbi	0x1b, 2	; 27
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <_ZL9lcd_writeh+0x3e>
	else
	DPORT &= ~(1 << D7);
      ce:	da 98       	cbi	0x1b, 2	; 27
	
	if(c & 0x04)
      d0:	82 ff       	sbrs	r24, 2
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZL9lcd_writeh+0x46>
	DPORT |=  (1 << D6);
      d4:	db 9a       	sbi	0x1b, 3	; 27
      d6:	01 c0       	rjmp	.+2      	; 0xda <_ZL9lcd_writeh+0x48>
	else
	DPORT &= ~(1 << D6);
      d8:	db 98       	cbi	0x1b, 3	; 27
	
	if(c & 0x02)
      da:	81 ff       	sbrs	r24, 1
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <_ZL9lcd_writeh+0x50>
	DPORT |=  (1 << D5);
      de:	dc 9a       	sbi	0x1b, 4	; 27
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <_ZL9lcd_writeh+0x52>
	else
	DPORT &= ~(1 << D5);
      e2:	dc 98       	cbi	0x1b, 4	; 27
	
	if(c & 0x01)
      e4:	80 ff       	sbrs	r24, 0
      e6:	02 c0       	rjmp	.+4      	; 0xec <_ZL9lcd_writeh+0x5a>
	DPORT |=  (1 << D4);
      e8:	dd 9a       	sbi	0x1b, 5	; 27
      ea:	01 c0       	rjmp	.+2      	; 0xee <_ZL9lcd_writeh+0x5c>
	else
	DPORT &= ~(1 << D4);
      ec:	dd 98       	cbi	0x1b, 5	; 27
	
	LCD_STROBE();
      ee:	de 9a       	sbi	0x1b, 6	; 27
      f0:	de 98       	cbi	0x1b, 6	; 27
      f2:	08 95       	ret

000000f4 <_Z9lcd_clearv>:
#include "lcd.h"


void lcd_clear(void)
{
	CPORT &= ~(1 << RS);
      f4:	df 98       	cbi	0x1b, 7	; 27
	lcd_write(1<<LCD_CLR);
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	83 ef       	ldi	r24, 0xF3	; 243
      fe:	91 e0       	ldi	r25, 0x01	; 1
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <_Z9lcd_clearv+0xc>
     104:	00 c0       	rjmp	.+0      	; 0x106 <_Z9lcd_clearv+0x12>
     106:	00 00       	nop
     108:	08 95       	ret

0000010a <_Z8lcd_gotoh>:
	_delay_ms(2);
}

void lcd_goto(unsigned char pos)
{
	CPORT &= ~(1 << RS);
     10a:	df 98       	cbi	0x1b, 7	; 27
	lcd_write(0x80|pos);
     10c:	80 68       	ori	r24, 0x80	; 128
     10e:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     112:	08 95       	ret

00000114 <_Z10lcd_gotoxyhh>:
}


void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
     114:	90 e4       	ldi	r25, 0x40	; 64
     116:	69 9f       	mul	r22, r25
     118:	80 0d       	add	r24, r0
     11a:	11 24       	eor	r1, r1
     11c:	0e 94 85 00 	call	0x10a	; 0x10a <_Z8lcd_gotoh>
     120:	08 95       	ret

00000122 <_Z8lcd_initv>:
}

void lcd_init()
{
	DDR(CPORT) |= (1 << RS);
     122:	d7 9a       	sbi	0x1a, 7	; 26
	DDR(CPORT) |= (1 << EN);
     124:	d6 9a       	sbi	0x1a, 6	; 26
	
	DDR(DPORT) |= (1 << D7);
     126:	d2 9a       	sbi	0x1a, 2	; 26
	DDR(DPORT) |= (1 << D6);
     128:	d3 9a       	sbi	0x1a, 3	; 26
	DDR(DPORT) |= (1 << D5);
     12a:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(DPORT) |= (1 << D4);
     12c:	d5 9a       	sbi	0x1a, 5	; 26
	
	CPORT &= ~(1 << RS);
     12e:	df 98       	cbi	0x1b, 7	; 27
	CPORT &= ~(1 << EN);
     130:	de 98       	cbi	0x1b, 6	; 27
     132:	85 ea       	ldi	r24, 0xA5	; 165
     134:	9e e0       	ldi	r25, 0x0E	; 14
     136:	01 97       	sbiw	r24, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <_Z8lcd_initv+0x14>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <_Z8lcd_initv+0x1a>
     13c:	00 00       	nop
	
	_delay_ms(15);

	DPORT |= (1 << D4);
     13e:	dd 9a       	sbi	0x1b, 5	; 27
	DPORT |= (1 << D5);
     140:	dc 9a       	sbi	0x1b, 4	; 27
	DPORT &= ~(1 << D6);
     142:	db 98       	cbi	0x1b, 3	; 27
	DPORT &= ~(1 << D7);
     144:	da 98       	cbi	0x1b, 2	; 27
	
	LCD_STROBE();
     146:	de 9a       	sbi	0x1b, 6	; 27
     148:	de 98       	cbi	0x1b, 6	; 27
     14a:	81 ee       	ldi	r24, 0xE1	; 225
     14c:	94 e0       	ldi	r25, 0x04	; 4
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <_Z8lcd_initv+0x2c>
     152:	00 c0       	rjmp	.+0      	; 0x154 <_Z8lcd_initv+0x32>
     154:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
     156:	de 9a       	sbi	0x1b, 6	; 27
     158:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	92 e4       	ldi	r25, 0x42	; 66
     15c:	9a 95       	dec	r25
     15e:	f1 f7       	brne	.-4      	; 0x15c <_Z8lcd_initv+0x3a>
     160:	00 c0       	rjmp	.+0      	; 0x162 <_Z8lcd_initv+0x40>
	_delay_us(200);
	LCD_STROBE();
     162:	de 9a       	sbi	0x1b, 6	; 27
     164:	de 98       	cbi	0x1b, 6	; 27
     166:	82 e4       	ldi	r24, 0x42	; 66
     168:	8a 95       	dec	r24
     16a:	f1 f7       	brne	.-4      	; 0x168 <_Z8lcd_initv+0x46>
     16c:	00 c0       	rjmp	.+0      	; 0x16e <_Z8lcd_initv+0x4c>
	_delay_us(200);
	
	
	DPORT &= ~(1 << D4);
     16e:	dd 98       	cbi	0x1b, 5	; 27
	DPORT |=  (1 << D5);
     170:	dc 9a       	sbi	0x1b, 4	; 27
	DPORT &= ~(1 << D6);
     172:	db 98       	cbi	0x1b, 3	; 27
	DPORT &= ~(1 << D7);
     174:	da 98       	cbi	0x1b, 2	; 27
	
	LCD_STROBE();
     176:	de 9a       	sbi	0x1b, 6	; 27
     178:	de 98       	cbi	0x1b, 6	; 27

	lcd_write(0x28);
     17a:	88 e2       	ldi	r24, 0x28	; 40
     17c:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	lcd_write(0b00001100);
     180:	8c e0       	ldi	r24, 0x0C	; 12
     182:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	lcd_clear();
     186:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	lcd_write(0x6);
     18a:	86 e0       	ldi	r24, 0x06	; 6
     18c:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     190:	08 95       	ret

00000192 <_Z8lcd_putsPKc>:
}

void lcd_puts(const char * s)
{
     192:	cf 93       	push	r28
     194:	df 93       	push	r29
     196:	ec 01       	movw	r28, r24
	CPORT|= (1 << RS);
     198:	df 9a       	sbi	0x1b, 7	; 27
	while(*s)
     19a:	88 81       	ld	r24, Y
     19c:	88 23       	and	r24, r24
     19e:	31 f0       	breq	.+12     	; 0x1ac <_Z8lcd_putsPKc+0x1a>
     1a0:	21 96       	adiw	r28, 0x01	; 1
	lcd_write(*s++);
     1a2:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
}

void lcd_puts(const char * s)
{
	CPORT|= (1 << RS);
	while(*s)
     1a6:	89 91       	ld	r24, Y+
     1a8:	81 11       	cpse	r24, r1
     1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <_Z8lcd_putsPKc+0x10>
	lcd_write(*s++);
}
     1ac:	df 91       	pop	r29
     1ae:	cf 91       	pop	r28
     1b0:	08 95       	ret

000001b2 <_Z8lcd_putcc>:

void lcd_putc(char x)
{
	CPORT|= (1 << RS);
     1b2:	df 9a       	sbi	0x1b, 7	; 27
	lcd_write(x);
     1b4:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     1b8:	08 95       	ret

000001ba <_Z7lcd_numi>:
}

void lcd_num(int in)
{
     1ba:	ef 92       	push	r14
     1bc:	ff 92       	push	r15
     1be:	0f 93       	push	r16
     1c0:	1f 93       	push	r17
     1c2:	cf 93       	push	r28
     1c4:	df 93       	push	r29
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
     1ca:	c4 56       	subi	r28, 0x64	; 100
     1cc:	d1 09       	sbc	r29, r1
     1ce:	0f b6       	in	r0, 0x3f	; 63
     1d0:	f8 94       	cli
     1d2:	de bf       	out	0x3e, r29	; 62
     1d4:	0f be       	out	0x3f, r0	; 63
     1d6:	cd bf       	out	0x3d, r28	; 61
     1d8:	bc 01       	movw	r22, r24
     1da:	ce 01       	movw	r24, r28
     1dc:	01 96       	adiw	r24, 0x01	; 1
     1de:	7c 01       	movw	r14, r24
     1e0:	fc 01       	movw	r30, r24
	int c;
	char temp[100];
	int index=0;
     1e2:	00 e0       	ldi	r16, 0x00	; 0
     1e4:	10 e0       	ldi	r17, 0x00	; 0
	do
	{
		c=in%10;
     1e6:	2a e0       	ldi	r18, 0x0A	; 10
     1e8:	30 e0       	ldi	r19, 0x00	; 0
     1ea:	01 c0       	rjmp	.+2      	; 0x1ee <_Z7lcd_numi+0x34>
		in=in/10;
		temp[index]=c+'0';
		index++;
     1ec:	8c 01       	movw	r16, r24
	char temp[100];
	int index=0;
	do
	{
		c=in%10;
		in=in/10;
     1ee:	cb 01       	movw	r24, r22
     1f0:	b9 01       	movw	r22, r18
     1f2:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divmodhi4>
		temp[index]=c+'0';
     1f6:	90 e3       	ldi	r25, 0x30	; 48
     1f8:	98 0f       	add	r25, r24
     1fa:	91 93       	st	Z+, r25
		index++;
     1fc:	c8 01       	movw	r24, r16
     1fe:	01 96       	adiw	r24, 0x01	; 1
void lcd_num(int in)
{
	int c;
	char temp[100];
	int index=0;
	do
     200:	61 15       	cp	r22, r1
     202:	71 05       	cpc	r23, r1
     204:	99 f7       	brne	.-26     	; 0x1ec <_Z7lcd_numi+0x32>
		in=in/10;
		temp[index]=c+'0';
		index++;
	}
	while (in!=0);
	for (int i=index-1;i>=0;i--)
     206:	11 23       	and	r17, r17
     208:	64 f0       	brlt	.+24     	; 0x222 <_Z7lcd_numi+0x68>
     20a:	0c 0f       	add	r16, r28
     20c:	1d 1f       	adc	r17, r29
     20e:	0e 5f       	subi	r16, 0xFE	; 254
     210:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_putc(temp[i]);
     212:	f8 01       	movw	r30, r16
     214:	82 91       	ld	r24, -Z
     216:	8f 01       	movw	r16, r30
     218:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z8lcd_putcc>
		in=in/10;
		temp[index]=c+'0';
		index++;
	}
	while (in!=0);
	for (int i=index-1;i>=0;i--)
     21c:	0e 15       	cp	r16, r14
     21e:	1f 05       	cpc	r17, r15
     220:	c1 f7       	brne	.-16     	; 0x212 <_Z7lcd_numi+0x58>
	{
		lcd_putc(temp[i]);
	}
}
     222:	cc 59       	subi	r28, 0x9C	; 156
     224:	df 4f       	sbci	r29, 0xFF	; 255
     226:	0f b6       	in	r0, 0x3f	; 63
     228:	f8 94       	cli
     22a:	de bf       	out	0x3e, r29	; 62
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	cd bf       	out	0x3d, r28	; 61
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	1f 91       	pop	r17
     236:	0f 91       	pop	r16
     238:	ff 90       	pop	r15
     23a:	ef 90       	pop	r14
     23c:	08 95       	ret

0000023e <_Z13lcd_setCursorii>:
	}
	
	int digitalRead (int s)
	{
		return (PINB & (1<<s));
	}
     23e:	92 e0       	ldi	r25, 0x02	; 2
     240:	96 1b       	sub	r25, r22
     242:	69 2f       	mov	r22, r25
     244:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     248:	08 95       	ret

0000024a <_Z10uart0_getsPc>:
     24a:	cf 92       	push	r12
     24c:	df 92       	push	r13
     24e:	ef 92       	push	r14
     250:	ff 92       	push	r15
     252:	0f 93       	push	r16
     254:	1f 93       	push	r17
     256:	cf 93       	push	r28
     258:	df 93       	push	r29
     25a:	cd b7       	in	r28, 0x3d	; 61
     25c:	de b7       	in	r29, 0x3e	; 62
     25e:	c4 56       	subi	r28, 0x64	; 100
     260:	d1 09       	sbc	r29, r1
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	de bf       	out	0x3e, r29	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	6c 01       	movw	r12, r24
     26e:	ce 01       	movw	r24, r28
     270:	01 96       	adiw	r24, 0x01	; 1
     272:	7c 01       	movw	r14, r24
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	10 e0       	ldi	r17, 0x00	; 0
     278:	01 c0       	rjmp	.+2      	; 0x27c <_Z10uart0_getsPc+0x32>
     27a:	89 01       	movw	r16, r18
     27c:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_Z15uart0_availablev>
     280:	89 2b       	or	r24, r25
     282:	e1 f3       	breq	.-8      	; 0x27c <_Z10uart0_getsPc+0x32>
     284:	0e 94 6f 08 	call	0x10de	; 0x10de <_Z10uart0_getcv>
     288:	f7 01       	movw	r30, r14
     28a:	81 93       	st	Z+, r24
     28c:	7f 01       	movw	r14, r30
     28e:	98 01       	movw	r18, r16
     290:	2f 5f       	subi	r18, 0xFF	; 255
     292:	3f 4f       	sbci	r19, 0xFF	; 255
     294:	80 32       	cpi	r24, 0x20	; 32
     296:	89 f7       	brne	.-30     	; 0x27a <_Z10uart0_getsPc+0x30>
     298:	e1 e0       	ldi	r30, 0x01	; 1
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	ec 0f       	add	r30, r28
     29e:	fd 1f       	adc	r31, r29
     2a0:	e0 0f       	add	r30, r16
     2a2:	f1 1f       	adc	r31, r17
     2a4:	10 82       	st	Z, r1
     2a6:	be 01       	movw	r22, r28
     2a8:	6f 5f       	subi	r22, 0xFF	; 255
     2aa:	7f 4f       	sbci	r23, 0xFF	; 255
     2ac:	c6 01       	movw	r24, r12
     2ae:	0e 94 0e 09 	call	0x121c	; 0x121c <strcpy>
     2b2:	cc 59       	subi	r28, 0x9C	; 156
     2b4:	df 4f       	sbci	r29, 0xFF	; 255
     2b6:	0f b6       	in	r0, 0x3f	; 63
     2b8:	f8 94       	cli
     2ba:	de bf       	out	0x3e, r29	; 62
     2bc:	0f be       	out	0x3f, r0	; 63
     2be:	cd bf       	out	0x3d, r28	; 61
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	df 90       	pop	r13
     2ce:	cf 90       	pop	r12
     2d0:	08 95       	ret

000002d2 <_Z12uart0_getintv>:
     2d2:	0f 93       	push	r16
     2d4:	1f 93       	push	r17
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <_Z12uart0_getintv+0xa>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <_Z12uart0_getintv+0xc>
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	8e 01       	movw	r16, r28
     2e6:	0f 5f       	subi	r16, 0xFF	; 255
     2e8:	1f 4f       	sbci	r17, 0xFF	; 255
     2ea:	c8 01       	movw	r24, r16
     2ec:	0e 94 25 01 	call	0x24a	; 0x24a <_Z10uart0_getsPc>
     2f0:	d8 01       	movw	r26, r16
     2f2:	0d 90       	ld	r0, X+
     2f4:	00 20       	and	r0, r0
     2f6:	e9 f7       	brne	.-6      	; 0x2f2 <_Z12uart0_getintv+0x20>
     2f8:	f8 01       	movw	r30, r16
     2fa:	ad 01       	movw	r20, r26
     2fc:	41 50       	subi	r20, 0x01	; 1
     2fe:	51 09       	sbc	r21, r1
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	11 c0       	rjmp	.+34     	; 0x328 <_Z12uart0_getintv+0x56>
     306:	9c 01       	movw	r18, r24
     308:	22 0f       	add	r18, r18
     30a:	33 1f       	adc	r19, r19
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	88 0f       	add	r24, r24
     312:	99 1f       	adc	r25, r25
     314:	88 0f       	add	r24, r24
     316:	99 1f       	adc	r25, r25
     318:	82 0f       	add	r24, r18
     31a:	93 1f       	adc	r25, r19
     31c:	21 91       	ld	r18, Z+
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	20 53       	subi	r18, 0x30	; 48
     322:	31 09       	sbc	r19, r1
     324:	82 0f       	add	r24, r18
     326:	93 1f       	adc	r25, r19
     328:	e4 17       	cp	r30, r20
     32a:	f5 07       	cpc	r31, r21
     32c:	61 f7       	brne	.-40     	; 0x306 <_Z12uart0_getintv+0x34>
     32e:	0f 90       	pop	r0
     330:	0f 90       	pop	r0
     332:	0f 90       	pop	r0
     334:	0f 90       	pop	r0
     336:	0f 90       	pop	r0
     338:	df 91       	pop	r29
     33a:	cf 91       	pop	r28
     33c:	1f 91       	pop	r17
     33e:	0f 91       	pop	r16
     340:	08 95       	ret

00000342 <_Z12wait_messagev>:

    void wait_message()
    {
        lcd_clear();
     342:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
        lcd_puts("Please wait");
     346:	8e e6       	ldi	r24, 0x6E	; 110
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
     34e:	08 95       	ret

00000350 <_Z5inputv>:
		return ans;
	}
	
	int digitalRead (int s)
	{
		return (PINB & (1<<s));
     350:	86 b3       	in	r24, 0x16	; 22
        lcd_puts("Please wait");
    }
   int input()
   {
       int a=0;
       if (digitalRead(s_zero))
     352:	28 2f       	mov	r18, r24
     354:	21 70       	andi	r18, 0x01	; 1
     356:	30 e0       	ldi	r19, 0x00	; 0
        lcd_clear();
        lcd_puts("Please wait");
    }
   int input()
   {
       int a=0;
     358:	c9 01       	movw	r24, r18
       if (digitalRead(s_zero))
         a+=1;
       if (digitalRead(s_one))
     35a:	b1 99       	sbic	0x16, 1	; 22
         a+=10;
     35c:	0a 96       	adiw	r24, 0x0a	; 10
       if (digitalRead(s_two))
     35e:	b2 9b       	sbis	0x16, 2	; 22
     360:	02 c0       	rjmp	.+4      	; 0x366 <_Z5inputv+0x16>
         a+=100;
     362:	8c 59       	subi	r24, 0x9C	; 156
     364:	9f 4f       	sbci	r25, 0xFF	; 255
       return(a);
   }
     366:	08 95       	ret

00000368 <_Z15main_menu_printi>:

   void main_menu_print(int first_visit)
   {
     368:	cf 93       	push	r28
     36a:	df 93       	push	r29
     36c:	ec 01       	movw	r28, r24
     lcd_clear();
     36e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     372:	62 e0       	ldi	r22, 0x02	; 2
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

   void main_menu_print(int first_visit)
   {
     lcd_clear();
     lcd_setCursor(0,0);
     lcd_puts(" ");
     37a:	8f eb       	ldi	r24, 0xBF	; 191
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     382:	62 e0       	ldi	r22, 0x02	; 2
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
   {
     lcd_clear();
     lcd_setCursor(0,0);
     lcd_puts(" ");
     lcd_setCursor(0,0);
      lcd_puts(">");
     38a:	8a e7       	ldi	r24, 0x7A	; 122
     38c:	90 e0       	ldi	r25, 0x00	; 0
     38e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	82 e0       	ldi	r24, 0x02	; 2
     396:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     lcd_puts(" ");
     lcd_setCursor(0,0);
      lcd_puts(">");

      lcd_setCursor(2, 1);
      lcd_puts("Selected Food");
     39a:	8c e7       	ldi	r24, 0x7C	; 124
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     3a2:	62 e0       	ldi	r22, 0x02	; 2
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

      lcd_setCursor(2, 1);
      lcd_puts("Selected Food");

      lcd_setCursor(2, 0);
      if (first_visit==1)
     3aa:	21 97       	sbiw	r28, 0x01	; 1
     3ac:	29 f4       	brne	.+10     	; 0x3b8 <_Z15main_menu_printi+0x50>
      lcd_puts("Change Food");
     3ae:	8a e8       	ldi	r24, 0x8A	; 138
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
     3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <_Z15main_menu_printi+0x58>
      else
      lcd_puts("Select Food");
     3b8:	86 e9       	ldi	r24, 0x96	; 150
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
   }
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	08 95       	ret

000003c6 <_Z17clear_second_linev>:
                lcd_num(food[selected_pk].num);

     }

     void clear_second_line()
     {
     3c6:	cf 93       	push	r28
     3c8:	c0 e0       	ldi	r28, 0x00	; 0
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     3ca:	61 e0       	ldi	r22, 0x01	; 1
     3cc:	8c 2f       	mov	r24, r28
     3ce:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     void clear_second_line()
     {
       for (int i=0;i<=15;i++)
       {
         lcd_setCursor(i,1);
         lcd_puts(" ");
     3d2:	8f eb       	ldi	r24, 0xBF	; 191
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
     3da:	cf 5f       	subi	r28, 0xFF	; 255

     }

     void clear_second_line()
     {
       for (int i=0;i<=15;i++)
     3dc:	c0 31       	cpi	r28, 0x10	; 16
     3de:	a9 f7       	brne	.-22     	; 0x3ca <_Z17clear_second_linev+0x4>
       {
         lcd_setCursor(i,1);
         lcd_puts(" ");
       }
     }
     3e0:	cf 91       	pop	r28
     3e2:	08 95       	ret

000003e4 <_Z17select_food_printi>:
      else
      lcd_puts("Select Food");
   }

   void select_food_print(int selected_pk)
     {
     3e4:	0f 93       	push	r16
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	8c 01       	movw	r16, r24
               clear_second_line();
     3ee:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <_Z17clear_second_linev>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     3f2:	61 e0       	ldi	r22, 0x01	; 1
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     {
               clear_second_line();

                lcd_setCursor(0,1);

                lcd_puts(food[selected_pk].name);
     3fa:	8c e1       	ldi	r24, 0x1C	; 28
     3fc:	80 9f       	mul	r24, r16
     3fe:	e0 01       	movw	r28, r0
     400:	81 9f       	mul	r24, r17
     402:	d0 0d       	add	r29, r0
     404:	11 24       	eor	r1, r1
     406:	ce 01       	movw	r24, r28
     408:	82 5f       	subi	r24, 0xF2	; 242
     40a:	9e 4f       	sbci	r25, 0xFE	; 254
     40c:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     410:	61 e0       	ldi	r22, 0x01	; 1
     412:	88 e0       	ldi	r24, 0x08	; 8
     414:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                lcd_setCursor(0,1);

                lcd_puts(food[selected_pk].name);

                lcd_setCursor(8,1);
                lcd_num(food[selected_pk].price);
     418:	c4 5f       	subi	r28, 0xF4	; 244
     41a:	de 4f       	sbci	r29, 0xFE	; 254
     41c:	8e 89       	ldd	r24, Y+22	; 0x16
     41e:	9f 89       	ldd	r25, Y+23	; 0x17
     420:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	8e e0       	ldi	r24, 0x0E	; 14
     428:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

                lcd_setCursor(8,1);
                lcd_num(food[selected_pk].price);

                 lcd_setCursor(14,1);
                lcd_num(food[selected_pk].num);
     42c:	88 8d       	ldd	r24, Y+24	; 0x18
     42e:	99 8d       	ldd	r25, Y+25	; 0x19
     430:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>

     }
     434:	df 91       	pop	r29
     436:	cf 91       	pop	r28
     438:	1f 91       	pop	r17
     43a:	0f 91       	pop	r16
     43c:	08 95       	ret

0000043e <_Z13cannot_cancelv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     43e:	2f ef       	ldi	r18, 0xFF	; 255
     440:	80 e7       	ldi	r24, 0x70	; 112
     442:	92 e0       	ldi	r25, 0x02	; 2
     444:	21 50       	subi	r18, 0x01	; 1
     446:	80 40       	sbci	r24, 0x00	; 0
     448:	90 40       	sbci	r25, 0x00	; 0
     44a:	e1 f7       	brne	.-8      	; 0x444 <_Z13cannot_cancelv+0x6>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <_Z13cannot_cancelv+0x10>
     44e:	00 00       	nop
     }

     void cannot_cancel()
     {
		  _delay_ms(DELAY_TIME);
          lcd_clear();
     450:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
         lcd_puts(" Cannot Cancel ");
     454:	82 ea       	ldi	r24, 0xA2	; 162
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	86 e0       	ldi	r24, 0x06	; 6
     460:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     {
		  _delay_ms(DELAY_TIME);
          lcd_clear();
         lcd_puts(" Cannot Cancel ");
         lcd_setCursor(6,1);
         lcd_puts(">Ok");
     464:	82 eb       	ldi	r24, 0xB2	; 178
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
         while(1)
           {
             int in=input();
     46c:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>
             if (in == ok)
     470:	20 91 62 00 	lds	r18, 0x0062
     474:	30 91 63 00 	lds	r19, 0x0063
     478:	82 17       	cp	r24, r18
     47a:	93 07       	cpc	r25, r19
     47c:	b9 f7       	brne	.-18     	; 0x46c <_Z13cannot_cancelv+0x2e>
     47e:	2f ef       	ldi	r18, 0xFF	; 255
     480:	80 e7       	ldi	r24, 0x70	; 112
     482:	92 e0       	ldi	r25, 0x02	; 2
     484:	21 50       	subi	r18, 0x01	; 1
     486:	80 40       	sbci	r24, 0x00	; 0
     488:	90 40       	sbci	r25, 0x00	; 0
     48a:	e1 f7       	brne	.-8      	; 0x484 <_Z13cannot_cancelv+0x46>
     48c:	00 c0       	rjmp	.+0      	; 0x48e <_Z13cannot_cancelv+0x50>
     48e:	00 00       	nop
     490:	08 95       	ret

00000492 <_Z16display_message1PKc>:
           }
     }

     //confirmation messages
     int display_message1(char const *s)
       {
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	ec 01       	movw	r28, r24
           lcd_clear();
     4a0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
           lcd_puts(s);
     4a4:	ce 01       	movw	r24, r28
     4a6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	82 e0       	ldi	r24, 0x02	; 2
     4ae:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     int display_message1(char const *s)
       {
           lcd_clear();
           lcd_puts(s);
           lcd_setCursor(2,1);
           lcd_puts(">Yes");
     4b2:	86 eb       	ldi	r24, 0xB6	; 182
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     4ba:	61 e0       	ldi	r22, 0x01	; 1
     4bc:	8c e0       	ldi	r24, 0x0C	; 12
     4be:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
           lcd_puts(s);
           lcd_setCursor(2,1);
           lcd_puts(">Yes");

           lcd_setCursor(12,1);
           lcd_puts("No");
     4c2:	8b eb       	ldi	r24, 0xBB	; 187
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
     4ca:	2f ef       	ldi	r18, 0xFF	; 255
     4cc:	80 e7       	ldi	r24, 0x70	; 112
     4ce:	92 e0       	ldi	r25, 0x02	; 2
     4d0:	21 50       	subi	r18, 0x01	; 1
     4d2:	80 40       	sbci	r24, 0x00	; 0
     4d4:	90 40       	sbci	r25, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <_Z16display_message1PKc+0x3e>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <_Z16display_message1PKc+0x48>
     4da:	00 00       	nop
           _delay_ms(DELAY_TIME);

           int state=1;
     4dc:	c1 e0       	ldi	r28, 0x01	; 1
     4de:	d0 e0       	ldi	r29, 0x00	; 0
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
                        lcd_setCursor(2,1);
                         lcd_puts(">");
                         state=1;
     4e0:	01 e0       	ldi	r16, 0x01	; 1
     4e2:	10 e0       	ldi	r17, 0x00	; 0
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
                        lcd_setCursor(11,1);
                         lcd_puts(">");
                         state=0;
     4e4:	e1 2c       	mov	r14, r1
     4e6:	f1 2c       	mov	r15, r1
           _delay_ms(DELAY_TIME);

           int state=1;
           while(1)
              {
                    int in=input();
     4e8:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>
                  //  lcd_puts (in);
                   if (state==1&& (in==left ||in==right))
     4ec:	c1 30       	cpi	r28, 0x01	; 1
     4ee:	d1 05       	cpc	r29, r1
     4f0:	09 f5       	brne	.+66     	; 0x534 <_Z16display_message1PKc+0xa2>
     4f2:	20 91 66 00 	lds	r18, 0x0066
     4f6:	30 91 67 00 	lds	r19, 0x0067
     4fa:	82 17       	cp	r24, r18
     4fc:	93 07       	cpc	r25, r19
     4fe:	39 f0       	breq	.+14     	; 0x50e <_Z16display_message1PKc+0x7c>
     500:	20 91 68 00 	lds	r18, 0x0068
     504:	30 91 69 00 	lds	r19, 0x0069
     508:	82 17       	cp	r24, r18
     50a:	93 07       	cpc	r25, r19
     50c:	b1 f5       	brne	.+108    	; 0x57a <_Z16display_message1PKc+0xe8>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     50e:	61 e0       	ldi	r22, 0x01	; 1
     510:	82 e0       	ldi	r24, 0x02	; 2
     512:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                    int in=input();
                  //  lcd_puts (in);
                   if (state==1&& (in==left ||in==right))
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
     516:	8f eb       	ldi	r24, 0xBF	; 191
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     51e:	61 e0       	ldi	r22, 0x01	; 1
     520:	8b e0       	ldi	r24, 0x0B	; 11
     522:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                   if (state==1&& (in==left ||in==right))
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
                        lcd_setCursor(11,1);
                         lcd_puts(">");
     526:	8a e7       	ldi	r24, 0x7A	; 122
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
                         state=0;
     52e:	ce 2d       	mov	r28, r14
     530:	df 2d       	mov	r29, r15
     532:	2a c0       	rjmp	.+84     	; 0x588 <_Z16display_message1PKc+0xf6>
                      }
                   else if (state==0 && (in==left ||in==right))
     534:	20 97       	sbiw	r28, 0x00	; 0
     536:	09 f5       	brne	.+66     	; 0x57a <_Z16display_message1PKc+0xe8>
     538:	20 91 66 00 	lds	r18, 0x0066
     53c:	30 91 67 00 	lds	r19, 0x0067
     540:	82 17       	cp	r24, r18
     542:	93 07       	cpc	r25, r19
     544:	39 f0       	breq	.+14     	; 0x554 <_Z16display_message1PKc+0xc2>
     546:	20 91 68 00 	lds	r18, 0x0068
     54a:	30 91 69 00 	lds	r19, 0x0069
     54e:	82 17       	cp	r24, r18
     550:	93 07       	cpc	r25, r19
     552:	99 f4       	brne	.+38     	; 0x57a <_Z16display_message1PKc+0xe8>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	8b e0       	ldi	r24, 0x0B	; 11
     558:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                         state=0;
                      }
                   else if (state==0 && (in==left ||in==right))
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
     55c:	8f eb       	ldi	r24, 0xBF	; 191
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
int dnum_of_food;

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     564:	61 e0       	ldi	r22, 0x01	; 1
     566:	82 e0       	ldi	r24, 0x02	; 2
     568:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                   else if (state==0 && (in==left ||in==right))
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
                        lcd_setCursor(2,1);
                         lcd_puts(">");
     56c:	8a e7       	ldi	r24, 0x7A	; 122
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
                         state=1;
     574:	c0 2f       	mov	r28, r16
     576:	d1 2f       	mov	r29, r17
     578:	07 c0       	rjmp	.+14     	; 0x588 <_Z16display_message1PKc+0xf6>
                      }
                  else if (in==ok)
     57a:	20 91 62 00 	lds	r18, 0x0062
     57e:	30 91 63 00 	lds	r19, 0x0063
     582:	82 17       	cp	r24, r18
     584:	93 07       	cpc	r25, r19
     586:	51 f0       	breq	.+20     	; 0x59c <_Z16display_message1PKc+0x10a>
     588:	8f ef       	ldi	r24, 0xFF	; 255
     58a:	90 e7       	ldi	r25, 0x70	; 112
     58c:	22 e0       	ldi	r18, 0x02	; 2
     58e:	81 50       	subi	r24, 0x01	; 1
     590:	90 40       	sbci	r25, 0x00	; 0
     592:	20 40       	sbci	r18, 0x00	; 0
     594:	e1 f7       	brne	.-8      	; 0x58e <_Z16display_message1PKc+0xfc>
     596:	00 c0       	rjmp	.+0      	; 0x598 <_Z16display_message1PKc+0x106>
     598:	00 00       	nop
     59a:	a6 cf       	rjmp	.-180    	; 0x4e8 <_Z16display_message1PKc+0x56>
                   return state;

                   _delay_ms(DELAY_TIME);
               }

       }
     59c:	ce 01       	movw	r24, r28
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	0f 91       	pop	r16
     5a6:	ff 90       	pop	r15
     5a8:	ef 90       	pop	r14
     5aa:	08 95       	ret

000005ac <_Z8get_infov>:




void get_info()
{
     5ac:	0f 93       	push	r16
     5ae:	1f 93       	push	r17
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
	uart0_flush();
     5b4:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <_Z11uart0_flushv>
  uart0_putc('1');
     5b8:	81 e3       	ldi	r24, 0x31	; 49
     5ba:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z10uart0_putch>
  while (!(uart0_available()) ) {}
     5be:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <_Z15uart0_availablev>
     5c2:	89 2b       	or	r24, r25
     5c4:	e1 f3       	breq	.-8      	; 0x5be <_Z8get_infov+0x12>
  num_of_food=uart0_getint();
     5c6:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12uart0_getintv>
     5ca:	90 93 b1 02 	sts	0x02B1, r25
     5ce:	80 93 b0 02 	sts	0x02B0, r24
//  Serial.puts (num+1);

  //Serial.puts(a);
for (int i=0;i<num_of_food;i++)
     5d2:	18 16       	cp	r1, r24
     5d4:	19 06       	cpc	r1, r25
     5d6:	1c f5       	brge	.+70     	; 0x61e <_Z8get_infov+0x72>
     5d8:	ce e0       	ldi	r28, 0x0E	; 14
     5da:	d1 e0       	ldi	r29, 0x01	; 1
     5dc:	00 e0       	ldi	r16, 0x00	; 0
     5de:	10 e0       	ldi	r17, 0x00	; 0
{
    //  Serial.puts("Start");
      food[i].id=uart0_getint();
     5e0:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12uart0_getintv>
     5e4:	fe 01       	movw	r30, r28
     5e6:	32 97       	sbiw	r30, 0x02	; 2
     5e8:	91 83       	std	Z+1, r25	; 0x01
     5ea:	80 83       	st	Z, r24
      uart0_gets(food[i].name);
     5ec:	ce 01       	movw	r24, r28
     5ee:	0e 94 25 01 	call	0x24a	; 0x24a <_Z10uart0_getsPc>
      food[i].price=uart0_getint();
     5f2:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12uart0_getintv>
     5f6:	9d 8b       	std	Y+21, r25	; 0x15
     5f8:	8c 8b       	std	Y+20, r24	; 0x14
      food[i].num=uart0_getint();
     5fa:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12uart0_getintv>
     5fe:	9f 8b       	std	Y+23, r25	; 0x17
     600:	8e 8b       	std	Y+22, r24	; 0x16
      food[i].p=uart0_getint();
     602:	0e 94 69 01 	call	0x2d2	; 0x2d2 <_Z12uart0_getintv>
     606:	99 8f       	std	Y+25, r25	; 0x19
     608:	88 8f       	std	Y+24, r24	; 0x18
  while (!(uart0_available()) ) {}
  num_of_food=uart0_getint();
//  Serial.puts (num+1);

  //Serial.puts(a);
for (int i=0;i<num_of_food;i++)
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	6c 96       	adiw	r28, 0x1c	; 28
     610:	80 91 b0 02 	lds	r24, 0x02B0
     614:	90 91 b1 02 	lds	r25, 0x02B1
     618:	08 17       	cp	r16, r24
     61a:	19 07       	cpc	r17, r25
     61c:	0c f3       	brlt	.-62     	; 0x5e0 <_Z8get_infov+0x34>
  }

  // Serial.putsln("Done");


}
     61e:	df 91       	pop	r29
     620:	cf 91       	pop	r28
     622:	1f 91       	pop	r17
     624:	0f 91       	pop	r16
     626:	08 95       	ret

00000628 <_Z9send_infov>:

      void send_info()
        {
     628:	0f 93       	push	r16
     62a:	1f 93       	push	r17
     62c:	cf 93       	push	r28
     62e:	df 93       	push	r29
          for (int i=0;i<num_of_food;i++)
     630:	80 91 b0 02 	lds	r24, 0x02B0
     634:	90 91 b1 02 	lds	r25, 0x02B1
     638:	18 16       	cp	r1, r24
     63a:	19 06       	cpc	r1, r25
     63c:	04 f5       	brge	.+64     	; 0x67e <_Z9send_infov+0x56>
     63e:	cc e0       	ldi	r28, 0x0C	; 12
     640:	d1 e0       	ldi	r29, 0x01	; 1
     642:	00 e0       	ldi	r16, 0x00	; 0
     644:	10 e0       	ldi	r17, 0x00	; 0
              {
                uart0_puts("2 ");
     646:	8e eb       	ldi	r24, 0xBE	; 190
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	0e 94 c5 08 	call	0x118a	; 0x118a <_Z10uart0_putsPKc>
				uart0_putint(food[i].id);
     64e:	88 81       	ld	r24, Y
     650:	99 81       	ldd	r25, Y+1	; 0x01
     652:	0e 94 9b 08 	call	0x1136	; 0x1136 <_Z12uart0_putinti>
                uart0_putc(' ');
     656:	80 e2       	ldi	r24, 0x20	; 32
     658:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z10uart0_putch>
                uart0_putint(food[i].num);
     65c:	88 8d       	ldd	r24, Y+24	; 0x18
     65e:	99 8d       	ldd	r25, Y+25	; 0x19
     660:	0e 94 9b 08 	call	0x1136	; 0x1136 <_Z12uart0_putinti>
                uart0_putc(' ');
     664:	80 e2       	ldi	r24, 0x20	; 32
     666:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z10uart0_putch>

}

      void send_info()
        {
          for (int i=0;i<num_of_food;i++)
     66a:	0f 5f       	subi	r16, 0xFF	; 255
     66c:	1f 4f       	sbci	r17, 0xFF	; 255
     66e:	6c 96       	adiw	r28, 0x1c	; 28
     670:	80 91 b0 02 	lds	r24, 0x02B0
     674:	90 91 b1 02 	lds	r25, 0x02B1
     678:	08 17       	cp	r16, r24
     67a:	19 07       	cpc	r17, r25
     67c:	24 f3       	brlt	.-56     	; 0x646 <_Z9send_infov+0x1e>
                uart0_putc(' ');
              }



        }
     67e:	df 91       	pop	r29
     680:	cf 91       	pop	r28
     682:	1f 91       	pop	r17
     684:	0f 91       	pop	r16
     686:	08 95       	ret

00000688 <_Z11select_foodv>:
}



int select_food()
{
     688:	1f 93       	push	r17
     68a:	cf 93       	push	r28
     68c:	df 93       	push	r29
	wait_message();
     68e:	0e 94 a1 01 	call	0x342	; 0x342 <_Z12wait_messagev>
	get_info();
     692:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z8get_infov>
	lcd_clear();
     696:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	lcd_puts("Food");
     69a:	85 e8       	ldi	r24, 0x85	; 133
     69c:	90 e0       	ldi	r25, 0x00	; 0
     69e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,0);
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	88 e0       	ldi	r24, 0x08	; 8
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("Price");
     6ae:	81 ec       	ldi	r24, 0xC1	; 193
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(14,0);
     6b6:	60 e0       	ldi	r22, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	8e e0       	ldi	r24, 0x0E	; 14
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("No");
     6c2:	8b eb       	ldi	r24, 0xBB	; 187
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	int selected_pk=0;
	lcd_setCursor(0,1);
     6ca:	61 e0       	ldi	r22, 0x01	; 1
     6cc:	70 e0       	ldi	r23, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>

	lcd_puts(food[selected_pk].name);
     6d6:	8e e0       	ldi	r24, 0x0E	; 14
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,1);
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	88 e0       	ldi	r24, 0x08	; 8
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].price);
     6ea:	cc e0       	ldi	r28, 0x0C	; 12
     6ec:	d1 e0       	ldi	r29, 0x01	; 1
     6ee:	8e 89       	ldd	r24, Y+22	; 0x16
     6f0:	9f 89       	ldd	r25, Y+23	; 0x17
     6f2:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>

	lcd_setCursor(14,1);
     6f6:	61 e0       	ldi	r22, 0x01	; 1
     6f8:	70 e0       	ldi	r23, 0x00	; 0
     6fa:	8e e0       	ldi	r24, 0x0E	; 14
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].num);
     702:	88 8d       	ldd	r24, Y+24	; 0x18
     704:	99 8d       	ldd	r25, Y+25	; 0x19
     706:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>
	lcd_puts("Price");

	lcd_setCursor(14,0);
	lcd_puts("No");

	int selected_pk=0;
     70a:	c0 e0       	ldi	r28, 0x00	; 0
     70c:	d0 e0       	ldi	r29, 0x00	; 0
		}

		else if (in==del)
		{
			if (display_message1("Set the no to 0?"))
			food[selected_pk].num=0;
     70e:	1c e1       	ldi	r17, 0x1C	; 28
	lcd_num(food[selected_pk].num);


	while(1)
	{
		int in=input();
     710:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>

		if (in==up)
     714:	20 91 6c 00 	lds	r18, 0x006C
     718:	30 91 6d 00 	lds	r19, 0x006D
     71c:	82 17       	cp	r24, r18
     71e:	93 07       	cpc	r25, r19
     720:	69 f4       	brne	.+26     	; 0x73c <_Z11select_foodv+0xb4>
		{
			if (selected_pk==0)  selected_pk=num_of_food-1;
     722:	20 97       	sbiw	r28, 0x00	; 0
     724:	31 f4       	brne	.+12     	; 0x732 <_Z11select_foodv+0xaa>
     726:	c0 91 b0 02 	lds	r28, 0x02B0
     72a:	d0 91 b1 02 	lds	r29, 0x02B1
     72e:	21 97       	sbiw	r28, 0x01	; 1
     730:	01 c0       	rjmp	.+2      	; 0x734 <_Z11select_foodv+0xac>
			else selected_pk--;
     732:	21 97       	sbiw	r28, 0x01	; 1
			select_food_print(selected_pk);
     734:	ce 01       	movw	r24, r28
     736:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     73a:	f2 c0       	rjmp	.+484    	; 0x920 <__stack+0xc1>

		}

		else if (in==down)
     73c:	20 91 6a 00 	lds	r18, 0x006A
     740:	30 91 6b 00 	lds	r19, 0x006B
     744:	82 17       	cp	r24, r18
     746:	93 07       	cpc	r25, r19
     748:	81 f4       	brne	.+32     	; 0x76a <_Z11select_foodv+0xe2>
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     74a:	80 91 b0 02 	lds	r24, 0x02B0
     74e:	90 91 b1 02 	lds	r25, 0x02B1
     752:	01 97       	sbiw	r24, 0x01	; 1
     754:	8c 17       	cp	r24, r28
     756:	9d 07       	cpc	r25, r29
     758:	11 f0       	breq	.+4      	; 0x75e <_Z11select_foodv+0xd6>
			else selected_pk++;
     75a:	21 96       	adiw	r28, 0x01	; 1
     75c:	02 c0       	rjmp	.+4      	; 0x762 <_Z11select_foodv+0xda>

		}

		else if (in==down)
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     75e:	c0 e0       	ldi	r28, 0x00	; 0
     760:	d0 e0       	ldi	r29, 0x00	; 0
			else selected_pk++;
			select_food_print(selected_pk);
     762:	ce 01       	movw	r24, r28
     764:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     768:	db c0       	rjmp	.+438    	; 0x920 <__stack+0xc1>

		}

		else if (in==left)
     76a:	20 91 66 00 	lds	r18, 0x0066
     76e:	30 91 67 00 	lds	r19, 0x0067
     772:	82 17       	cp	r24, r18
     774:	93 07       	cpc	r25, r19
     776:	d1 f4       	brne	.+52     	; 0x7ac <_Z11select_foodv+0x124>
		{
			if(food[selected_pk].num != 0)
     778:	1c 9f       	mul	r17, r28
     77a:	f0 01       	movw	r30, r0
     77c:	1d 9f       	mul	r17, r29
     77e:	f0 0d       	add	r31, r0
     780:	11 24       	eor	r1, r1
     782:	e4 5f       	subi	r30, 0xF4	; 244
     784:	fe 4f       	sbci	r31, 0xFE	; 254
     786:	80 8d       	ldd	r24, Z+24	; 0x18
     788:	91 8d       	ldd	r25, Z+25	; 0x19
     78a:	00 97       	sbiw	r24, 0x00	; 0
     78c:	09 f4       	brne	.+2      	; 0x790 <_Z11select_foodv+0x108>
     78e:	c8 c0       	rjmp	.+400    	; 0x920 <__stack+0xc1>
			{
				food[selected_pk].num--;
     790:	1c 9f       	mul	r17, r28
     792:	f0 01       	movw	r30, r0
     794:	1d 9f       	mul	r17, r29
     796:	f0 0d       	add	r31, r0
     798:	11 24       	eor	r1, r1
     79a:	e4 5f       	subi	r30, 0xF4	; 244
     79c:	fe 4f       	sbci	r31, 0xFE	; 254
     79e:	01 97       	sbiw	r24, 0x01	; 1
     7a0:	91 8f       	std	Z+25, r25	; 0x19
     7a2:	80 8f       	std	Z+24, r24	; 0x18
				select_food_print(selected_pk);
     7a4:	ce 01       	movw	r24, r28
     7a6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     7aa:	ba c0       	rjmp	.+372    	; 0x920 <__stack+0xc1>
			}


		}

		else if (in==right)
     7ac:	20 91 68 00 	lds	r18, 0x0068
     7b0:	30 91 69 00 	lds	r19, 0x0069
     7b4:	82 17       	cp	r24, r18
     7b6:	93 07       	cpc	r25, r19
     7b8:	81 f4       	brne	.+32     	; 0x7da <_Z11select_foodv+0x152>
		{
			food[selected_pk].num++;
     7ba:	1c 9f       	mul	r17, r28
     7bc:	f0 01       	movw	r30, r0
     7be:	1d 9f       	mul	r17, r29
     7c0:	f0 0d       	add	r31, r0
     7c2:	11 24       	eor	r1, r1
     7c4:	e4 5f       	subi	r30, 0xF4	; 244
     7c6:	fe 4f       	sbci	r31, 0xFE	; 254
     7c8:	80 8d       	ldd	r24, Z+24	; 0x18
     7ca:	91 8d       	ldd	r25, Z+25	; 0x19
     7cc:	01 96       	adiw	r24, 0x01	; 1
     7ce:	91 8f       	std	Z+25, r25	; 0x19
     7d0:	80 8f       	std	Z+24, r24	; 0x18
			select_food_print(selected_pk);
     7d2:	ce 01       	movw	r24, r28
     7d4:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     7d8:	a3 c0       	rjmp	.+326    	; 0x920 <__stack+0xc1>

		}

		else if (in==del)
     7da:	20 91 64 00 	lds	r18, 0x0064
     7de:	30 91 65 00 	lds	r19, 0x0065
     7e2:	82 17       	cp	r24, r18
     7e4:	93 07       	cpc	r25, r19
     7e6:	69 f5       	brne	.+90     	; 0x842 <_Z11select_foodv+0x1ba>
		{
			if (display_message1("Set the no to 0?"))
     7e8:	87 ec       	ldi	r24, 0xC7	; 199
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     7f0:	89 2b       	or	r24, r25
     7f2:	49 f0       	breq	.+18     	; 0x806 <_Z11select_foodv+0x17e>
			food[selected_pk].num=0;
     7f4:	1c 9f       	mul	r17, r28
     7f6:	f0 01       	movw	r30, r0
     7f8:	1d 9f       	mul	r17, r29
     7fa:	f0 0d       	add	r31, r0
     7fc:	11 24       	eor	r1, r1
     7fe:	e4 5f       	subi	r30, 0xF4	; 244
     800:	fe 4f       	sbci	r31, 0xFE	; 254
     802:	11 8e       	std	Z+25, r1	; 0x19
     804:	10 8e       	std	Z+24, r1	; 0x18

			lcd_clear();
     806:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     80a:	85 e8       	ldi	r24, 0x85	; 133
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     812:	60 e0       	ldi	r22, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	88 e0       	ldi	r24, 0x08	; 8
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     81e:	81 ec       	ldi	r24, 0xC1	; 193
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	8e e0       	ldi	r24, 0x0E	; 14
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     832:	8b eb       	ldi	r24, 0xBB	; 187
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     83a:	ce 01       	movw	r24, r28
     83c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     840:	6f c0       	rjmp	.+222    	; 0x920 <__stack+0xc1>
		}

		else if (in==ok)
     842:	20 91 62 00 	lds	r18, 0x0062
     846:	30 91 63 00 	lds	r19, 0x0063
     84a:	82 17       	cp	r24, r18
     84c:	93 07       	cpc	r25, r19
     84e:	91 f5       	brne	.+100    	; 0x8b4 <__stack+0x55>
		{
			if (display_message1("Save the changes"))
     850:	88 ed       	ldi	r24, 0xD8	; 216
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     858:	89 2b       	or	r24, r25
     85a:	71 f0       	breq	.+28     	; 0x878 <__stack+0x19>
			{
				send_info();
     85c:	0e 94 14 03 	call	0x628	; 0x628 <_Z9send_infov>
     860:	2f ef       	ldi	r18, 0xFF	; 255
     862:	80 e7       	ldi	r24, 0x70	; 112
     864:	92 e0       	ldi	r25, 0x02	; 2
     866:	21 50       	subi	r18, 0x01	; 1
     868:	80 40       	sbci	r24, 0x00	; 0
     86a:	90 40       	sbci	r25, 0x00	; 0
     86c:	e1 f7       	brne	.-8      	; 0x866 <__stack+0x7>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__stack+0x11>
     870:	00 00       	nop
				_delay_ms(DELAY_TIME);
				return 1;
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	5e c0       	rjmp	.+188    	; 0x934 <__stack+0xd5>
			}

			lcd_clear();
     878:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     87c:	85 e8       	ldi	r24, 0x85	; 133
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	88 e0       	ldi	r24, 0x08	; 8
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     890:	81 ec       	ldi	r24, 0xC1	; 193
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     898:	60 e0       	ldi	r22, 0x00	; 0
     89a:	70 e0       	ldi	r23, 0x00	; 0
     89c:	8e e0       	ldi	r24, 0x0E	; 14
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     8a4:	8b eb       	ldi	r24, 0xBB	; 187
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     8ac:	ce 01       	movw	r24, r28
     8ae:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     8b2:	36 c0       	rjmp	.+108    	; 0x920 <__stack+0xc1>

		}


		else if (in==back)
     8b4:	20 91 60 00 	lds	r18, 0x0060
     8b8:	30 91 61 00 	lds	r19, 0x0061
     8bc:	82 17       	cp	r24, r18
     8be:	93 07       	cpc	r25, r19
     8c0:	79 f5       	brne	.+94     	; 0x920 <__stack+0xc1>
		{
			if (display_message1("Discard Changes?"))
     8c2:	89 ee       	ldi	r24, 0xE9	; 233
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     8ca:	89 2b       	or	r24, r25
     8cc:	61 f0       	breq	.+24     	; 0x8e6 <__stack+0x87>
     8ce:	2f ef       	ldi	r18, 0xFF	; 255
     8d0:	80 e7       	ldi	r24, 0x70	; 112
     8d2:	92 e0       	ldi	r25, 0x02	; 2
     8d4:	21 50       	subi	r18, 0x01	; 1
     8d6:	80 40       	sbci	r24, 0x00	; 0
     8d8:	90 40       	sbci	r25, 0x00	; 0
     8da:	e1 f7       	brne	.-8      	; 0x8d4 <__stack+0x75>
     8dc:	00 c0       	rjmp	.+0      	; 0x8de <__stack+0x7f>
     8de:	00 00       	nop
			{
				_delay_ms(DELAY_TIME);
				return 0;
     8e0:	80 e0       	ldi	r24, 0x00	; 0
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	27 c0       	rjmp	.+78     	; 0x934 <__stack+0xd5>
			}

			lcd_clear();
     8e6:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     8ea:	85 e8       	ldi	r24, 0x85	; 133
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     8f2:	60 e0       	ldi	r22, 0x00	; 0
     8f4:	70 e0       	ldi	r23, 0x00	; 0
     8f6:	88 e0       	ldi	r24, 0x08	; 8
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     8fe:	81 ec       	ldi	r24, 0xC1	; 193
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     906:	60 e0       	ldi	r22, 0x00	; 0
     908:	70 e0       	ldi	r23, 0x00	; 0
     90a:	8e e0       	ldi	r24, 0x0E	; 14
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     912:	8b eb       	ldi	r24, 0xBB	; 187
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     91a:	ce 01       	movw	r24, r28
     91c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	80 e7       	ldi	r24, 0x70	; 112
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	21 50       	subi	r18, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0xc7>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0xd1>
     930:	00 00       	nop
     932:	ee ce       	rjmp	.-548    	; 0x710 <_Z11select_foodv+0x88>


		_delay_ms(DELAY_TIME);
	}

}
     934:	df 91       	pop	r29
     936:	cf 91       	pop	r28
     938:	1f 91       	pop	r17
     93a:	08 95       	ret

0000093c <_Z13selected_foodv>:



void selected_food()
{
     93c:	cf 92       	push	r12
     93e:	df 92       	push	r13
     940:	ef 92       	push	r14
     942:	ff 92       	push	r15
     944:	0f 93       	push	r16
     946:	1f 93       	push	r17
     948:	cf 93       	push	r28
     94a:	df 93       	push	r29
     94c:	cd b7       	in	r28, 0x3d	; 61
     94e:	de b7       	in	r29, 0x3e	; 62
     950:	c8 5c       	subi	r28, 0xC8	; 200
     952:	d1 09       	sbc	r29, r1
     954:	0f b6       	in	r0, 0x3f	; 63
     956:	f8 94       	cli
     958:	de bf       	out	0x3e, r29	; 62
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	cd bf       	out	0x3d, r28	; 61
	wait_message();
     95e:	0e 94 a1 01 	call	0x342	; 0x342 <_Z12wait_messagev>
	get_info();
     962:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z8get_infov>
	lcd_clear();
     966:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>

	int ar[100];
	int count=0;
	for (int i=0;i<num_of_food;i++)
     96a:	40 91 b0 02 	lds	r20, 0x02B0
     96e:	50 91 b1 02 	lds	r21, 0x02B1
     972:	14 16       	cp	r1, r20
     974:	15 06       	cpc	r1, r21
     976:	24 f5       	brge	.+72     	; 0x9c0 <_Z13selected_foodv+0x84>
     978:	ec e0       	ldi	r30, 0x0C	; 12
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	00 e0       	ldi	r16, 0x00	; 0
     982:	10 e0       	ldi	r17, 0x00	; 0
	{
		if (food[i].num>0)
     984:	20 8d       	ldd	r18, Z+24	; 0x18
     986:	31 8d       	ldd	r19, Z+25	; 0x19
     988:	12 16       	cp	r1, r18
     98a:	13 06       	cpc	r1, r19
     98c:	8c f4       	brge	.+34     	; 0x9b0 <_Z13selected_foodv+0x74>
		{
			ar[count]=food[i].id-1;
     98e:	d8 01       	movw	r26, r16
     990:	aa 0f       	add	r26, r26
     992:	bb 1f       	adc	r27, r27
     994:	21 e0       	ldi	r18, 0x01	; 1
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	2c 0f       	add	r18, r28
     99a:	3d 1f       	adc	r19, r29
     99c:	a2 0f       	add	r26, r18
     99e:	b3 1f       	adc	r27, r19
     9a0:	20 81       	ld	r18, Z
     9a2:	31 81       	ldd	r19, Z+1	; 0x01
     9a4:	21 50       	subi	r18, 0x01	; 1
     9a6:	31 09       	sbc	r19, r1
     9a8:	2d 93       	st	X+, r18
     9aa:	3c 93       	st	X, r19
			//    lcd_puts(ar[count]);
			count++;
     9ac:	0f 5f       	subi	r16, 0xFF	; 255
     9ae:	1f 4f       	sbci	r17, 0xFF	; 255
	get_info();
	lcd_clear();

	int ar[100];
	int count=0;
	for (int i=0;i<num_of_food;i++)
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	7c 96       	adiw	r30, 0x1c	; 28
     9b4:	84 17       	cp	r24, r20
     9b6:	95 07       	cpc	r25, r21
     9b8:	2c f3       	brlt	.-54     	; 0x984 <_Z13selected_foodv+0x48>
			ar[count]=food[i].id-1;
			//    lcd_puts(ar[count]);
			count++;
		}
	}
	if (count==0)
     9ba:	01 15       	cp	r16, r1
     9bc:	11 05       	cpc	r17, r1
     9be:	09 f5       	brne	.+66     	; 0xa02 <_Z13selected_foodv+0xc6>
	{
		lcd_puts("No Foods Ordered");
     9c0:	8a ef       	ldi	r24, 0xFA	; 250
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
		lcd_setCursor(6,1);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	70 e0       	ldi	r23, 0x00	; 0
     9cc:	86 e0       	ldi	r24, 0x06	; 6
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
		lcd_puts(">Ok");
     9d4:	82 eb       	ldi	r24, 0xB2	; 178
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
		while(1)
		{
			int in=input();
     9dc:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>
			if (in == ok)
     9e0:	20 91 62 00 	lds	r18, 0x0062
     9e4:	30 91 63 00 	lds	r19, 0x0063
     9e8:	82 17       	cp	r24, r18
     9ea:	93 07       	cpc	r25, r19
     9ec:	b9 f7       	brne	.-18     	; 0x9dc <_Z13selected_foodv+0xa0>
     9ee:	3f ef       	ldi	r19, 0xFF	; 255
     9f0:	80 e7       	ldi	r24, 0x70	; 112
     9f2:	92 e0       	ldi	r25, 0x02	; 2
     9f4:	31 50       	subi	r19, 0x01	; 1
     9f6:	80 40       	sbci	r24, 0x00	; 0
     9f8:	90 40       	sbci	r25, 0x00	; 0
     9fa:	e1 f7       	brne	.-8      	; 0x9f4 <_Z13selected_foodv+0xb8>
     9fc:	00 c0       	rjmp	.+0      	; 0x9fe <_Z13selected_foodv+0xc2>
     9fe:	00 00       	nop
     a00:	9f c0       	rjmp	.+318    	; 0xb40 <_Z13selected_foodv+0x204>
				return ;
			}
		}

	}
	lcd_puts("Food");
     a02:	85 e8       	ldi	r24, 0x85	; 133
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,0);
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	88 e0       	ldi	r24, 0x08	; 8
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("Price");
     a16:	81 ec       	ldi	r24, 0xC1	; 193
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(14,0);
     a1e:	60 e0       	ldi	r22, 0x00	; 0
     a20:	70 e0       	ldi	r23, 0x00	; 0
     a22:	8e e0       	ldi	r24, 0x0E	; 14
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("No");
     a2a:	8b eb       	ldi	r24, 0xBB	; 187
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(0,1);
     a32:	61 e0       	ldi	r22, 0x01	; 1
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>

	int pk=0;

	lcd_puts(food[ar[pk]].name);
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	2c e1       	ldi	r18, 0x1C	; 28
     a44:	28 9f       	mul	r18, r24
     a46:	70 01       	movw	r14, r0
     a48:	29 9f       	mul	r18, r25
     a4a:	f0 0c       	add	r15, r0
     a4c:	11 24       	eor	r1, r1
     a4e:	c7 01       	movw	r24, r14
     a50:	82 5f       	subi	r24, 0xF2	; 242
     a52:	9e 4f       	sbci	r25, 0xFE	; 254
     a54:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,1);
     a58:	61 e0       	ldi	r22, 0x01	; 1
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	88 e0       	ldi	r24, 0x08	; 8
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[ar[pk]].price);
     a64:	f7 01       	movw	r30, r14
     a66:	e4 5f       	subi	r30, 0xF4	; 244
     a68:	fe 4f       	sbci	r31, 0xFE	; 254
     a6a:	7f 01       	movw	r14, r30
     a6c:	86 89       	ldd	r24, Z+22	; 0x16
     a6e:	97 89       	ldd	r25, Z+23	; 0x17
     a70:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>

	lcd_setCursor(14,1);
     a74:	61 e0       	ldi	r22, 0x01	; 1
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	8e e0       	ldi	r24, 0x0E	; 14
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[ar[pk]].num);
     a80:	f7 01       	movw	r30, r14
     a82:	80 8d       	ldd	r24, Z+24	; 0x18
     a84:	91 8d       	ldd	r25, Z+25	; 0x19
     a86:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>
	lcd_setCursor(14,0);
	lcd_puts("No");

	lcd_setCursor(0,1);

	int pk=0;
     a8a:	e1 2c       	mov	r14, r1
     a8c:	f1 2c       	mov	r15, r1

		}

		else if (in==down)
		{
			if (pk==count-1) pk=0;
     a8e:	01 50       	subi	r16, 0x01	; 1
     a90:	11 09       	sbc	r17, r1
     a92:	c1 2c       	mov	r12, r1
     a94:	d1 2c       	mov	r13, r1
	lcd_num(food[ar[pk]].num);


	while(1)
	{
		int in=input();
     a96:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>

		if (in==up)
     a9a:	20 91 6c 00 	lds	r18, 0x006C
     a9e:	30 91 6d 00 	lds	r19, 0x006D
     aa2:	82 17       	cp	r24, r18
     aa4:	93 07       	cpc	r25, r19
     aa6:	b1 f4       	brne	.+44     	; 0xad4 <_Z13selected_foodv+0x198>
		{
			if (pk==0)  pk=count-1;
     aa8:	e1 14       	cp	r14, r1
     aaa:	f1 04       	cpc	r15, r1
     aac:	11 f4       	brne	.+4      	; 0xab2 <_Z13selected_foodv+0x176>
     aae:	78 01       	movw	r14, r16
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <_Z13selected_foodv+0x17c>
			else   pk--;
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	ef 1a       	sub	r14, r31
     ab6:	f1 08       	sbc	r15, r1
			select_food_print(ar[pk]);
     ab8:	f7 01       	movw	r30, r14
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	21 e0       	ldi	r18, 0x01	; 1
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	2c 0f       	add	r18, r28
     ac4:	3d 1f       	adc	r19, r29
     ac6:	e2 0f       	add	r30, r18
     ac8:	f3 1f       	adc	r31, r19
     aca:	80 81       	ld	r24, Z
     acc:	91 81       	ldd	r25, Z+1	; 0x01
     ace:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     ad2:	2c c0       	rjmp	.+88     	; 0xb2c <_Z13selected_foodv+0x1f0>

		}

		else if (in==down)
     ad4:	20 91 6a 00 	lds	r18, 0x006A
     ad8:	30 91 6b 00 	lds	r19, 0x006B
     adc:	82 17       	cp	r24, r18
     ade:	93 07       	cpc	r25, r19
     ae0:	b9 f4       	brne	.+46     	; 0xb10 <_Z13selected_foodv+0x1d4>
		{
			if (pk==count-1) pk=0;
     ae2:	0e 15       	cp	r16, r14
     ae4:	1f 05       	cpc	r17, r15
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <_Z13selected_foodv+0x1b4>
			else pk++;
     ae8:	3f ef       	ldi	r19, 0xFF	; 255
     aea:	e3 1a       	sub	r14, r19
     aec:	f3 0a       	sbc	r15, r19
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <_Z13selected_foodv+0x1b8>

		}

		else if (in==down)
		{
			if (pk==count-1) pk=0;
     af0:	ec 2c       	mov	r14, r12
     af2:	fd 2c       	mov	r15, r13
			else pk++;
			select_food_print(ar[pk]);
     af4:	f7 01       	movw	r30, r14
     af6:	ee 0f       	add	r30, r30
     af8:	ff 1f       	adc	r31, r31
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	8c 0f       	add	r24, r28
     b00:	9d 1f       	adc	r25, r29
     b02:	e8 0f       	add	r30, r24
     b04:	f9 1f       	adc	r31, r25
     b06:	80 81       	ld	r24, Z
     b08:	91 81       	ldd	r25, Z+1	; 0x01
     b0a:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     b0e:	0e c0       	rjmp	.+28     	; 0xb2c <_Z13selected_foodv+0x1f0>

		}


		else if (in==ok || in==back)
     b10:	20 91 62 00 	lds	r18, 0x0062
     b14:	30 91 63 00 	lds	r19, 0x0063
     b18:	82 17       	cp	r24, r18
     b1a:	93 07       	cpc	r25, r19
     b1c:	89 f0       	breq	.+34     	; 0xb40 <_Z13selected_foodv+0x204>
     b1e:	20 91 60 00 	lds	r18, 0x0060
     b22:	30 91 61 00 	lds	r19, 0x0061
     b26:	82 17       	cp	r24, r18
     b28:	93 07       	cpc	r25, r19
     b2a:	51 f0       	breq	.+20     	; 0xb40 <_Z13selected_foodv+0x204>
     b2c:	9f ef       	ldi	r25, 0xFF	; 255
     b2e:	e0 e7       	ldi	r30, 0x70	; 112
     b30:	f2 e0       	ldi	r31, 0x02	; 2
     b32:	91 50       	subi	r25, 0x01	; 1
     b34:	e0 40       	sbci	r30, 0x00	; 0
     b36:	f0 40       	sbci	r31, 0x00	; 0
     b38:	e1 f7       	brne	.-8      	; 0xb32 <_Z13selected_foodv+0x1f6>
     b3a:	00 c0       	rjmp	.+0      	; 0xb3c <_Z13selected_foodv+0x200>
     b3c:	00 00       	nop
     b3e:	ab cf       	rjmp	.-170    	; 0xa96 <_Z13selected_foodv+0x15a>
			return;
		}

		_delay_ms(DELAY_TIME);
	}
}
     b40:	c8 53       	subi	r28, 0x38	; 56
     b42:	df 4f       	sbci	r29, 0xFF	; 255
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	ff 90       	pop	r15
     b58:	ef 90       	pop	r14
     b5a:	df 90       	pop	r13
     b5c:	cf 90       	pop	r12
     b5e:	08 95       	ret

00000b60 <_Z11change_foodv>:




void change_food()
{
     b60:	1f 93       	push	r17
     b62:	cf 93       	push	r28
     b64:	df 93       	push	r29
	wait_message();
     b66:	0e 94 a1 01 	call	0x342	; 0x342 <_Z12wait_messagev>
	get_info();
     b6a:	0e 94 d6 02 	call	0x5ac	; 0x5ac <_Z8get_infov>
	lcd_clear();
     b6e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	lcd_puts("Food");
     b72:	85 e8       	ldi	r24, 0x85	; 133
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,0);
     b7a:	60 e0       	ldi	r22, 0x00	; 0
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	88 e0       	ldi	r24, 0x08	; 8
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("Price");
     b86:	81 ec       	ldi	r24, 0xC1	; 193
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(14,0);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	8e e0       	ldi	r24, 0x0E	; 14
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_puts("No");
     b9a:	8b eb       	ldi	r24, 0xBB	; 187
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	int selected_pk=0;
	lcd_setCursor(0,1);
     ba2:	61 e0       	ldi	r22, 0x01	; 1
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>

	lcd_puts(food[selected_pk].name);
     bae:	8e e0       	ldi	r24, 0x0E	; 14
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

	lcd_setCursor(8,1);
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	88 e0       	ldi	r24, 0x08	; 8
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].price);
     bc2:	cc e0       	ldi	r28, 0x0C	; 12
     bc4:	d1 e0       	ldi	r29, 0x01	; 1
     bc6:	8e 89       	ldd	r24, Y+22	; 0x16
     bc8:	9f 89       	ldd	r25, Y+23	; 0x17
     bca:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>

	lcd_setCursor(14,1);
     bce:	61 e0       	ldi	r22, 0x01	; 1
     bd0:	70 e0       	ldi	r23, 0x00	; 0
     bd2:	8e e0       	ldi	r24, 0x0E	; 14
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].num);
     bda:	88 8d       	ldd	r24, Y+24	; 0x18
     bdc:	99 8d       	ldd	r25, Y+25	; 0x19
     bde:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z7lcd_numi>
	lcd_puts("Price");

	lcd_setCursor(14,0);
	lcd_puts("No");

	int selected_pk=0;
     be2:	c0 e0       	ldi	r28, 0x00	; 0
     be4:	d0 e0       	ldi	r29, 0x00	; 0

		}

		else if (in==del)
		{
			if (food[selected_pk].p==0)
     be6:	1c e1       	ldi	r17, 0x1C	; 28
	lcd_num(food[selected_pk].num);


	while(1)
	{
		int in=input();
     be8:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>

		if (in==up)
     bec:	20 91 6c 00 	lds	r18, 0x006C
     bf0:	30 91 6d 00 	lds	r19, 0x006D
     bf4:	82 17       	cp	r24, r18
     bf6:	93 07       	cpc	r25, r19
     bf8:	69 f4       	brne	.+26     	; 0xc14 <_Z11change_foodv+0xb4>
		{
			if (selected_pk==0)  selected_pk=num_of_food-1;
     bfa:	20 97       	sbiw	r28, 0x00	; 0
     bfc:	31 f4       	brne	.+12     	; 0xc0a <_Z11change_foodv+0xaa>
     bfe:	c0 91 b0 02 	lds	r28, 0x02B0
     c02:	d0 91 b1 02 	lds	r29, 0x02B1
     c06:	21 97       	sbiw	r28, 0x01	; 1
     c08:	01 c0       	rjmp	.+2      	; 0xc0c <_Z11change_foodv+0xac>
			else selected_pk--;
     c0a:	21 97       	sbiw	r28, 0x01	; 1
			select_food_print(selected_pk);
     c0c:	ce 01       	movw	r24, r28
     c0e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     c12:	28 c1       	rjmp	.+592    	; 0xe64 <_Z11change_foodv+0x304>

		}

		else if (in==down)
     c14:	20 91 6a 00 	lds	r18, 0x006A
     c18:	30 91 6b 00 	lds	r19, 0x006B
     c1c:	82 17       	cp	r24, r18
     c1e:	93 07       	cpc	r25, r19
     c20:	81 f4       	brne	.+32     	; 0xc42 <_Z11change_foodv+0xe2>
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     c22:	80 91 b0 02 	lds	r24, 0x02B0
     c26:	90 91 b1 02 	lds	r25, 0x02B1
     c2a:	01 97       	sbiw	r24, 0x01	; 1
     c2c:	8c 17       	cp	r24, r28
     c2e:	9d 07       	cpc	r25, r29
     c30:	11 f0       	breq	.+4      	; 0xc36 <_Z11change_foodv+0xd6>
			else selected_pk++;
     c32:	21 96       	adiw	r28, 0x01	; 1
     c34:	02 c0       	rjmp	.+4      	; 0xc3a <_Z11change_foodv+0xda>

		}

		else if (in==down)
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     c36:	c0 e0       	ldi	r28, 0x00	; 0
     c38:	d0 e0       	ldi	r29, 0x00	; 0
			else selected_pk++;
			select_food_print(selected_pk);
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     c40:	11 c1       	rjmp	.+546    	; 0xe64 <_Z11change_foodv+0x304>

		}

		else if (in==left)
     c42:	20 91 66 00 	lds	r18, 0x0066
     c46:	30 91 67 00 	lds	r19, 0x0067
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	09 f0       	breq	.+2      	; 0xc52 <_Z11change_foodv+0xf2>
     c50:	45 c0       	rjmp	.+138    	; 0xcdc <_Z11change_foodv+0x17c>
		{
			if (food[selected_pk].p==0)
     c52:	1c 9f       	mul	r17, r28
     c54:	f0 01       	movw	r30, r0
     c56:	1d 9f       	mul	r17, r29
     c58:	f0 0d       	add	r31, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	e4 5f       	subi	r30, 0xF4	; 244
     c5e:	fe 4f       	sbci	r31, 0xFE	; 254
     c60:	82 8d       	ldd	r24, Z+26	; 0x1a
     c62:	93 8d       	ldd	r25, Z+27	; 0x1b
     c64:	89 2b       	or	r24, r25
     c66:	d1 f4       	brne	.+52     	; 0xc9c <_Z11change_foodv+0x13c>
			{
				if(food[selected_pk].num != 0)
     c68:	1c 9f       	mul	r17, r28
     c6a:	f0 01       	movw	r30, r0
     c6c:	1d 9f       	mul	r17, r29
     c6e:	f0 0d       	add	r31, r0
     c70:	11 24       	eor	r1, r1
     c72:	e4 5f       	subi	r30, 0xF4	; 244
     c74:	fe 4f       	sbci	r31, 0xFE	; 254
     c76:	80 8d       	ldd	r24, Z+24	; 0x18
     c78:	91 8d       	ldd	r25, Z+25	; 0x19
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	09 f4       	brne	.+2      	; 0xc80 <_Z11change_foodv+0x120>
     c7e:	f2 c0       	rjmp	.+484    	; 0xe64 <_Z11change_foodv+0x304>
				{
					food[selected_pk].num--;
     c80:	1c 9f       	mul	r17, r28
     c82:	f0 01       	movw	r30, r0
     c84:	1d 9f       	mul	r17, r29
     c86:	f0 0d       	add	r31, r0
     c88:	11 24       	eor	r1, r1
     c8a:	e4 5f       	subi	r30, 0xF4	; 244
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	01 97       	sbiw	r24, 0x01	; 1
     c90:	91 8f       	std	Z+25, r25	; 0x19
     c92:	80 8f       	std	Z+24, r24	; 0x18
					select_food_print(selected_pk);
     c94:	ce 01       	movw	r24, r28
     c96:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     c9a:	e4 c0       	rjmp	.+456    	; 0xe64 <_Z11change_foodv+0x304>
				}

			}
			else
			{
				cannot_cancel();
     c9c:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z13cannot_cancelv>
				lcd_clear();
     ca0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
				lcd_puts("Food");
     ca4:	85 e8       	ldi	r24, 0x85	; 133
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

				lcd_setCursor(8,0);
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	88 e0       	ldi	r24, 0x08	; 8
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
				lcd_puts("Price");
     cb8:	81 ec       	ldi	r24, 0xC1	; 193
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

				lcd_setCursor(14,0);
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	8e e0       	ldi	r24, 0x0E	; 14
     cc6:	90 e0       	ldi	r25, 0x00	; 0
     cc8:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
				lcd_puts("No");
     ccc:	8b eb       	ldi	r24, 0xBB	; 187
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

				select_food_print(selected_pk);
     cd4:	ce 01       	movw	r24, r28
     cd6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     cda:	c4 c0       	rjmp	.+392    	; 0xe64 <_Z11change_foodv+0x304>





		else if (in==right)
     cdc:	20 91 68 00 	lds	r18, 0x0068
     ce0:	30 91 69 00 	lds	r19, 0x0069
     ce4:	82 17       	cp	r24, r18
     ce6:	93 07       	cpc	r25, r19
     ce8:	81 f4       	brne	.+32     	; 0xd0a <_Z11change_foodv+0x1aa>
		{
			food[selected_pk].num++;
     cea:	1c 9f       	mul	r17, r28
     cec:	f0 01       	movw	r30, r0
     cee:	1d 9f       	mul	r17, r29
     cf0:	f0 0d       	add	r31, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	e4 5f       	subi	r30, 0xF4	; 244
     cf6:	fe 4f       	sbci	r31, 0xFE	; 254
     cf8:	80 8d       	ldd	r24, Z+24	; 0x18
     cfa:	91 8d       	ldd	r25, Z+25	; 0x19
     cfc:	01 96       	adiw	r24, 0x01	; 1
     cfe:	91 8f       	std	Z+25, r25	; 0x19
     d00:	80 8f       	std	Z+24, r24	; 0x18
			select_food_print(selected_pk);
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     d08:	ad c0       	rjmp	.+346    	; 0xe64 <_Z11change_foodv+0x304>

		}

		else if (in==del)
     d0a:	20 91 64 00 	lds	r18, 0x0064
     d0e:	30 91 65 00 	lds	r19, 0x0065
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	d9 f5       	brne	.+118    	; 0xd8e <_Z11change_foodv+0x22e>
		{
			if (food[selected_pk].p==0)
     d18:	1c 9f       	mul	r17, r28
     d1a:	f0 01       	movw	r30, r0
     d1c:	1d 9f       	mul	r17, r29
     d1e:	f0 0d       	add	r31, r0
     d20:	11 24       	eor	r1, r1
     d22:	e4 5f       	subi	r30, 0xF4	; 244
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	82 8d       	ldd	r24, Z+26	; 0x1a
     d28:	93 8d       	ldd	r25, Z+27	; 0x1b
     d2a:	89 2b       	or	r24, r25
     d2c:	81 f4       	brne	.+32     	; 0xd4e <_Z11change_foodv+0x1ee>
			{
				if (display_message1("Set the no to 0?"))
     d2e:	87 ec       	ldi	r24, 0xC7	; 199
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     d36:	89 2b       	or	r24, r25
     d38:	61 f0       	breq	.+24     	; 0xd52 <_Z11change_foodv+0x1f2>
				food[selected_pk].num=0;
     d3a:	1c 9f       	mul	r17, r28
     d3c:	f0 01       	movw	r30, r0
     d3e:	1d 9f       	mul	r17, r29
     d40:	f0 0d       	add	r31, r0
     d42:	11 24       	eor	r1, r1
     d44:	e4 5f       	subi	r30, 0xF4	; 244
     d46:	fe 4f       	sbci	r31, 0xFE	; 254
     d48:	11 8e       	std	Z+25, r1	; 0x19
     d4a:	10 8e       	std	Z+24, r1	; 0x18
     d4c:	02 c0       	rjmp	.+4      	; 0xd52 <_Z11change_foodv+0x1f2>
			}
			else
			cannot_cancel();
     d4e:	0e 94 1f 02 	call	0x43e	; 0x43e <_Z13cannot_cancelv>

			lcd_clear();
     d52:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     d56:	85 e8       	ldi	r24, 0x85	; 133
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     d5e:	60 e0       	ldi	r22, 0x00	; 0
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	88 e0       	ldi	r24, 0x08	; 8
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     d6a:	81 ec       	ldi	r24, 0xC1	; 193
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     d72:	60 e0       	ldi	r22, 0x00	; 0
     d74:	70 e0       	ldi	r23, 0x00	; 0
     d76:	8e e0       	ldi	r24, 0x0E	; 14
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     d7e:	8b eb       	ldi	r24, 0xBB	; 187
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     d8c:	6b c0       	rjmp	.+214    	; 0xe64 <_Z11change_foodv+0x304>
		}

		else if (in==ok)
     d8e:	20 91 62 00 	lds	r18, 0x0062
     d92:	30 91 63 00 	lds	r19, 0x0063
     d96:	82 17       	cp	r24, r18
     d98:	93 07       	cpc	r25, r19
     d9a:	81 f5       	brne	.+96     	; 0xdfc <_Z11change_foodv+0x29c>
		{
			if (display_message1("Save the changes"))
     d9c:	88 ed       	ldi	r24, 0xD8	; 216
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     da4:	89 2b       	or	r24, r25
     da6:	61 f0       	breq	.+24     	; 0xdc0 <_Z11change_foodv+0x260>
			{
				send_info();
     da8:	0e 94 14 03 	call	0x628	; 0x628 <_Z9send_infov>
     dac:	2f ef       	ldi	r18, 0xFF	; 255
     dae:	80 e7       	ldi	r24, 0x70	; 112
     db0:	92 e0       	ldi	r25, 0x02	; 2
     db2:	21 50       	subi	r18, 0x01	; 1
     db4:	80 40       	sbci	r24, 0x00	; 0
     db6:	90 40       	sbci	r25, 0x00	; 0
     db8:	e1 f7       	brne	.-8      	; 0xdb2 <_Z11change_foodv+0x252>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <_Z11change_foodv+0x25c>
     dbc:	00 00       	nop
     dbe:	5c c0       	rjmp	.+184    	; 0xe78 <_Z11change_foodv+0x318>
				_delay_ms(DELAY_TIME);
				return;
			}

			lcd_clear();
     dc0:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     dc4:	85 e8       	ldi	r24, 0x85	; 133
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	70 e0       	ldi	r23, 0x00	; 0
     dd0:	88 e0       	ldi	r24, 0x08	; 8
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     dd8:	81 ec       	ldi	r24, 0xC1	; 193
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     de0:	60 e0       	ldi	r22, 0x00	; 0
     de2:	70 e0       	ldi	r23, 0x00	; 0
     de4:	8e e0       	ldi	r24, 0x0E	; 14
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     dec:	8b eb       	ldi	r24, 0xBB	; 187
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     df4:	ce 01       	movw	r24, r28
     df6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     dfa:	34 c0       	rjmp	.+104    	; 0xe64 <_Z11change_foodv+0x304>

		}


		else if (in==back)
     dfc:	20 91 60 00 	lds	r18, 0x0060
     e00:	30 91 61 00 	lds	r19, 0x0061
     e04:	82 17       	cp	r24, r18
     e06:	93 07       	cpc	r25, r19
     e08:	69 f5       	brne	.+90     	; 0xe64 <_Z11change_foodv+0x304>
		{
			if (display_message1("Discard Changes?"))
     e0a:	89 ee       	ldi	r24, 0xE9	; 233
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 49 02 	call	0x492	; 0x492 <_Z16display_message1PKc>
     e12:	89 2b       	or	r24, r25
     e14:	51 f0       	breq	.+20     	; 0xe2a <_Z11change_foodv+0x2ca>
     e16:	2f ef       	ldi	r18, 0xFF	; 255
     e18:	80 e7       	ldi	r24, 0x70	; 112
     e1a:	92 e0       	ldi	r25, 0x02	; 2
     e1c:	21 50       	subi	r18, 0x01	; 1
     e1e:	80 40       	sbci	r24, 0x00	; 0
     e20:	90 40       	sbci	r25, 0x00	; 0
     e22:	e1 f7       	brne	.-8      	; 0xe1c <_Z11change_foodv+0x2bc>
     e24:	00 c0       	rjmp	.+0      	; 0xe26 <_Z11change_foodv+0x2c6>
     e26:	00 00       	nop
     e28:	27 c0       	rjmp	.+78     	; 0xe78 <_Z11change_foodv+0x318>
			{
				_delay_ms(DELAY_TIME);
				return ;
			}

			lcd_clear();
     e2a:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     e2e:	85 e8       	ldi	r24, 0x85	; 133
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     e36:	60 e0       	ldi	r22, 0x00	; 0
     e38:	70 e0       	ldi	r23, 0x00	; 0
     e3a:	88 e0       	ldi	r24, 0x08	; 8
     e3c:	90 e0       	ldi	r25, 0x00	; 0
     e3e:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("Price");
     e42:	81 ec       	ldi	r24, 0xC1	; 193
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     e4a:	60 e0       	ldi	r22, 0x00	; 0
     e4c:	70 e0       	ldi	r23, 0x00	; 0
     e4e:	8e e0       	ldi	r24, 0x0E	; 14
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts("No");
     e56:	8b eb       	ldi	r24, 0xBB	; 187
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     e5e:	ce 01       	movw	r24, r28
     e60:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <_Z17select_food_printi>
     e64:	2f ef       	ldi	r18, 0xFF	; 255
     e66:	80 e7       	ldi	r24, 0x70	; 112
     e68:	92 e0       	ldi	r25, 0x02	; 2
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	80 40       	sbci	r24, 0x00	; 0
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	e1 f7       	brne	.-8      	; 0xe6a <_Z11change_foodv+0x30a>
     e72:	00 c0       	rjmp	.+0      	; 0xe74 <_Z11change_foodv+0x314>
     e74:	00 00       	nop
     e76:	b8 ce       	rjmp	.-656    	; 0xbe8 <_Z11change_foodv+0x88>


		_delay_ms(DELAY_TIME);
	}

}
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	1f 91       	pop	r17
     e7e:	08 95       	ret

00000e80 <_Z8mainmenuv>:



void mainmenu()
{
	lcd_clear();
     e80:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	num_of_food=0;
     e84:	10 92 b1 02 	sts	0x02B1, r1
     e88:	10 92 b0 02 	sts	0x02B0, r1
	int state=0;
	int first_visit=0;
	main_menu_print(first_visit);
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 b4 01 	call	0x368	; 0x368 <_Z15main_menu_printi>
void mainmenu()
{
	lcd_clear();
	num_of_food=0;
	int state=0;
	int first_visit=0;
     e94:	00 e0       	ldi	r16, 0x00	; 0
     e96:	10 e0       	ldi	r17, 0x00	; 0

void mainmenu()
{
	lcd_clear();
	num_of_food=0;
	int state=0;
     e98:	c0 e0       	ldi	r28, 0x00	; 0
     e9a:	d0 e0       	ldi	r29, 0x00	; 0
			else
			//selected_food();
			{
				selected_food();
				main_menu_print(first_visit);
				state=0;
     e9c:	e1 2c       	mov	r14, r1
     e9e:	f1 2c       	mov	r15, r1
	int first_visit=0;
	main_menu_print(first_visit);

	while(1)
	{
		int in=input();
     ea0:	0e 94 a8 01 	call	0x350	; 0x350 <_Z5inputv>
		//  lcd_puts (in);
		if (state==0&& (in==up ||in==down))
     ea4:	20 97       	sbiw	r28, 0x00	; 0
     ea6:	31 f5       	brne	.+76     	; 0xef4 <_Z8mainmenuv+0x74>
     ea8:	20 91 6c 00 	lds	r18, 0x006C
     eac:	30 91 6d 00 	lds	r19, 0x006D
     eb0:	82 17       	cp	r24, r18
     eb2:	93 07       	cpc	r25, r19
     eb4:	41 f0       	breq	.+16     	; 0xec6 <_Z8mainmenuv+0x46>
     eb6:	20 91 6a 00 	lds	r18, 0x006A
     eba:	30 91 6b 00 	lds	r19, 0x006B
     ebe:	82 17       	cp	r24, r18
     ec0:	93 07       	cpc	r25, r19
     ec2:	09 f0       	breq	.+2      	; 0xec6 <_Z8mainmenuv+0x46>
     ec4:	95 c0       	rjmp	.+298    	; 0xff0 <_Z8mainmenuv+0x170>
		{
			lcd_setCursor(0,0);
     ec6:	6e 2d       	mov	r22, r14
     ec8:	7f 2d       	mov	r23, r15
     eca:	8e 2d       	mov	r24, r14
     ecc:	9f 2d       	mov	r25, r15
     ece:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts(" ");
     ed2:	8f eb       	ldi	r24, 0xBF	; 191
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
			lcd_setCursor(0,1);
     eda:	61 e0       	ldi	r22, 0x01	; 1
     edc:	70 e0       	ldi	r23, 0x00	; 0
     ede:	8e 2d       	mov	r24, r14
     ee0:	9f 2d       	mov	r25, r15
     ee2:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts(">");
     ee6:	8a e7       	ldi	r24, 0x7A	; 122
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
			state=1;
     eee:	c1 e0       	ldi	r28, 0x01	; 1
     ef0:	d0 e0       	ldi	r29, 0x00	; 0
     ef2:	42 c0       	rjmp	.+132    	; 0xf78 <_Z8mainmenuv+0xf8>
		}
		else if (state==1 && (in==up ||in==down))
     ef4:	c1 30       	cpi	r28, 0x01	; 1
     ef6:	d1 05       	cpc	r29, r1
     ef8:	09 f0       	breq	.+2      	; 0xefc <_Z8mainmenuv+0x7c>
     efa:	64 c0       	rjmp	.+200    	; 0xfc4 <_Z8mainmenuv+0x144>
     efc:	20 91 6c 00 	lds	r18, 0x006C
     f00:	30 91 6d 00 	lds	r19, 0x006D
     f04:	82 17       	cp	r24, r18
     f06:	93 07       	cpc	r25, r19
     f08:	41 f0       	breq	.+16     	; 0xf1a <_Z8mainmenuv+0x9a>
     f0a:	20 91 6a 00 	lds	r18, 0x006A
     f0e:	30 91 6b 00 	lds	r19, 0x006B
     f12:	82 17       	cp	r24, r18
     f14:	93 07       	cpc	r25, r19
     f16:	09 f0       	breq	.+2      	; 0xf1a <_Z8mainmenuv+0x9a>
     f18:	43 c0       	rjmp	.+134    	; 0xfa0 <_Z8mainmenuv+0x120>
		{
			lcd_setCursor(0,1);
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	70 e0       	ldi	r23, 0x00	; 0
     f1e:	8e 2d       	mov	r24, r14
     f20:	9f 2d       	mov	r25, r15
     f22:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts(" ");
     f26:	8f eb       	ldi	r24, 0xBF	; 191
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
			lcd_setCursor(0,0);
     f2e:	6e 2d       	mov	r22, r14
     f30:	7f 2d       	mov	r23, r15
     f32:	8e 2d       	mov	r24, r14
     f34:	9f 2d       	mov	r25, r15
     f36:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z13lcd_setCursorii>
			lcd_puts(">");
     f3a:	8a e7       	ldi	r24, 0x7A	; 122
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 c9 00 	call	0x192	; 0x192 <_Z8lcd_putsPKc>
			state=0;
     f42:	ce 2d       	mov	r28, r14
     f44:	df 2d       	mov	r29, r15
     f46:	18 c0       	rjmp	.+48     	; 0xf78 <_Z8mainmenuv+0xf8>
			_delay_ms(DELAY_TIME);
			if (state==0)
			{
				int c=0;
				if (first_visit==0)
				c=select_food();
     f48:	0e 94 44 03 	call	0x688	; 0x688 <_Z11select_foodv>
				else
				change_food();
				if (c==1)
     f4c:	31 e0       	ldi	r19, 0x01	; 1
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	11 f0       	breq	.+4      	; 0xf58 <_Z8mainmenuv+0xd8>
     f54:	3e 2d       	mov	r19, r14
     f56:	2f 2d       	mov	r18, r15
				first_visit=1;
     f58:	03 2f       	mov	r16, r19
     f5a:	12 2f       	mov	r17, r18
     f5c:	02 c0       	rjmp	.+4      	; 0xf62 <_Z8mainmenuv+0xe2>
			{
				int c=0;
				if (first_visit==0)
				c=select_food();
				else
				change_food();
     f5e:	0e 94 b0 05 	call	0xb60	; 0xb60 <_Z11change_foodv>
				if (c==1)
				first_visit=1;
				state=0;
				main_menu_print(first_visit);
     f62:	c8 01       	movw	r24, r16
     f64:	0e 94 b4 01 	call	0x368	; 0x368 <_Z15main_menu_printi>
     f68:	07 c0       	rjmp	.+14     	; 0xf78 <_Z8mainmenuv+0xf8>
			}
			else
			//selected_food();
			{
				selected_food();
     f6a:	0e 94 9e 04 	call	0x93c	; 0x93c <_Z13selected_foodv>
				main_menu_print(first_visit);
     f6e:	c8 01       	movw	r24, r16
     f70:	0e 94 b4 01 	call	0x368	; 0x368 <_Z15main_menu_printi>
				state=0;
     f74:	ce 2d       	mov	r28, r14
     f76:	df 2d       	mov	r29, r15
     f78:	8f ef       	ldi	r24, 0xFF	; 255
     f7a:	90 e7       	ldi	r25, 0x70	; 112
     f7c:	22 e0       	ldi	r18, 0x02	; 2
     f7e:	81 50       	subi	r24, 0x01	; 1
     f80:	90 40       	sbci	r25, 0x00	; 0
     f82:	20 40       	sbci	r18, 0x00	; 0
     f84:	e1 f7       	brne	.-8      	; 0xf7e <_Z8mainmenuv+0xfe>
     f86:	00 c0       	rjmp	.+0      	; 0xf88 <_Z8mainmenuv+0x108>
     f88:	00 00       	nop
     f8a:	8a cf       	rjmp	.-236    	; 0xea0 <_Z8mainmenuv+0x20>
     f8c:	8f ef       	ldi	r24, 0xFF	; 255
     f8e:	90 e7       	ldi	r25, 0x70	; 112
     f90:	22 e0       	ldi	r18, 0x02	; 2
     f92:	81 50       	subi	r24, 0x01	; 1
     f94:	90 40       	sbci	r25, 0x00	; 0
     f96:	20 40       	sbci	r18, 0x00	; 0
     f98:	e1 f7       	brne	.-8      	; 0xf92 <_Z8mainmenuv+0x112>
     f9a:	00 c0       	rjmp	.+0      	; 0xf9c <_Z8mainmenuv+0x11c>
     f9c:	00 00       	nop
     f9e:	e5 cf       	rjmp	.-54     	; 0xf6a <_Z8mainmenuv+0xea>
			lcd_puts(" ");
			lcd_setCursor(0,0);
			lcd_puts(">");
			state=0;
		}
		else if (in==ok)
     fa0:	20 91 62 00 	lds	r18, 0x0062
     fa4:	30 91 63 00 	lds	r19, 0x0063
     fa8:	82 17       	cp	r24, r18
     faa:	93 07       	cpc	r25, r19
     fac:	29 f7       	brne	.-54     	; 0xf78 <_Z8mainmenuv+0xf8>
     fae:	ee cf       	rjmp	.-36     	; 0xf8c <_Z8mainmenuv+0x10c>
     fb0:	8f ef       	ldi	r24, 0xFF	; 255
     fb2:	90 e7       	ldi	r25, 0x70	; 112
     fb4:	22 e0       	ldi	r18, 0x02	; 2
     fb6:	81 50       	subi	r24, 0x01	; 1
     fb8:	90 40       	sbci	r25, 0x00	; 0
     fba:	20 40       	sbci	r18, 0x00	; 0
     fbc:	e1 f7       	brne	.-8      	; 0xfb6 <_Z8mainmenuv+0x136>
     fbe:	00 c0       	rjmp	.+0      	; 0xfc0 <_Z8mainmenuv+0x140>
     fc0:	00 00       	nop
     fc2:	d3 cf       	rjmp	.-90     	; 0xf6a <_Z8mainmenuv+0xea>
     fc4:	20 91 62 00 	lds	r18, 0x0062
     fc8:	30 91 63 00 	lds	r19, 0x0063
     fcc:	82 17       	cp	r24, r18
     fce:	93 07       	cpc	r25, r19
     fd0:	99 f6       	brne	.-90     	; 0xf78 <_Z8mainmenuv+0xf8>
     fd2:	ee cf       	rjmp	.-36     	; 0xfb0 <_Z8mainmenuv+0x130>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	90 e7       	ldi	r25, 0x70	; 112
     fd8:	22 e0       	ldi	r18, 0x02	; 2
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	20 40       	sbci	r18, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <_Z8mainmenuv+0x15a>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <_Z8mainmenuv+0x164>
     fe4:	00 00       	nop
		{
			_delay_ms(DELAY_TIME);
			if (state==0)
			{
				int c=0;
				if (first_visit==0)
     fe6:	01 15       	cp	r16, r1
     fe8:	11 05       	cpc	r17, r1
     fea:	09 f4       	brne	.+2      	; 0xfee <_Z8mainmenuv+0x16e>
     fec:	ad cf       	rjmp	.-166    	; 0xf48 <_Z8mainmenuv+0xc8>
     fee:	b7 cf       	rjmp	.-146    	; 0xf5e <_Z8mainmenuv+0xde>
			lcd_puts(" ");
			lcd_setCursor(0,0);
			lcd_puts(">");
			state=0;
		}
		else if (in==ok)
     ff0:	20 91 62 00 	lds	r18, 0x0062
     ff4:	30 91 63 00 	lds	r19, 0x0063
     ff8:	82 17       	cp	r24, r18
     ffa:	93 07       	cpc	r25, r19
     ffc:	09 f0       	breq	.+2      	; 0x1000 <_Z8mainmenuv+0x180>
     ffe:	bc cf       	rjmp	.-136    	; 0xf78 <_Z8mainmenuv+0xf8>
    1000:	e9 cf       	rjmp	.-46     	; 0xfd4 <_Z8mainmenuv+0x154>

00001002 <main>:
int select_food();
void selected_food();
void change_food();

int main() {
	sei();
    1002:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    1004:	87 e6       	ldi	r24, 0x67	; 103
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <_Z10uart0_initj>
	// set up the LCD's number of columns and rows:
	// pinMode(13,OUTPUT);
	
	DDRB&= ~(1<<s_zero);
    100c:	b8 98       	cbi	0x17, 0	; 23
	DDRB&= ~(1<<s_one);
    100e:	b9 98       	cbi	0x17, 1	; 23
   DDRB&= ~(1<<s_two);
    1010:	ba 98       	cbi	0x17, 2	; 23


	lcd_init();
    1012:	0e 94 91 00 	call	0x122	; 0x122 <_Z8lcd_initv>
	mainmenu();
    1016:	0e 94 40 07 	call	0xe80	; 0xe80 <_Z8mainmenuv>

0000101a <__vector_13>:
	register char c;

	while ((c = pgm_read_byte(progmem_s++)))
		uart0_putc(c);

}/* uart_puts_p */
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	8f 93       	push	r24
    1028:	9f 93       	push	r25
    102a:	ef 93       	push	r30
    102c:	ff 93       	push	r31
    102e:	8b b1       	in	r24, 0x0b	; 11
    1030:	2c b1       	in	r18, 0x0c	; 12
    1032:	88 71       	andi	r24, 0x18	; 24
    1034:	e0 91 b4 02 	lds	r30, 0x02B4
    1038:	ef 5f       	subi	r30, 0xFF	; 255
    103a:	ef 71       	andi	r30, 0x1F	; 31
    103c:	90 91 b3 02 	lds	r25, 0x02B3
    1040:	e9 17       	cp	r30, r25
    1042:	39 f0       	breq	.+14     	; 0x1052 <__vector_13+0x38>
    1044:	e0 93 b4 02 	sts	0x02B4, r30
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	e9 54       	subi	r30, 0x49	; 73
    104c:	fd 4f       	sbci	r31, 0xFD	; 253
    104e:	20 83       	st	Z, r18
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <__vector_13+0x3a>
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	80 93 b2 02 	sts	0x02B2, r24
    1058:	ff 91       	pop	r31
    105a:	ef 91       	pop	r30
    105c:	9f 91       	pop	r25
    105e:	8f 91       	pop	r24
    1060:	2f 91       	pop	r18
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_14>:
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	8f 93       	push	r24
    1078:	9f 93       	push	r25
    107a:	ef 93       	push	r30
    107c:	ff 93       	push	r31
    107e:	90 91 b6 02 	lds	r25, 0x02B6
    1082:	80 91 b5 02 	lds	r24, 0x02B5
    1086:	98 17       	cp	r25, r24
    1088:	61 f0       	breq	.+24     	; 0x10a2 <__vector_14+0x36>
    108a:	e0 91 b5 02 	lds	r30, 0x02B5
    108e:	ef 5f       	subi	r30, 0xFF	; 255
    1090:	ef 71       	andi	r30, 0x1F	; 31
    1092:	e0 93 b5 02 	sts	0x02B5, r30
    1096:	f0 e0       	ldi	r31, 0x00	; 0
    1098:	e9 52       	subi	r30, 0x29	; 41
    109a:	fd 4f       	sbci	r31, 0xFD	; 253
    109c:	80 81       	ld	r24, Z
    109e:	8c b9       	out	0x0c, r24	; 12
    10a0:	01 c0       	rjmp	.+2      	; 0x10a4 <__vector_14+0x38>
    10a2:	55 98       	cbi	0x0a, 5	; 10
    10a4:	ff 91       	pop	r31
    10a6:	ef 91       	pop	r30
    10a8:	9f 91       	pop	r25
    10aa:	8f 91       	pop	r24
    10ac:	0f 90       	pop	r0
    10ae:	0f be       	out	0x3f, r0	; 63
    10b0:	0f 90       	pop	r0
    10b2:	1f 90       	pop	r1
    10b4:	18 95       	reti

000010b6 <_Z10uart0_initj>:
    10b6:	10 92 b6 02 	sts	0x02B6, r1
    10ba:	10 92 b5 02 	sts	0x02B5, r1
    10be:	10 92 b4 02 	sts	0x02B4, r1
    10c2:	10 92 b3 02 	sts	0x02B3, r1
    10c6:	99 23       	and	r25, r25
    10c8:	1c f4       	brge	.+6      	; 0x10d0 <_Z10uart0_initj+0x1a>
    10ca:	22 e0       	ldi	r18, 0x02	; 2
    10cc:	2b b9       	out	0x0b, r18	; 11
    10ce:	9f 77       	andi	r25, 0x7F	; 127
    10d0:	90 bd       	out	0x20, r25	; 32
    10d2:	89 b9       	out	0x09, r24	; 9
    10d4:	88 e9       	ldi	r24, 0x98	; 152
    10d6:	8a b9       	out	0x0a, r24	; 10
    10d8:	86 e8       	ldi	r24, 0x86	; 134
    10da:	80 bd       	out	0x20, r24	; 32
    10dc:	08 95       	ret

000010de <_Z10uart0_getcv>:
    10de:	90 91 b4 02 	lds	r25, 0x02B4
    10e2:	80 91 b3 02 	lds	r24, 0x02B3
    10e6:	98 17       	cp	r25, r24
    10e8:	91 f0       	breq	.+36     	; 0x110e <_Z10uart0_getcv+0x30>
    10ea:	e0 91 b3 02 	lds	r30, 0x02B3
    10ee:	ef 5f       	subi	r30, 0xFF	; 255
    10f0:	ef 71       	andi	r30, 0x1F	; 31
    10f2:	e0 93 b3 02 	sts	0x02B3, r30
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	e9 54       	subi	r30, 0x49	; 73
    10fa:	fd 4f       	sbci	r31, 0xFD	; 253
    10fc:	20 81       	ld	r18, Z
    10fe:	80 91 b2 02 	lds	r24, 0x02B2
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	98 2f       	mov	r25, r24
    1106:	88 27       	eor	r24, r24
    1108:	82 0f       	add	r24, r18
    110a:	91 1d       	adc	r25, r1
    110c:	08 95       	ret
    110e:	80 e0       	ldi	r24, 0x00	; 0
    1110:	91 e0       	ldi	r25, 0x01	; 1
    1112:	08 95       	ret

00001114 <_Z10uart0_putch>:
    1114:	20 91 b6 02 	lds	r18, 0x02B6
    1118:	2f 5f       	subi	r18, 0xFF	; 255
    111a:	2f 71       	andi	r18, 0x1F	; 31
    111c:	90 91 b5 02 	lds	r25, 0x02B5
    1120:	29 17       	cp	r18, r25
    1122:	e1 f3       	breq	.-8      	; 0x111c <_Z10uart0_putch+0x8>
    1124:	e2 2f       	mov	r30, r18
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	e9 52       	subi	r30, 0x29	; 41
    112a:	fd 4f       	sbci	r31, 0xFD	; 253
    112c:	80 83       	st	Z, r24
    112e:	20 93 b6 02 	sts	0x02B6, r18
    1132:	55 9a       	sbi	0x0a, 5	; 10
    1134:	08 95       	ret

00001136 <_Z12uart0_putinti>:
    1136:	0f 93       	push	r16
    1138:	1f 93       	push	r17
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	cd b7       	in	r28, 0x3d	; 61
    1140:	de b7       	in	r29, 0x3e	; 62
    1142:	2f 97       	sbiw	r28, 0x0f	; 15
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	4a e0       	ldi	r20, 0x0A	; 10
    1150:	be 01       	movw	r22, r28
    1152:	6f 5f       	subi	r22, 0xFF	; 255
    1154:	7f 4f       	sbci	r23, 0xFF	; 255
    1156:	0e 94 15 09 	call	0x122a	; 0x122a <__itoa_ncheck>
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	88 23       	and	r24, r24
    115e:	51 f0       	breq	.+20     	; 0x1174 <_Z12uart0_putinti+0x3e>
    1160:	8e 01       	movw	r16, r28
    1162:	0e 5f       	subi	r16, 0xFE	; 254
    1164:	1f 4f       	sbci	r17, 0xFF	; 255
    1166:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z10uart0_putch>
    116a:	f8 01       	movw	r30, r16
    116c:	81 91       	ld	r24, Z+
    116e:	8f 01       	movw	r16, r30
    1170:	81 11       	cpse	r24, r1
    1172:	f9 cf       	rjmp	.-14     	; 0x1166 <_Z12uart0_putinti+0x30>
    1174:	2f 96       	adiw	r28, 0x0f	; 15
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	08 95       	ret

0000118a <_Z10uart0_putsPKc>:
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	ec 01       	movw	r28, r24
    1190:	88 81       	ld	r24, Y
    1192:	88 23       	and	r24, r24
    1194:	31 f0       	breq	.+12     	; 0x11a2 <_Z10uart0_putsPKc+0x18>
    1196:	21 96       	adiw	r28, 0x01	; 1
    1198:	0e 94 8a 08 	call	0x1114	; 0x1114 <_Z10uart0_putch>
    119c:	89 91       	ld	r24, Y+
    119e:	81 11       	cpse	r24, r1
    11a0:	fb cf       	rjmp	.-10     	; 0x1198 <_Z10uart0_putsPKc+0xe>
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	08 95       	ret

000011a8 <_Z15uart0_availablev>:
 Input:    None
 Returns:  Integer number of bytes in the receive buffer
 **************************************************************************/
int uart0_available(void)
{
	return (UART_RX_BUFFER_MASK + UART0_RxHead - UART0_RxTail) % UART_RX_BUFFER_MASK;
    11a8:	80 91 b4 02 	lds	r24, 0x02B4
    11ac:	20 91 b3 02 	lds	r18, 0x02B3
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	4f 96       	adiw	r24, 0x1f	; 31
    11b4:	82 1b       	sub	r24, r18
    11b6:	91 09       	sbc	r25, r1
    11b8:	6f e1       	ldi	r22, 0x1F	; 31
    11ba:	70 e0       	ldi	r23, 0x00	; 0
    11bc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__divmodhi4>
}/* uart_available */
    11c0:	08 95       	ret

000011c2 <_Z11uart0_flushv>:
 Input:    None
 Returns:  None
 **************************************************************************/
void uart0_flush(void)
{
	UART0_RxHead = UART0_RxTail;
    11c2:	80 91 b3 02 	lds	r24, 0x02B3
    11c6:	80 93 b4 02 	sts	0x02B4, r24
    11ca:	08 95       	ret

000011cc <__divmodhi4>:
    11cc:	97 fb       	bst	r25, 7
    11ce:	07 2e       	mov	r0, r23
    11d0:	16 f4       	brtc	.+4      	; 0x11d6 <__divmodhi4+0xa>
    11d2:	00 94       	com	r0
    11d4:	07 d0       	rcall	.+14     	; 0x11e4 <__divmodhi4_neg1>
    11d6:	77 fd       	sbrc	r23, 7
    11d8:	09 d0       	rcall	.+18     	; 0x11ec <__divmodhi4_neg2>
    11da:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <__udivmodhi4>
    11de:	07 fc       	sbrc	r0, 7
    11e0:	05 d0       	rcall	.+10     	; 0x11ec <__divmodhi4_neg2>
    11e2:	3e f4       	brtc	.+14     	; 0x11f2 <__divmodhi4_exit>

000011e4 <__divmodhi4_neg1>:
    11e4:	90 95       	com	r25
    11e6:	81 95       	neg	r24
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	08 95       	ret

000011ec <__divmodhi4_neg2>:
    11ec:	70 95       	com	r23
    11ee:	61 95       	neg	r22
    11f0:	7f 4f       	sbci	r23, 0xFF	; 255

000011f2 <__divmodhi4_exit>:
    11f2:	08 95       	ret

000011f4 <__udivmodhi4>:
    11f4:	aa 1b       	sub	r26, r26
    11f6:	bb 1b       	sub	r27, r27
    11f8:	51 e1       	ldi	r21, 0x11	; 17
    11fa:	07 c0       	rjmp	.+14     	; 0x120a <__udivmodhi4_ep>

000011fc <__udivmodhi4_loop>:
    11fc:	aa 1f       	adc	r26, r26
    11fe:	bb 1f       	adc	r27, r27
    1200:	a6 17       	cp	r26, r22
    1202:	b7 07       	cpc	r27, r23
    1204:	10 f0       	brcs	.+4      	; 0x120a <__udivmodhi4_ep>
    1206:	a6 1b       	sub	r26, r22
    1208:	b7 0b       	sbc	r27, r23

0000120a <__udivmodhi4_ep>:
    120a:	88 1f       	adc	r24, r24
    120c:	99 1f       	adc	r25, r25
    120e:	5a 95       	dec	r21
    1210:	a9 f7       	brne	.-22     	; 0x11fc <__udivmodhi4_loop>
    1212:	80 95       	com	r24
    1214:	90 95       	com	r25
    1216:	bc 01       	movw	r22, r24
    1218:	cd 01       	movw	r24, r26
    121a:	08 95       	ret

0000121c <strcpy>:
    121c:	fb 01       	movw	r30, r22
    121e:	dc 01       	movw	r26, r24
    1220:	01 90       	ld	r0, Z+
    1222:	0d 92       	st	X+, r0
    1224:	00 20       	and	r0, r0
    1226:	e1 f7       	brne	.-8      	; 0x1220 <strcpy+0x4>
    1228:	08 95       	ret

0000122a <__itoa_ncheck>:
    122a:	bb 27       	eor	r27, r27
    122c:	4a 30       	cpi	r20, 0x0A	; 10
    122e:	31 f4       	brne	.+12     	; 0x123c <__itoa_ncheck+0x12>
    1230:	99 23       	and	r25, r25
    1232:	22 f4       	brpl	.+8      	; 0x123c <__itoa_ncheck+0x12>
    1234:	bd e2       	ldi	r27, 0x2D	; 45
    1236:	90 95       	com	r25
    1238:	81 95       	neg	r24
    123a:	9f 4f       	sbci	r25, 0xFF	; 255
    123c:	0c 94 21 09 	jmp	0x1242	; 0x1242 <__utoa_common>

00001240 <__utoa_ncheck>:
    1240:	bb 27       	eor	r27, r27

00001242 <__utoa_common>:
    1242:	fb 01       	movw	r30, r22
    1244:	55 27       	eor	r21, r21
    1246:	aa 27       	eor	r26, r26
    1248:	88 0f       	add	r24, r24
    124a:	99 1f       	adc	r25, r25
    124c:	aa 1f       	adc	r26, r26
    124e:	a4 17       	cp	r26, r20
    1250:	10 f0       	brcs	.+4      	; 0x1256 <__utoa_common+0x14>
    1252:	a4 1b       	sub	r26, r20
    1254:	83 95       	inc	r24
    1256:	50 51       	subi	r21, 0x10	; 16
    1258:	b9 f7       	brne	.-18     	; 0x1248 <__utoa_common+0x6>
    125a:	a0 5d       	subi	r26, 0xD0	; 208
    125c:	aa 33       	cpi	r26, 0x3A	; 58
    125e:	08 f0       	brcs	.+2      	; 0x1262 <__utoa_common+0x20>
    1260:	a9 5d       	subi	r26, 0xD9	; 217
    1262:	a1 93       	st	Z+, r26
    1264:	00 97       	sbiw	r24, 0x00	; 0
    1266:	79 f7       	brne	.-34     	; 0x1246 <__utoa_common+0x4>
    1268:	b1 11       	cpse	r27, r1
    126a:	b1 93       	st	Z+, r27
    126c:	11 92       	st	Z+, r1
    126e:	cb 01       	movw	r24, r22
    1270:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <strrev>

00001274 <strrev>:
    1274:	dc 01       	movw	r26, r24
    1276:	fc 01       	movw	r30, r24
    1278:	67 2f       	mov	r22, r23
    127a:	71 91       	ld	r23, Z+
    127c:	77 23       	and	r23, r23
    127e:	e1 f7       	brne	.-8      	; 0x1278 <strrev+0x4>
    1280:	32 97       	sbiw	r30, 0x02	; 2
    1282:	04 c0       	rjmp	.+8      	; 0x128c <strrev+0x18>
    1284:	7c 91       	ld	r23, X
    1286:	6d 93       	st	X+, r22
    1288:	70 83       	st	Z, r23
    128a:	62 91       	ld	r22, -Z
    128c:	ae 17       	cp	r26, r30
    128e:	bf 07       	cpc	r27, r31
    1290:	c8 f3       	brcs	.-14     	; 0x1284 <strrev+0x10>
    1292:	08 95       	ret

00001294 <_exit>:
    1294:	f8 94       	cli

00001296 <__stop_program>:
    1296:	ff cf       	rjmp	.-2      	; 0x1296 <__stop_program>
