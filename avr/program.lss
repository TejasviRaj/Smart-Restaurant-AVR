
program.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000005ae  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000011  00000000  00000000  00000628  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c2e  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000344  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  0000184c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000295  00000000  00000000  00001a28  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b72  00000000  00000000  00001cbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000282f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3a 00 	jmp	0x74	; 0x74 <__ctors_end>
   4:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
   c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  2c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  34:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
  50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	20 31       	cpi	r18, 0x10	; 16
  56:	32 33       	cpi	r19, 0x32	; 50
  58:	34 35       	cpi	r19, 0x54	; 84
  5a:	36 37       	cpi	r19, 0x76	; 118
  5c:	38 39       	cpi	r19, 0x98	; 152
  5e:	41 42       	sbci	r20, 0x21	; 33
  60:	43 44       	sbci	r20, 0x43	; 67
  62:	45 46       	sbci	r20, 0x65	; 101

00000064 <chex>:
  64:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF

00000074 <__ctors_end>:
  74:	11 24       	eor	r1, r1
  76:	1f be       	out	0x3f, r1	; 63
  78:	cf e5       	ldi	r28, 0x5F	; 95
  7a:	d8 e0       	ldi	r29, 0x08	; 8
  7c:	de bf       	out	0x3e, r29	; 62
  7e:	cd bf       	out	0x3d, r28	; 61

00000080 <__do_copy_data>:
  80:	10 e0       	ldi	r17, 0x00	; 0
  82:	a0 e6       	ldi	r26, 0x60	; 96
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	ee ea       	ldi	r30, 0xAE	; 174
  88:	f5 e0       	ldi	r31, 0x05	; 5
  8a:	02 c0       	rjmp	.+4      	; 0x90 <__do_copy_data+0x10>
  8c:	05 90       	lpm	r0, Z+
  8e:	0d 92       	st	X+, r0
  90:	a6 36       	cpi	r26, 0x66	; 102
  92:	b1 07       	cpc	r27, r17
  94:	d9 f7       	brne	.-10     	; 0x8c <__do_copy_data+0xc>
  96:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <main>
  9a:	0c 94 d5 02 	jmp	0x5aa	; 0x5aa <_exit>

0000009e <__bad_interrupt>:
  9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <lcd_write>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	95 ed       	ldi	r25, 0xD5	; 213
  a4:	9a 95       	dec	r25
  a6:	f1 f7       	brne	.-4      	; 0xa4 <lcd_write+0x2>
  a8:	00 00       	nop

static void lcd_write(uint8_t c)
{
	_delay_us(40);
	//MS nibble
	if(c & 0x80)
  aa:	87 ff       	sbrs	r24, 7
  ac:	02 c0       	rjmp	.+4      	; 0xb2 <lcd_write+0x10>
		LCD_D7_PORT |=  (1 << LCD_D7_PIN);
  ae:	dd 9a       	sbi	0x1b, 5	; 27
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <lcd_write+0x12>
	else
		LCD_D7_PORT &= ~(1 << LCD_D7_PIN);
  b2:	dd 98       	cbi	0x1b, 5	; 27

	if(c & 0x40)
  b4:	86 ff       	sbrs	r24, 6
  b6:	02 c0       	rjmp	.+4      	; 0xbc <lcd_write+0x1a>
		LCD_D6_PORT |=  (1 << LCD_D6_PIN);
  b8:	dc 9a       	sbi	0x1b, 4	; 27
  ba:	01 c0       	rjmp	.+2      	; 0xbe <lcd_write+0x1c>
	else
		LCD_D6_PORT &= ~(1 << LCD_D6_PIN);
  bc:	dc 98       	cbi	0x1b, 4	; 27

	if(c & 0x20)
  be:	85 ff       	sbrs	r24, 5
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_write+0x24>
		LCD_D5_PORT |=  (1 << LCD_D5_PIN);
  c2:	db 9a       	sbi	0x1b, 3	; 27
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_write+0x26>
	else
		LCD_D5_PORT &= ~(1 << LCD_D5_PIN);
  c6:	db 98       	cbi	0x1b, 3	; 27

	if(c & 0x10)
  c8:	84 ff       	sbrs	r24, 4
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <lcd_write+0x2e>
		LCD_D4_PORT |=  (1 << LCD_D4_PIN);
  cc:	da 9a       	sbi	0x1b, 2	; 27
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <lcd_write+0x30>
	else
		LCD_D4_PORT &= ~(1 << LCD_D4_PIN);
  d0:	da 98       	cbi	0x1b, 2	; 27

	LCD_STROBE();
  d2:	d9 9a       	sbi	0x1b, 1	; 27
  d4:	d9 98       	cbi	0x1b, 1	; 27

	//LS nibble
	if(c & 0x08)
  d6:	83 ff       	sbrs	r24, 3
  d8:	02 c0       	rjmp	.+4      	; 0xde <lcd_write+0x3c>
		LCD_D7_PORT |=  (1 << LCD_D7_PIN);
  da:	dd 9a       	sbi	0x1b, 5	; 27
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <lcd_write+0x3e>
	else
		LCD_D7_PORT &= ~(1 << LCD_D7_PIN);
  de:	dd 98       	cbi	0x1b, 5	; 27

	if(c & 0x04)
  e0:	82 ff       	sbrs	r24, 2
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <lcd_write+0x46>
		LCD_D6_PORT |=  (1 << LCD_D6_PIN);
  e4:	dc 9a       	sbi	0x1b, 4	; 27
  e6:	01 c0       	rjmp	.+2      	; 0xea <lcd_write+0x48>
	else
		LCD_D6_PORT &= ~(1 << LCD_D6_PIN);
  e8:	dc 98       	cbi	0x1b, 4	; 27

	if(c & 0x02)
  ea:	81 ff       	sbrs	r24, 1
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <lcd_write+0x50>
		LCD_D5_PORT |=  (1 << LCD_D5_PIN);
  ee:	db 9a       	sbi	0x1b, 3	; 27
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <lcd_write+0x52>
	else
		LCD_D5_PORT &= ~(1 << LCD_D5_PIN);
  f2:	db 98       	cbi	0x1b, 3	; 27

	if(c & 0x01)
  f4:	80 ff       	sbrs	r24, 0
  f6:	02 c0       	rjmp	.+4      	; 0xfc <lcd_write+0x5a>
		LCD_D4_PORT |=  (1 << LCD_D4_PIN);
  f8:	da 9a       	sbi	0x1b, 2	; 27
  fa:	01 c0       	rjmp	.+2      	; 0xfe <lcd_write+0x5c>
	else
		LCD_D4_PORT &= ~(1 << LCD_D4_PIN);
  fc:	da 98       	cbi	0x1b, 2	; 27

	LCD_STROBE();
  fe:	d9 9a       	sbi	0x1b, 1	; 27
 100:	d9 98       	cbi	0x1b, 1	; 27
 102:	08 95       	ret

00000104 <lcd_cmd>:


//Write command to LCD
void lcd_cmd(uint8_t cmd)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
 104:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write(cmd);
 106:	0c 94 51 00 	jmp	0xa2	; 0xa2 <lcd_write>

0000010a <lcd_dat>:
}

//Write character data to LCD
void lcd_dat(uint8_t dat)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);
 10a:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write(dat);
 10c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <lcd_write>

00000110 <lcd_clear>:
 * 	Clear and home the LCD
 */

void lcd_clear(void)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
 110:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write(1<<LCD_CLR);
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 118:	8f e3       	ldi	r24, 0x3F	; 63
 11a:	9f e1       	ldi	r25, 0x1F	; 31
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_clear+0xc>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_clear+0x12>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <lcd_puts>:
}

/* write a string of chars to the LCD */

void lcd_puts(const char * s)
{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
 12a:	d8 9a       	sbi	0x1b, 0	; 27
 12c:	ec 01       	movw	r28, r24
	while(*s)
 12e:	89 91       	ld	r24, Y+
 130:	88 23       	and	r24, r24
 132:	19 f0       	breq	.+6      	; 0x13a <lcd_puts+0x14>
		lcd_write(*s++);
 134:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 138:	fa cf       	rjmp	.-12     	; 0x12e <lcd_puts+0x8>
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <lcd_puts_p>:
#define lcd_puts_P(__s)         lcd_puts_p(PSTR(__s))

/* print string from program memory on lcd (no auto linefeed) */

void lcd_puts_p(const char *progmem_s)
{
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
    register char c;

	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
 144:	d8 9a       	sbi	0x1b, 0	; 27
    while ( (c = pgm_read_byte(progmem_s++)) )
 146:	fc 01       	movw	r30, r24
 148:	84 91       	lpm	r24, Z
 14a:	ef 01       	movw	r28, r30
 14c:	21 96       	adiw	r28, 0x01	; 1
 14e:	88 23       	and	r24, r24
 150:	21 f0       	breq	.+8      	; 0x15a <lcd_puts_p+0x1a>
        lcd_write(c);
 152:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
 156:	fe 01       	movw	r30, r28
 158:	f7 cf       	rjmp	.-18     	; 0x148 <lcd_puts_p+0x8>
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <lcd_putch>:
/* write one character to the LCD */

void lcd_putch(char c)
{
	LCD_RS_PORT |= (1 << LCD_RS_PIN);	// write characters
 160:	d8 9a       	sbi	0x1b, 0	; 27
	lcd_write( c );
 162:	0c 94 51 00 	jmp	0xa2	; 0xa2 <lcd_write>

00000166 <lcd_goto>:
 * Go to the specified position
 */

void lcd_goto(unsigned char pos)
{
	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
 166:	d8 98       	cbi	0x1b, 0	; 27
	lcd_write(0x80|pos);
 168:	80 68       	ori	r24, 0x80	; 128
 16a:	0c 94 51 00 	jmp	0xa2	; 0xa2 <lcd_write>

0000016e <lcd_init>:



void lcd_init()
{
	DDR(LCD_RS_PORT) |= (1 << LCD_RS_PIN);
 16e:	d0 9a       	sbi	0x1a, 0	; 26
	DDR(LCD_EN_PORT) |= (1 << LCD_EN_PIN);
 170:	d1 9a       	sbi	0x1a, 1	; 26

	DDR(LCD_D7_PORT) |= (1 << LCD_D7_PIN);
 172:	d5 9a       	sbi	0x1a, 5	; 26
	DDR(LCD_D6_PORT) |= (1 << LCD_D6_PIN);
 174:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(LCD_D5_PORT) |= (1 << LCD_D5_PIN);
 176:	d3 9a       	sbi	0x1a, 3	; 26
	DDR(LCD_D4_PORT) |= (1 << LCD_D4_PIN);
 178:	d2 9a       	sbi	0x1a, 2	; 26

	LCD_RS_PORT &= ~(1 << LCD_RS_PIN);
 17a:	d8 98       	cbi	0x1b, 0	; 27
	LCD_EN_PORT &= ~(1 << LCD_EN_PIN);
 17c:	d9 98       	cbi	0x1b, 1	; 27
 17e:	8f e5       	ldi	r24, 0x5F	; 95
 180:	9a ee       	ldi	r25, 0xEA	; 234
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <lcd_init+0x14>
 186:	00 c0       	rjmp	.+0      	; 0x188 <lcd_init+0x1a>
 188:	00 00       	nop

	_delay_ms(15);	// wait 15mSec after power applied,

	LCD_D4_PORT |= (1 << LCD_D4_PIN);//0x3 & 0x01;				//bit0 000X
 18a:	da 9a       	sbi	0x1b, 2	; 27
	LCD_D5_PORT |= (1 << LCD_D5_PIN);//(0x3>>1) & 0x01;		//bit1 00XY -> 000X
 18c:	db 9a       	sbi	0x1b, 3	; 27
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);//(0x3>>2) & 0x01;		//bit2 0XYZ -> 000X
 18e:	dc 98       	cbi	0x1b, 4	; 27
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);//(0x3>>3) & 0x01;		//bit3 XYZW -> 000X
 190:	dd 98       	cbi	0x1b, 5	; 27

	LCD_STROBE();
 192:	d9 9a       	sbi	0x1b, 1	; 27
 194:	d9 98       	cbi	0x1b, 1	; 27
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_init+0x2c>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_init+0x32>
 1a0:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
 1a2:	d9 9a       	sbi	0x1b, 1	; 27
 1a4:	d9 98       	cbi	0x1b, 1	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	93 e0       	ldi	r25, 0x03	; 3
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <lcd_init+0x3c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <lcd_init+0x42>
 1b0:	00 00       	nop
	_delay_us(200);
	LCD_STROBE();
 1b2:	d9 9a       	sbi	0x1b, 1	; 27
 1b4:	d9 98       	cbi	0x1b, 1	; 27
 1b6:	8f e1       	ldi	r24, 0x1F	; 31
 1b8:	93 e0       	ldi	r25, 0x03	; 3
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <lcd_init+0x4c>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <lcd_init+0x52>
 1c0:	00 00       	nop
	_delay_us(200);

	// Four bit mode
	LCD_D4_PORT &= ~(1 << LCD_D4_PIN);	//2 & 0x01
 1c2:	da 98       	cbi	0x1b, 2	; 27
	LCD_D5_PORT |=  (1 << LCD_D5_PIN);	//(2>>1) & 0x01
 1c4:	db 9a       	sbi	0x1b, 3	; 27
	LCD_D6_PORT &= ~(1 << LCD_D6_PIN);	//(2>>2) & 0x01
 1c6:	dc 98       	cbi	0x1b, 4	; 27
	LCD_D7_PORT &= ~(1 << LCD_D7_PIN);	//(2>>3) & 0x01
 1c8:	dd 98       	cbi	0x1b, 5	; 27

	LCD_STROBE();
 1ca:	d9 9a       	sbi	0x1b, 1	; 27
 1cc:	d9 98       	cbi	0x1b, 1	; 27

	lcd_write(0x28);		// Set interface length: nibblemode, 2line, 5x7dot
 1ce:	88 e2       	ldi	r24, 0x28	; 40
 1d0:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
	lcd_write(0b00001100);	// Display On, Cursor Off, Cursor Blink off
 1d4:	8c e0       	ldi	r24, 0x0C	; 12
 1d6:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
	lcd_clear();			// Clear screen
 1da:	0e 94 88 00 	call	0x110	; 0x110 <lcd_clear>
	lcd_write(0x6);			// Set entry Mode : increment, displayShiftOff
 1de:	86 e0       	ldi	r24, 0x06	; 6
 1e0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <lcd_write>

000001e4 <lcd_unum_hex>:
const char PROGMEM chex_wBlanking[] = {	' ', '1', '2', '3', '4', '5', '6', '7',
									'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'  };

//without blanking of leading zeros
void lcd_unum_hex(uint16_t num)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	ec 01       	movw	r28, r24
	lcd_putch(pgm_read_byte(&chex[(num>>12)&0x0F]));
 1ea:	fc 01       	movw	r30, r24
 1ec:	ef 2f       	mov	r30, r31
 1ee:	ff 27       	eor	r31, r31
 1f0:	e2 95       	swap	r30
 1f2:	ef 70       	andi	r30, 0x0F	; 15
 1f4:	ec 59       	subi	r30, 0x9C	; 156
 1f6:	ff 4f       	sbci	r31, 0xFF	; 255
 1f8:	84 91       	lpm	r24, Z
 1fa:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex[(num>>8)&0x0F]));
 1fe:	ed 2f       	mov	r30, r29
 200:	ff 27       	eor	r31, r31
 202:	ef 70       	andi	r30, 0x0F	; 15
 204:	ff 27       	eor	r31, r31
 206:	ec 59       	subi	r30, 0x9C	; 156
 208:	ff 4f       	sbci	r31, 0xFF	; 255
 20a:	84 91       	lpm	r24, Z
 20c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex[(num>>4)&0x0F]));
 210:	fe 01       	movw	r30, r28
 212:	24 e0       	ldi	r18, 0x04	; 4
 214:	f6 95       	lsr	r31
 216:	e7 95       	ror	r30
 218:	2a 95       	dec	r18
 21a:	e1 f7       	brne	.-8      	; 0x214 <lcd_unum_hex+0x30>
 21c:	ef 70       	andi	r30, 0x0F	; 15
 21e:	ff 27       	eor	r31, r31
 220:	ec 59       	subi	r30, 0x9C	; 156
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	84 91       	lpm	r24, Z
 226:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex[num&0x0F]));
 22a:	fe 01       	movw	r30, r28
 22c:	ef 70       	andi	r30, 0x0F	; 15
 22e:	ff 27       	eor	r31, r31
 230:	ec 59       	subi	r30, 0x9C	; 156
 232:	ff 4f       	sbci	r31, 0xFF	; 255
 234:	84 91       	lpm	r24, Z
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
void lcd_unum_hex(uint16_t num)
{
	lcd_putch(pgm_read_byte(&chex[(num>>12)&0x0F]));
	lcd_putch(pgm_read_byte(&chex[(num>>8)&0x0F]));
	lcd_putch(pgm_read_byte(&chex[(num>>4)&0x0F]));
	lcd_putch(pgm_read_byte(&chex[num&0x0F]));
 23a:	0c 94 b0 00 	jmp	0x160	; 0x160 <lcd_putch>

0000023e <lcd_unum_hex_wBlanking>:
}

void lcd_unum_hex_wBlanking(uint16_t num)
{
 23e:	cf 93       	push	r28
 240:	df 93       	push	r29
 242:	ec 01       	movw	r28, r24
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>12)&0x0F]));
 244:	fc 01       	movw	r30, r24
 246:	ef 2f       	mov	r30, r31
 248:	ff 27       	eor	r31, r31
 24a:	e2 95       	swap	r30
 24c:	ef 70       	andi	r30, 0x0F	; 15
 24e:	ec 5a       	subi	r30, 0xAC	; 172
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	84 91       	lpm	r24, Z
 254:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>8)&0x0F]));
 258:	ed 2f       	mov	r30, r29
 25a:	ff 27       	eor	r31, r31
 25c:	ef 70       	andi	r30, 0x0F	; 15
 25e:	ff 27       	eor	r31, r31
 260:	ec 5a       	subi	r30, 0xAC	; 172
 262:	ff 4f       	sbci	r31, 0xFF	; 255
 264:	84 91       	lpm	r24, Z
 266:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>4)&0x0F]));
 26a:	fe 01       	movw	r30, r28
 26c:	24 e0       	ldi	r18, 0x04	; 4
 26e:	f6 95       	lsr	r31
 270:	e7 95       	ror	r30
 272:	2a 95       	dec	r18
 274:	e1 f7       	brne	.-8      	; 0x26e <lcd_unum_hex_wBlanking+0x30>
 276:	ef 70       	andi	r30, 0x0F	; 15
 278:	ff 27       	eor	r31, r31
 27a:	ec 5a       	subi	r30, 0xAC	; 172
 27c:	ff 4f       	sbci	r31, 0xFF	; 255
 27e:	84 91       	lpm	r24, Z
 280:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(pgm_read_byte(&chex[num&0x0F]));
 284:	fe 01       	movw	r30, r28
 286:	ef 70       	andi	r30, 0x0F	; 15
 288:	ff 27       	eor	r31, r31
 28a:	ec 59       	subi	r30, 0x9C	; 156
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	84 91       	lpm	r24, Z
}
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
void lcd_unum_hex_wBlanking(uint16_t num)
{
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>12)&0x0F]));
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>8)&0x0F]));
	lcd_putch(pgm_read_byte(&chex_wBlanking[(num>>4)&0x0F]));
	lcd_putch(pgm_read_byte(&chex[num&0x0F]));
 294:	0c 94 b0 00 	jmp	0x160	; 0x160 <lcd_putch>

00000298 <lcd_unum3>:
}

void lcd_unum3(uint8_t num)
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
 2a0:	1f 92       	push	r1
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	18 2f       	mov	r17, r24
	lcd_putch(num/100 + '0');
 2a8:	64 e6       	ldi	r22, 0x64	; 100
 2aa:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodqi4>
 2ae:	80 5d       	subi	r24, 0xD0	; 208
 2b0:	99 83       	std	Y+1, r25	; 0x01
 2b2:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch((num%100)/10 + '0');
 2b6:	0a e0       	ldi	r16, 0x0A	; 10
 2b8:	99 81       	ldd	r25, Y+1	; 0x01
 2ba:	89 2f       	mov	r24, r25
 2bc:	60 2f       	mov	r22, r16
 2be:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodqi4>
 2c2:	80 5d       	subi	r24, 0xD0	; 208
 2c4:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
	lcd_putch(num%10 + '0');
 2c8:	81 2f       	mov	r24, r17
 2ca:	60 2f       	mov	r22, r16
 2cc:	0e 94 94 02 	call	0x528	; 0x528 <__udivmodqi4>
 2d0:	80 e3       	ldi	r24, 0x30	; 48
 2d2:	89 0f       	add	r24, r25
}
 2d4:	0f 90       	pop	r0
 2d6:	df 91       	pop	r29
 2d8:	cf 91       	pop	r28
 2da:	1f 91       	pop	r17
 2dc:	0f 91       	pop	r16

void lcd_unum3(uint8_t num)
{
	lcd_putch(num/100 + '0');
	lcd_putch((num%100)/10 + '0');
	lcd_putch(num%10 + '0');
 2de:	0c 94 b0 00 	jmp	0x160	; 0x160 <lcd_putch>

000002e2 <lcd_unum>:
}

void lcd_unum(uint16_t num)
{
 2e2:	1f 93       	push	r17
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	2f e0       	ldi	r18, 0x0F	; 15
 2ea:	30 e0       	ldi	r19, 0x00	; 0
    uint16_t bcd = 0;
    uint8_t bcd4 = 0;
 2ec:	10 e0       	ldi	r17, 0x00	; 0
	lcd_putch(num%10 + '0');
}

void lcd_unum(uint16_t num)
{
    uint16_t bcd = 0;
 2ee:	c0 e0       	ldi	r28, 0x00	; 0
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
            bcd+=0x3000;

        bcd4 <<= 1;
        bcd4 += ((bcd&0x8000)?1:0);
        bcd <<= 1;
        bcd += ((num&(1<<(i-1)))?1:0);
 2f2:	e1 e0       	ldi	r30, 0x01	; 1
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
{
    uint16_t bcd = 0;
    uint8_t bcd4 = 0;
    for(uint8_t i=16; i!=0; --i)
    {
	    if((bcd&0x000F) >= 0x5)
 2f6:	ae 01       	movw	r20, r28
 2f8:	4f 70       	andi	r20, 0x0F	; 15
 2fa:	55 27       	eor	r21, r21
 2fc:	45 30       	cpi	r20, 0x05	; 5
 2fe:	51 05       	cpc	r21, r1
 300:	08 f0       	brcs	.+2      	; 0x304 <lcd_unum+0x22>
            bcd+=0x3;
 302:	23 96       	adiw	r28, 0x03	; 3
        if((bcd&0x00F0) >= 0x50)
 304:	ae 01       	movw	r20, r28
 306:	40 7f       	andi	r20, 0xF0	; 240
 308:	55 27       	eor	r21, r21
 30a:	40 35       	cpi	r20, 0x50	; 80
 30c:	51 05       	cpc	r21, r1
 30e:	08 f0       	brcs	.+2      	; 0x312 <lcd_unum+0x30>
            bcd+=0x30;
 310:	e0 96       	adiw	r28, 0x30	; 48
        if((bcd&0x0F00) >= 0x500)
 312:	ae 01       	movw	r20, r28
 314:	44 27       	eor	r20, r20
 316:	5f 70       	andi	r21, 0x0F	; 15
 318:	41 15       	cp	r20, r1
 31a:	55 40       	sbci	r21, 0x05	; 5
 31c:	08 f0       	brcs	.+2      	; 0x320 <lcd_unum+0x3e>
            bcd+=0x300;
 31e:	dd 5f       	subi	r29, 0xFD	; 253
        if((bcd&0xF000) >= 0x5000)
 320:	ae 01       	movw	r20, r28
 322:	44 27       	eor	r20, r20
 324:	50 7f       	andi	r21, 0xF0	; 240
 326:	41 15       	cp	r20, r1
 328:	50 45       	sbci	r21, 0x50	; 80
 32a:	08 f0       	brcs	.+2      	; 0x32e <lcd_unum+0x4c>
            bcd+=0x3000;
 32c:	d0 5d       	subi	r29, 0xD0	; 208

        bcd4 <<= 1;
 32e:	11 0f       	add	r17, r17
        bcd4 += ((bcd&0x8000)?1:0);
 330:	4d 2f       	mov	r20, r29
 332:	44 1f       	adc	r20, r20
 334:	44 27       	eor	r20, r20
 336:	44 1f       	adc	r20, r20
 338:	14 0f       	add	r17, r20
        bcd <<= 1;
 33a:	cc 0f       	add	r28, r28
 33c:	dd 1f       	adc	r29, r29
        bcd += ((num&(1<<(i-1)))?1:0);
 33e:	af 01       	movw	r20, r30
 340:	02 2e       	mov	r0, r18
 342:	02 c0       	rjmp	.+4      	; 0x348 <lcd_unum+0x66>
 344:	44 0f       	add	r20, r20
 346:	55 1f       	adc	r21, r21
 348:	0a 94       	dec	r0
 34a:	e2 f7       	brpl	.-8      	; 0x344 <lcd_unum+0x62>
 34c:	48 23       	and	r20, r24
 34e:	59 23       	and	r21, r25
 350:	61 e0       	ldi	r22, 0x01	; 1
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	45 2b       	or	r20, r21
 356:	11 f4       	brne	.+4      	; 0x35c <lcd_unum+0x7a>
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	c6 0f       	add	r28, r22
 35e:	d7 1f       	adc	r29, r23
 360:	21 50       	subi	r18, 0x01	; 1
 362:	31 09       	sbc	r19, r1
 364:	40 f6       	brcc	.-112    	; 0x2f6 <lcd_unum+0x14>
    }

    lcd_putch((bcd4)?(chex[bcd4]):' ');
 366:	11 23       	and	r17, r17
 368:	31 f0       	breq	.+12     	; 0x376 <lcd_unum+0x94>
 36a:	e1 2f       	mov	r30, r17
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	ec 59       	subi	r30, 0x9C	; 156
 370:	ff 4f       	sbci	r31, 0xFF	; 255
 372:	80 81       	ld	r24, Z
 374:	01 c0       	rjmp	.+2      	; 0x378 <lcd_unum+0x96>
 376:	80 e2       	ldi	r24, 0x20	; 32
 378:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
 37c:	11 11       	cpse	r17, r1
 37e:	04 c0       	rjmp	.+8      	; 0x388 <lcd_unum+0xa6>
 380:	c1 15       	cp	r28, r1
 382:	60 e1       	ldi	r22, 0x10	; 16
 384:	d6 07       	cpc	r29, r22
 386:	48 f0       	brcs	.+18     	; 0x39a <lcd_unum+0xb8>
 388:	fe 01       	movw	r30, r28
 38a:	ef 2f       	mov	r30, r31
 38c:	ff 27       	eor	r31, r31
 38e:	e2 95       	swap	r30
 390:	ef 70       	andi	r30, 0x0F	; 15
 392:	ec 59       	subi	r30, 0x9C	; 156
 394:	ff 4f       	sbci	r31, 0xFF	; 255
 396:	84 91       	lpm	r24, Z
 398:	01 c0       	rjmp	.+2      	; 0x39c <lcd_unum+0xba>
 39a:	80 e2       	ldi	r24, 0x20	; 32
 39c:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
 3a0:	11 11       	cpse	r17, r1
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <lcd_unum+0xca>
 3a4:	cf 3f       	cpi	r28, 0xFF	; 255
 3a6:	d1 05       	cpc	r29, r1
 3a8:	49 f0       	breq	.+18     	; 0x3bc <lcd_unum+0xda>
 3aa:	40 f0       	brcs	.+16     	; 0x3bc <lcd_unum+0xda>
 3ac:	ed 2f       	mov	r30, r29
 3ae:	ff 27       	eor	r31, r31
 3b0:	ef 70       	andi	r30, 0x0F	; 15
 3b2:	ff 27       	eor	r31, r31
 3b4:	ec 59       	subi	r30, 0x9C	; 156
 3b6:	ff 4f       	sbci	r31, 0xFF	; 255
 3b8:	84 91       	lpm	r24, Z
 3ba:	01 c0       	rjmp	.+2      	; 0x3be <lcd_unum+0xdc>
 3bc:	80 e2       	ldi	r24, 0x20	; 32
 3be:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
 3c2:	11 11       	cpse	r17, r1
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <lcd_unum+0xea>
 3c6:	c0 31       	cpi	r28, 0x10	; 16
 3c8:	d1 05       	cpc	r29, r1
 3ca:	60 f0       	brcs	.+24     	; 0x3e4 <lcd_unum+0x102>
 3cc:	fe 01       	movw	r30, r28
 3ce:	84 e0       	ldi	r24, 0x04	; 4
 3d0:	f6 95       	lsr	r31
 3d2:	e7 95       	ror	r30
 3d4:	8a 95       	dec	r24
 3d6:	e1 f7       	brne	.-8      	; 0x3d0 <lcd_unum+0xee>
 3d8:	ef 70       	andi	r30, 0x0F	; 15
 3da:	ff 27       	eor	r31, r31
 3dc:	ec 59       	subi	r30, 0x9C	; 156
 3de:	ff 4f       	sbci	r31, 0xFF	; 255
 3e0:	84 91       	lpm	r24, Z
 3e2:	01 c0       	rjmp	.+2      	; 0x3e6 <lcd_unum+0x104>
 3e4:	80 e2       	ldi	r24, 0x20	; 32
 3e6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));
 3ea:	fe 01       	movw	r30, r28
 3ec:	ef 70       	andi	r30, 0x0F	; 15
 3ee:	ff 27       	eor	r31, r31
 3f0:	ec 59       	subi	r30, 0x9C	; 156
 3f2:	ff 4f       	sbci	r31, 0xFF	; 255
 3f4:	84 91       	lpm	r24, Z
}
 3f6:	df 91       	pop	r29
 3f8:	cf 91       	pop	r28
 3fa:	1f 91       	pop	r17

    lcd_putch((bcd4)?(chex[bcd4]):' ');
    lcd_putch((!bcd4 && bcd<0x1000)	?' ':(pgm_read_byte(&chex[bcd>>12])));
    lcd_putch((!bcd4 && bcd<0x100)	?' ':(pgm_read_byte(&chex[(bcd>>8)&0x000F])));
    lcd_putch((!bcd4 && bcd<0x10)	?' ':(pgm_read_byte(&chex[(bcd>>4)&0x000F])));
    lcd_putch(pgm_read_byte(&chex[bcd&0x000F]));
 3fc:	0c 94 b0 00 	jmp	0x160	; 0x160 <lcd_putch>

00000400 <lcd_num>:
}

void lcd_num( int num )
{
 400:	cf 93       	push	r28
 402:	df 93       	push	r29
 404:	00 d0       	rcall	.+0      	; 0x406 <lcd_num+0x6>
 406:	00 d0       	rcall	.+0      	; 0x408 <lcd_num+0x8>
 408:	00 d0       	rcall	.+0      	; 0x40a <lcd_num+0xa>
 40a:	cd b7       	in	r28, 0x3d	; 61
 40c:	de b7       	in	r29, 0x3e	; 62
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 40e:	4a e0       	ldi	r20, 0x0A	; 10
 410:	be 01       	movw	r22, r28
 412:	6f 5f       	subi	r22, 0xFF	; 255
 414:	7f 4f       	sbci	r23, 0xFF	; 255
 416:	0e 94 a0 02 	call	0x540	; 0x540 <__itoa_ncheck>
	char str[6];
	itoa( num, str, 10 );
	lcd_puts( str );
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 93 00 	call	0x126	; 0x126 <lcd_puts>
}
 422:	26 96       	adiw	r28, 0x06	; 6
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
 42e:	df 91       	pop	r29
 430:	cf 91       	pop	r28
 432:	08 95       	ret

00000434 <lcd_gotoxy>:

void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
 434:	90 e4       	ldi	r25, 0x40	; 64
 436:	69 9f       	mul	r22, r25
 438:	80 0d       	add	r24, r0
 43a:	11 24       	eor	r1, r1
 43c:	0c 94 b3 00 	jmp	0x166	; 0x166 <lcd_goto>

00000440 <Printf>:
}

void Printf( char *fmt,... )
{
 440:	cf 92       	push	r12
 442:	df 92       	push	r13
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
 450:	cd b7       	in	r28, 0x3d	; 61
 452:	de b7       	in	r29, 0x3e	; 62
 454:	fe 01       	movw	r30, r28
 456:	3b 96       	adiw	r30, 0x0b	; 11
 458:	e1 90       	ld	r14, Z+
 45a:	f1 90       	ld	r15, Z+
	va_list aptr;
	char *p, *sval, str[17],ch;
	int ival;
	va_start( aptr, fmt );
 45c:	8f 01       	movw	r16, r30

	for( p=fmt; *p ; ++p )
 45e:	f7 01       	movw	r30, r14
 460:	80 81       	ld	r24, Z
 462:	88 23       	and	r24, r24
 464:	81 f1       	breq	.+96     	; 0x4c6 <Printf+0x86>
	if( *p=='%' )
 466:	85 32       	cpi	r24, 0x25	; 37
 468:	31 f5       	brne	.+76     	; 0x4b6 <Printf+0x76>
	switch( * ++p )
 46a:	67 01       	movw	r12, r14
 46c:	8f ef       	ldi	r24, 0xFF	; 255
 46e:	c8 1a       	sub	r12, r24
 470:	d8 0a       	sbc	r13, r24
 472:	f7 01       	movw	r30, r14
 474:	81 81       	ldd	r24, Z+1	; 0x01
 476:	84 36       	cpi	r24, 0x64	; 100
 478:	41 f0       	breq	.+16     	; 0x48a <Printf+0x4a>
 47a:	83 37       	cpi	r24, 0x73	; 115
 47c:	c9 f4       	brne	.+50     	; 0x4b0 <Printf+0x70>
		ival = va_arg( aptr, int );
		lcd_num( ival );
		break;

		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
 47e:	f8 01       	movw	r30, r16
 480:	e0 80       	ld	r14, Z
 482:	f1 80       	ldd	r15, Z+1	; 0x01
 484:	0e 5f       	subi	r16, 0xFE	; 254
 486:	1f 4f       	sbci	r17, 0xFF	; 255
 488:	0b c0       	rjmp	.+22     	; 0x4a0 <Printf+0x60>
	for( p=fmt; *p ; ++p )
	if( *p=='%' )
	switch( * ++p )
	{
		case 'd':
		ival = va_arg( aptr, int );
 48a:	78 01       	movw	r14, r16
 48c:	f2 e0       	ldi	r31, 0x02	; 2
 48e:	ef 0e       	add	r14, r31
 490:	f1 1c       	adc	r15, r1
		lcd_num( ival );
 492:	f8 01       	movw	r30, r16
 494:	80 81       	ld	r24, Z
 496:	91 81       	ldd	r25, Z+1	; 0x01
 498:	0e 94 00 02 	call	0x400	; 0x400 <lcd_num>
	for( p=fmt; *p ; ++p )
	if( *p=='%' )
	switch( * ++p )
	{
		case 'd':
		ival = va_arg( aptr, int );
 49c:	87 01       	movw	r16, r14
		lcd_num( ival );
		break;
 49e:	0e c0       	rjmp	.+28     	; 0x4bc <Printf+0x7c>

		case 's':
		for( sval=va_arg(aptr, char*); *sval; ++sval )
 4a0:	f7 01       	movw	r30, r14
 4a2:	81 91       	ld	r24, Z+
 4a4:	7f 01       	movw	r14, r30
 4a6:	88 23       	and	r24, r24
 4a8:	49 f0       	breq	.+18     	; 0x4bc <Printf+0x7c>
		lcd_putch( *sval );
 4aa:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
 4ae:	f8 cf       	rjmp	.-16     	; 0x4a0 <Printf+0x60>
		break;


		default:
		lcd_putch(*p);
 4b0:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
 4b4:	03 c0       	rjmp	.+6      	; 0x4bc <Printf+0x7c>


	}
	else
	lcd_putch( *p );
 4b6:	0e 94 b0 00 	call	0x160	; 0x160 <lcd_putch>
 4ba:	67 01       	movw	r12, r14
	va_list aptr;
	char *p, *sval, str[17],ch;
	int ival;
	va_start( aptr, fmt );

	for( p=fmt; *p ; ++p )
 4bc:	76 01       	movw	r14, r12
 4be:	ff ef       	ldi	r31, 0xFF	; 255
 4c0:	ef 1a       	sub	r14, r31
 4c2:	ff 0a       	sbc	r15, r31
 4c4:	cc cf       	rjmp	.-104    	; 0x45e <Printf+0x1e>


	}
	else
	lcd_putch( *p );
}
 4c6:	df 91       	pop	r29
 4c8:	cf 91       	pop	r28
 4ca:	1f 91       	pop	r17
 4cc:	0f 91       	pop	r16
 4ce:	ff 90       	pop	r15
 4d0:	ef 90       	pop	r14
 4d2:	df 90       	pop	r13
 4d4:	cf 90       	pop	r12
 4d6:	08 95       	ret

000004d8 <main>:
#include<lcd.h>
#include<uart.h>

int main()
{
  lcd_init();
 4d8:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_init>

//  while(1)
  lcd_num(6);
 4dc:	86 e0       	ldi	r24, 0x06	; 6
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 00 02 	call	0x400	; 0x400 <lcd_num>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4e4:	2f ef       	ldi	r18, 0xFF	; 255
 4e6:	83 ec       	ldi	r24, 0xC3	; 195
 4e8:	99 e0       	ldi	r25, 0x09	; 9
 4ea:	21 50       	subi	r18, 0x01	; 1
 4ec:	80 40       	sbci	r24, 0x00	; 0
 4ee:	90 40       	sbci	r25, 0x00	; 0
 4f0:	e1 f7       	brne	.-8      	; 0x4ea <main+0x12>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <main+0x1c>
 4f4:	00 00       	nop
	lcd_puts( str );
}

void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
 4f6:	80 e4       	ldi	r24, 0x40	; 64
 4f8:	0e 94 b3 00 	call	0x166	; 0x166 <lcd_goto>
  _delay_ms(200);

//  lcd_num(5);
//  _delay_ms(200);
lcd_gotoxy(0,5);
Printf("Hello");
 4fc:	80 e6       	ldi	r24, 0x60	; 96
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	9f 93       	push	r25
 502:	8f 93       	push	r24
 504:	0e 94 20 02 	call	0x440	; 0x440 <Printf>
 508:	2f ef       	ldi	r18, 0xFF	; 255
 50a:	83 ec       	ldi	r24, 0xC3	; 195
 50c:	99 e0       	ldi	r25, 0x09	; 9
 50e:	21 50       	subi	r18, 0x01	; 1
 510:	80 40       	sbci	r24, 0x00	; 0
 512:	90 40       	sbci	r25, 0x00	; 0
 514:	e1 f7       	brne	.-8      	; 0x50e <main+0x36>
 516:	00 c0       	rjmp	.+0      	; 0x518 <main+0x40>
 518:	00 00       	nop
_delay_ms(200);
lcd_clear();
 51a:	0e 94 88 00 	call	0x110	; 0x110 <lcd_clear>
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0


}
 522:	80 e0       	ldi	r24, 0x00	; 0
 524:	90 e0       	ldi	r25, 0x00	; 0
 526:	08 95       	ret

00000528 <__udivmodqi4>:
 528:	99 1b       	sub	r25, r25
 52a:	79 e0       	ldi	r23, 0x09	; 9
 52c:	04 c0       	rjmp	.+8      	; 0x536 <__udivmodqi4_ep>

0000052e <__udivmodqi4_loop>:
 52e:	99 1f       	adc	r25, r25
 530:	96 17       	cp	r25, r22
 532:	08 f0       	brcs	.+2      	; 0x536 <__udivmodqi4_ep>
 534:	96 1b       	sub	r25, r22

00000536 <__udivmodqi4_ep>:
 536:	88 1f       	adc	r24, r24
 538:	7a 95       	dec	r23
 53a:	c9 f7       	brne	.-14     	; 0x52e <__udivmodqi4_loop>
 53c:	80 95       	com	r24
 53e:	08 95       	ret

00000540 <__itoa_ncheck>:
 540:	bb 27       	eor	r27, r27
 542:	4a 30       	cpi	r20, 0x0A	; 10
 544:	31 f4       	brne	.+12     	; 0x552 <__itoa_ncheck+0x12>
 546:	99 23       	and	r25, r25
 548:	22 f4       	brpl	.+8      	; 0x552 <__itoa_ncheck+0x12>
 54a:	bd e2       	ldi	r27, 0x2D	; 45
 54c:	90 95       	com	r25
 54e:	81 95       	neg	r24
 550:	9f 4f       	sbci	r25, 0xFF	; 255
 552:	0c 94 ac 02 	jmp	0x558	; 0x558 <__utoa_common>

00000556 <__utoa_ncheck>:
 556:	bb 27       	eor	r27, r27

00000558 <__utoa_common>:
 558:	fb 01       	movw	r30, r22
 55a:	55 27       	eor	r21, r21
 55c:	aa 27       	eor	r26, r26
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	aa 1f       	adc	r26, r26
 564:	a4 17       	cp	r26, r20
 566:	10 f0       	brcs	.+4      	; 0x56c <__utoa_common+0x14>
 568:	a4 1b       	sub	r26, r20
 56a:	83 95       	inc	r24
 56c:	50 51       	subi	r21, 0x10	; 16
 56e:	b9 f7       	brne	.-18     	; 0x55e <__utoa_common+0x6>
 570:	a0 5d       	subi	r26, 0xD0	; 208
 572:	aa 33       	cpi	r26, 0x3A	; 58
 574:	08 f0       	brcs	.+2      	; 0x578 <__utoa_common+0x20>
 576:	a9 5d       	subi	r26, 0xD9	; 217
 578:	a1 93       	st	Z+, r26
 57a:	00 97       	sbiw	r24, 0x00	; 0
 57c:	79 f7       	brne	.-34     	; 0x55c <__utoa_common+0x4>
 57e:	b1 11       	cpse	r27, r1
 580:	b1 93       	st	Z+, r27
 582:	11 92       	st	Z+, r1
 584:	cb 01       	movw	r24, r22
 586:	0c 94 c5 02 	jmp	0x58a	; 0x58a <strrev>

0000058a <strrev>:
 58a:	dc 01       	movw	r26, r24
 58c:	fc 01       	movw	r30, r24
 58e:	67 2f       	mov	r22, r23
 590:	71 91       	ld	r23, Z+
 592:	77 23       	and	r23, r23
 594:	e1 f7       	brne	.-8      	; 0x58e <strrev+0x4>
 596:	32 97       	sbiw	r30, 0x02	; 2
 598:	04 c0       	rjmp	.+8      	; 0x5a2 <strrev+0x18>
 59a:	7c 91       	ld	r23, X
 59c:	6d 93       	st	X+, r22
 59e:	70 83       	st	Z, r23
 5a0:	62 91       	ld	r22, -Z
 5a2:	ae 17       	cp	r26, r30
 5a4:	bf 07       	cpc	r27, r31
 5a6:	c8 f3       	brcs	.-14     	; 0x59a <strrev+0x10>
 5a8:	08 95       	ret

000005aa <_exit>:
 5aa:	f8 94       	cli

000005ac <__stop_program>:
 5ac:	ff cf       	rjmp	.-2      	; 0x5ac <__stop_program>
