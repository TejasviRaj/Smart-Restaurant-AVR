
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  000003a4  00000438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001e9  008000ca  008000ca  000004a2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e91  00000000  00000000  000006b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aaf  00000000  00000000  00003541  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001439  00000000  00000000  00003ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000542c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  000058c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001414  00000000  00000000  000060a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000074bc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__vector_13>
  38:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_14>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3c       	cpi	r26, 0xCA	; 202
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	aa ec       	ldi	r26, 0xCA	; 202
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a3 3b       	cpi	r26, 0xB3	; 179
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 4c 01 	call	0x298	; 0x298 <main>
  8a:	0c 94 d0 01 	jmp	0x3a0	; 0x3a0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZL9lcd_writeh>:
void lcd_puts(const char * s)
{
	CPORT|= (1 << RS);
	while(*s)
	lcd_write(*s++);
}
  92:	95 ed       	ldi	r25, 0xD5	; 213
  94:	9a 95       	dec	r25
  96:	f1 f7       	brne	.-4      	; 0x94 <_ZL9lcd_writeh+0x2>
  98:	00 00       	nop
  9a:	88 23       	and	r24, r24
  9c:	14 f4       	brge	.+4      	; 0xa2 <_ZL9lcd_writeh+0x10>
  9e:	da 9a       	sbi	0x1b, 2	; 27
  a0:	01 c0       	rjmp	.+2      	; 0xa4 <_ZL9lcd_writeh+0x12>
  a2:	da 98       	cbi	0x1b, 2	; 27
  a4:	86 ff       	sbrs	r24, 6
  a6:	02 c0       	rjmp	.+4      	; 0xac <_ZL9lcd_writeh+0x1a>
  a8:	db 9a       	sbi	0x1b, 3	; 27
  aa:	01 c0       	rjmp	.+2      	; 0xae <_ZL9lcd_writeh+0x1c>
  ac:	db 98       	cbi	0x1b, 3	; 27
  ae:	85 ff       	sbrs	r24, 5
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <_ZL9lcd_writeh+0x24>
  b2:	dc 9a       	sbi	0x1b, 4	; 27
  b4:	01 c0       	rjmp	.+2      	; 0xb8 <_ZL9lcd_writeh+0x26>
  b6:	dc 98       	cbi	0x1b, 4	; 27
  b8:	84 ff       	sbrs	r24, 4
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <_ZL9lcd_writeh+0x2e>
  bc:	dd 9a       	sbi	0x1b, 5	; 27
  be:	01 c0       	rjmp	.+2      	; 0xc2 <_ZL9lcd_writeh+0x30>
  c0:	dd 98       	cbi	0x1b, 5	; 27
  c2:	de 9a       	sbi	0x1b, 6	; 27
  c4:	de 98       	cbi	0x1b, 6	; 27
  c6:	83 ff       	sbrs	r24, 3
  c8:	02 c0       	rjmp	.+4      	; 0xce <_ZL9lcd_writeh+0x3c>
  ca:	da 9a       	sbi	0x1b, 2	; 27
  cc:	01 c0       	rjmp	.+2      	; 0xd0 <_ZL9lcd_writeh+0x3e>
  ce:	da 98       	cbi	0x1b, 2	; 27
  d0:	82 ff       	sbrs	r24, 2
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZL9lcd_writeh+0x46>
  d4:	db 9a       	sbi	0x1b, 3	; 27
  d6:	01 c0       	rjmp	.+2      	; 0xda <_ZL9lcd_writeh+0x48>
  d8:	db 98       	cbi	0x1b, 3	; 27
  da:	81 ff       	sbrs	r24, 1
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <_ZL9lcd_writeh+0x50>
  de:	dc 9a       	sbi	0x1b, 4	; 27
  e0:	01 c0       	rjmp	.+2      	; 0xe4 <_ZL9lcd_writeh+0x52>
  e2:	dc 98       	cbi	0x1b, 4	; 27
  e4:	80 ff       	sbrs	r24, 0
  e6:	02 c0       	rjmp	.+4      	; 0xec <_ZL9lcd_writeh+0x5a>
  e8:	dd 9a       	sbi	0x1b, 5	; 27
  ea:	01 c0       	rjmp	.+2      	; 0xee <_ZL9lcd_writeh+0x5c>
  ec:	dd 98       	cbi	0x1b, 5	; 27
  ee:	de 9a       	sbi	0x1b, 6	; 27
  f0:	de 98       	cbi	0x1b, 6	; 27
  f2:	08 95       	ret

000000f4 <_Z9lcd_clearv>:
  f4:	df 98       	cbi	0x1b, 7	; 27
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	9f e1       	ldi	r25, 0x1F	; 31
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <_Z9lcd_clearv+0xc>
 104:	00 c0       	rjmp	.+0      	; 0x106 <_Z9lcd_clearv+0x12>
 106:	00 00       	nop
 108:	08 95       	ret

0000010a <_Z8lcd_gotoh>:
 10a:	df 98       	cbi	0x1b, 7	; 27
 10c:	80 68       	ori	r24, 0x80	; 128
 10e:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
 112:	08 95       	ret

00000114 <_Z10lcd_gotoxyhh>:
 114:	90 e4       	ldi	r25, 0x40	; 64
 116:	69 9f       	mul	r22, r25
 118:	80 0d       	add	r24, r0
 11a:	11 24       	eor	r1, r1
 11c:	0e 94 85 00 	call	0x10a	; 0x10a <_Z8lcd_gotoh>
 120:	08 95       	ret

00000122 <_Z8lcd_initv>:
 122:	d7 9a       	sbi	0x1a, 7	; 26
 124:	d6 9a       	sbi	0x1a, 6	; 26
 126:	d2 9a       	sbi	0x1a, 2	; 26
 128:	d3 9a       	sbi	0x1a, 3	; 26
 12a:	d4 9a       	sbi	0x1a, 4	; 26
 12c:	d5 9a       	sbi	0x1a, 5	; 26
 12e:	df 98       	cbi	0x1b, 7	; 27
 130:	de 98       	cbi	0x1b, 6	; 27
 132:	8f e5       	ldi	r24, 0x5F	; 95
 134:	9a ee       	ldi	r25, 0xEA	; 234
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <_Z8lcd_initv+0x14>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_Z8lcd_initv+0x1a>
 13c:	00 00       	nop
 13e:	dd 9a       	sbi	0x1b, 5	; 27
 140:	dc 9a       	sbi	0x1b, 4	; 27
 142:	db 98       	cbi	0x1b, 3	; 27
 144:	da 98       	cbi	0x1b, 2	; 27
 146:	de 9a       	sbi	0x1b, 6	; 27
 148:	de 98       	cbi	0x1b, 6	; 27
 14a:	8f e1       	ldi	r24, 0x1F	; 31
 14c:	9e e4       	ldi	r25, 0x4E	; 78
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <_Z8lcd_initv+0x2c>
 152:	00 c0       	rjmp	.+0      	; 0x154 <_Z8lcd_initv+0x32>
 154:	00 00       	nop
 156:	de 9a       	sbi	0x1b, 6	; 27
 158:	de 98       	cbi	0x1b, 6	; 27
 15a:	8f e1       	ldi	r24, 0x1F	; 31
 15c:	93 e0       	ldi	r25, 0x03	; 3
 15e:	01 97       	sbiw	r24, 0x01	; 1
 160:	f1 f7       	brne	.-4      	; 0x15e <_Z8lcd_initv+0x3c>
 162:	00 c0       	rjmp	.+0      	; 0x164 <_Z8lcd_initv+0x42>
 164:	00 00       	nop
 166:	de 9a       	sbi	0x1b, 6	; 27
 168:	de 98       	cbi	0x1b, 6	; 27
 16a:	8f e1       	ldi	r24, 0x1F	; 31
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <_Z8lcd_initv+0x4c>
 172:	00 c0       	rjmp	.+0      	; 0x174 <_Z8lcd_initv+0x52>
 174:	00 00       	nop
 176:	dd 98       	cbi	0x1b, 5	; 27
 178:	dc 9a       	sbi	0x1b, 4	; 27
 17a:	db 98       	cbi	0x1b, 3	; 27
 17c:	da 98       	cbi	0x1b, 2	; 27
 17e:	de 9a       	sbi	0x1b, 6	; 27
 180:	de 98       	cbi	0x1b, 6	; 27
 182:	88 e2       	ldi	r24, 0x28	; 40
 184:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
 188:	8c e0       	ldi	r24, 0x0C	; 12
 18a:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
 18e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
 198:	08 95       	ret

0000019a <_Z8lcd_putcc>:

void lcd_putc(char x)
{
	CPORT|= (1 << RS);
 19a:	df 9a       	sbi	0x1b, 7	; 27
	lcd_write(x);
 19c:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
 1a0:	08 95       	ret

000001a2 <_Z13lcd_setCursorii>:
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
 1a2:	92 e0       	ldi	r25, 0x02	; 2
 1a4:	96 1b       	sub	r25, r22
 1a6:	69 2f       	mov	r22, r25
 1a8:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
 1ac:	08 95       	ret

000001ae <_Z18database_init_testv>:

void send_info_test()
{
	dfood[0]=food[0];
	dfood[1]=food[1];
	dfood[2]=food[2];
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	c4 55       	subi	r28, 0x54	; 84
 1b8:	d1 09       	sbc	r29, r1
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	9a af       	std	Y+58, r25	; 0x3a
 1ca:	89 af       	std	Y+57, r24	; 0x39
 1cc:	25 e0       	ldi	r18, 0x05	; 5
 1ce:	e0 e6       	ldi	r30, 0x60	; 96
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	de 01       	movw	r26, r28
 1d4:	db 96       	adiw	r26, 0x3b	; 59
 1d6:	01 90       	ld	r0, Z+
 1d8:	0d 92       	st	X+, r0
 1da:	2a 95       	dec	r18
 1dc:	e1 f7       	brne	.-8      	; 0x1d6 <_Z18database_init_testv+0x28>
 1de:	24 e6       	ldi	r18, 0x64	; 100
 1e0:	30 e0       	ldi	r19, 0x00	; 0
 1e2:	61 96       	adiw	r28, 0x11	; 17
 1e4:	3f af       	std	Y+63, r19	; 0x3f
 1e6:	2e af       	std	Y+62, r18	; 0x3e
 1e8:	61 97       	sbiw	r28, 0x11	; 17
 1ea:	63 96       	adiw	r28, 0x13	; 19
 1ec:	1f ae       	std	Y+63, r1	; 0x3f
 1ee:	1e ae       	std	Y+62, r1	; 0x3e
 1f0:	63 97       	sbiw	r28, 0x13	; 19
 1f2:	65 96       	adiw	r28, 0x15	; 21
 1f4:	1f ae       	std	Y+63, r1	; 0x3f
 1f6:	1e ae       	std	Y+62, r1	; 0x3e
 1f8:	65 97       	sbiw	r28, 0x15	; 21
 1fa:	2c e1       	ldi	r18, 0x1C	; 28
 1fc:	fe 01       	movw	r30, r28
 1fe:	f9 96       	adiw	r30, 0x39	; 57
 200:	aa ec       	ldi	r26, 0xCA	; 202
 202:	b0 e0       	ldi	r27, 0x00	; 0
 204:	01 90       	ld	r0, Z+
 206:	0d 92       	st	X+, r0
 208:	2a 95       	dec	r18
 20a:	e1 f7       	brne	.-8      	; 0x204 <_Z18database_init_testv+0x56>
 20c:	22 e0       	ldi	r18, 0x02	; 2
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	3e 8f       	std	Y+30, r19	; 0x1e
 212:	2d 8f       	std	Y+29, r18	; 0x1d
 214:	25 e0       	ldi	r18, 0x05	; 5
 216:	e5 e6       	ldi	r30, 0x65	; 101
 218:	f0 e0       	ldi	r31, 0x00	; 0
 21a:	de 01       	movw	r26, r28
 21c:	5f 96       	adiw	r26, 0x1f	; 31
 21e:	01 90       	ld	r0, Z+
 220:	0d 92       	st	X+, r0
 222:	2a 95       	dec	r18
 224:	e1 f7       	brne	.-8      	; 0x21e <_Z18database_init_testv+0x70>
 226:	28 ec       	ldi	r18, 0xC8	; 200
 228:	30 e0       	ldi	r19, 0x00	; 0
 22a:	3c ab       	std	Y+52, r19	; 0x34
 22c:	2b ab       	std	Y+51, r18	; 0x33
 22e:	1e aa       	std	Y+54, r1	; 0x36
 230:	1d aa       	std	Y+53, r1	; 0x35
 232:	98 af       	std	Y+56, r25	; 0x38
 234:	8f ab       	std	Y+55, r24	; 0x37
 236:	8c e1       	ldi	r24, 0x1C	; 28
 238:	fe 01       	movw	r30, r28
 23a:	7d 96       	adiw	r30, 0x1d	; 29
 23c:	a6 ee       	ldi	r26, 0xE6	; 230
 23e:	b0 e0       	ldi	r27, 0x00	; 0
 240:	01 90       	ld	r0, Z+
 242:	0d 92       	st	X+, r0
 244:	8a 95       	dec	r24
 246:	e1 f7       	brne	.-8      	; 0x240 <_Z18database_init_testv+0x92>
 248:	83 e0       	ldi	r24, 0x03	; 3
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	9a 83       	std	Y+2, r25	; 0x02
 24e:	89 83       	std	Y+1, r24	; 0x01
 250:	85 e0       	ldi	r24, 0x05	; 5
 252:	ea e6       	ldi	r30, 0x6A	; 106
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	de 01       	movw	r26, r28
 258:	13 96       	adiw	r26, 0x03	; 3
 25a:	01 90       	ld	r0, Z+
 25c:	0d 92       	st	X+, r0
 25e:	8a 95       	dec	r24
 260:	e1 f7       	brne	.-8      	; 0x25a <_Z18database_init_testv+0xac>
 262:	8c e2       	ldi	r24, 0x2C	; 44
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	98 8f       	std	Y+24, r25	; 0x18
 268:	8f 8b       	std	Y+23, r24	; 0x17
 26a:	1a 8e       	std	Y+26, r1	; 0x1a
 26c:	19 8e       	std	Y+25, r1	; 0x19
 26e:	1c 8e       	std	Y+28, r1	; 0x1c
 270:	1b 8e       	std	Y+27, r1	; 0x1b
 272:	8c e1       	ldi	r24, 0x1C	; 28
 274:	fe 01       	movw	r30, r28
 276:	31 96       	adiw	r30, 0x01	; 1
 278:	a2 e0       	ldi	r26, 0x02	; 2
 27a:	b1 e0       	ldi	r27, 0x01	; 1
 27c:	01 90       	ld	r0, Z+
 27e:	0d 92       	st	X+, r0
 280:	8a 95       	dec	r24
 282:	e1 f7       	brne	.-8      	; 0x27c <_Z18database_init_testv+0xce>
 284:	cc 5a       	subi	r28, 0xAC	; 172
 286:	df 4f       	sbci	r29, 0xFF	; 255
 288:	0f b6       	in	r0, 0x3f	; 63
 28a:	f8 94       	cli
 28c:	de bf       	out	0x3e, r29	; 62
 28e:	0f be       	out	0x3f, r0	; 63
 290:	cd bf       	out	0x3d, r28	; 61
 292:	df 91       	pop	r29
 294:	cf 91       	pop	r28
 296:	08 95       	ret

00000298 <main>:
		

}
int main() {
	database_init_test();
 298:	0e 94 d7 00 	call	0x1ae	; 0x1ae <_Z18database_init_testv>
	sei();
 29c:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));	
 29e:	87 e6       	ldi	r24, 0x67	; 103
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 bc 01 	call	0x378	; 0x378 <_Z10uart0_initj>
	DDRD&= ~(1<<s_zero);
 2a6:	88 98       	cbi	0x11, 0	; 17
	DDRD&= ~(1<<s_one);
 2a8:	89 98       	cbi	0x11, 1	; 17
   DDRD&= ~(1<<s_two);
 2aa:	8a 98       	cbi	0x11, 2	; 17
	lcd_init();
 2ac:	0e 94 91 00 	call	0x122	; 0x122 <_Z8lcd_initv>
//	main_menu_test();
		while(1)
		{
			lcd_putc('a');
 2b0:	81 e6       	ldi	r24, 0x61	; 97
 2b2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putcc>

			lcd_setCursor(2,1);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <_Z13lcd_setCursorii>
						lcd_putc('a');
 2c2:	81 e6       	ldi	r24, 0x61	; 97
 2c4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putcc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	2f ef       	ldi	r18, 0xFF	; 255
 2ca:	83 ed       	ldi	r24, 0xD3	; 211
 2cc:	90 e3       	ldi	r25, 0x30	; 48
 2ce:	21 50       	subi	r18, 0x01	; 1
 2d0:	80 40       	sbci	r24, 0x00	; 0
 2d2:	90 40       	sbci	r25, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x36>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x40>
 2d8:	00 00       	nop
 2da:	ea cf       	rjmp	.-44     	; 0x2b0 <main+0x18>

000002dc <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 2dc:	1f 92       	push	r1
 2de:	0f 92       	push	r0
 2e0:	0f b6       	in	r0, 0x3f	; 63
 2e2:	0f 92       	push	r0
 2e4:	11 24       	eor	r1, r1
 2e6:	2f 93       	push	r18
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART0_STATUS;
 2f0:	8b b1       	in	r24, 0x0b	; 11
	data = UART0_DATA;
 2f2:	2c b1       	in	r18, 0x0c	; 12

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
 2f4:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#endif

	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;
 2f6:	e0 91 70 02 	lds	r30, 0x0270
 2fa:	ef 5f       	subi	r30, 0xFF	; 255
 2fc:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART0_RxTail) {
 2fe:	90 91 6f 02 	lds	r25, 0x026F
 302:	e9 17       	cp	r30, r25
 304:	39 f0       	breq	.+14     	; 0x314 <__vector_13+0x38>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART0_RxHead = tmphead;
 306:	e0 93 70 02 	sts	0x0270, r30
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
 30a:	f0 e0       	ldi	r31, 0x00	; 0
 30c:	ed 58       	subi	r30, 0x8D	; 141
 30e:	fd 4f       	sbci	r31, 0xFD	; 253
 310:	20 83       	st	Z, r18
 312:	01 c0       	rjmp	.+2      	; 0x316 <__vector_13+0x3a>
	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART0_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
 314:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART0_RxHead = tmphead;
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
	}
	UART0_LastRxError = lastRxError;
 316:	80 93 6e 02 	sts	0x026E, r24
}
 31a:	ff 91       	pop	r31
 31c:	ef 91       	pop	r30
 31e:	9f 91       	pop	r25
 320:	8f 91       	pop	r24
 322:	2f 91       	pop	r18
 324:	0f 90       	pop	r0
 326:	0f be       	out	0x3f, r0	; 63
 328:	0f 90       	pop	r0
 32a:	1f 90       	pop	r1
 32c:	18 95       	reti

0000032e <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
 33a:	9f 93       	push	r25
 33c:	ef 93       	push	r30
 33e:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART0_TxHead != UART0_TxTail) {
 340:	90 91 72 02 	lds	r25, 0x0272
 344:	80 91 71 02 	lds	r24, 0x0271
 348:	98 17       	cp	r25, r24
 34a:	61 f0       	breq	.+24     	; 0x364 <__vector_14+0x36>
		/* calculate and store new buffer index */
		tmptail = (UART0_TxTail + 1) & UART_TX_BUFFER_MASK;
 34c:	e0 91 71 02 	lds	r30, 0x0271
 350:	ef 5f       	subi	r30, 0xFF	; 255
 352:	ef 71       	andi	r30, 0x1F	; 31
		UART0_TxTail = tmptail;
 354:	e0 93 71 02 	sts	0x0271, r30
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART0_TxBuf[tmptail];  /* start transmission */
 358:	f0 e0       	ldi	r31, 0x00	; 0
 35a:	ed 56       	subi	r30, 0x6D	; 109
 35c:	fd 4f       	sbci	r31, 0xFD	; 253
 35e:	80 81       	ld	r24, Z
 360:	8c b9       	out	0x0c, r24	; 12
 362:	01 c0       	rjmp	.+2      	; 0x366 <__vector_14+0x38>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
 364:	55 98       	cbi	0x0a, 5	; 10
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	0f 90       	pop	r0
 370:	0f be       	out	0x3f, r0	; 63
 372:	0f 90       	pop	r0
 374:	1f 90       	pop	r1
 376:	18 95       	reti

00000378 <_Z10uart0_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(unsigned int baudrate)
{
	UART0_TxHead = 0;
 378:	10 92 72 02 	sts	0x0272, r1
	UART0_TxTail = 0;
 37c:	10 92 71 02 	sts	0x0271, r1
	UART0_RxHead = 0;
 380:	10 92 70 02 	sts	0x0270, r1
	UART0_RxTail = 0;
 384:	10 92 6f 02 	sts	0x026F, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000)
 388:	99 23       	and	r25, r25
 38a:	1c f4       	brge	.+6      	; 0x392 <_Z10uart0_initj+0x1a>
	{
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
 38c:	22 e0       	ldi	r18, 0x02	; 2
 38e:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
 390:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (unsigned char)(baudrate >> 8);
 392:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baudrate;
 394:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
 396:	88 e9       	ldi	r24, 0x98	; 152
 398:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | ( 1 << UCSZ1);
 39a:	86 e8       	ldi	r24, 0x86	; 134
 39c:	80 bd       	out	0x20, r24	; 32
 39e:	08 95       	ret

000003a0 <_exit>:
 3a0:	f8 94       	cli

000003a2 <__stop_program>:
 3a2:	ff cf       	rjmp	.-2      	; 0x3a2 <__stop_program>
