
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00001134  000011c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000038f  00800116  00800116  0000127e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000127e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ec1  00000000  00000000  0000148c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a9d  00000000  00000000  0000434d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001441  00000000  00000000  00004dea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000494  00000000  00000000  0000622c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e8  00000000  00000000  000066c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000143c  00000000  00000000  00006ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a8  00000000  00000000  000082e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0e 08 	jmp	0x101c	; 0x101c <__vector_13>
      38:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	24 e0       	ldi	r18, 0x04	; 4
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 00 08 	call	0x1000	; 0x1000 <main>
      8a:	0c 94 98 08 	jmp	0x1130	; 0x1130 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_ZL9lcd_writeh>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      92:	95 ed       	ldi	r25, 0xD5	; 213
      94:	9a 95       	dec	r25
      96:	f1 f7       	brne	.-4      	; 0x94 <_ZL9lcd_writeh+0x2>
      98:	00 00       	nop
#define	LCD_STROBE()	((CPORT |= (1 << EN)),(CPORT &= ~(1 << EN)))
static void lcd_write(uint8_t c)
{
	_delay_us(40);

	if(c & 0x80)
      9a:	88 23       	and	r24, r24
      9c:	14 f4       	brge	.+4      	; 0xa2 <_ZL9lcd_writeh+0x10>
	DPORT |=  (1 << D7);
      9e:	da 9a       	sbi	0x1b, 2	; 27
      a0:	01 c0       	rjmp	.+2      	; 0xa4 <_ZL9lcd_writeh+0x12>
	else
	DPORT &= ~(1 << D7);
      a2:	da 98       	cbi	0x1b, 2	; 27
	
	if(c & 0x40)
      a4:	86 ff       	sbrs	r24, 6
      a6:	02 c0       	rjmp	.+4      	; 0xac <_ZL9lcd_writeh+0x1a>
	DPORT |=  (1 << D6);
      a8:	db 9a       	sbi	0x1b, 3	; 27
      aa:	01 c0       	rjmp	.+2      	; 0xae <_ZL9lcd_writeh+0x1c>
	else
	DPORT &= ~(1 << D6);
      ac:	db 98       	cbi	0x1b, 3	; 27
	
	if(c & 0x20)
      ae:	85 ff       	sbrs	r24, 5
      b0:	02 c0       	rjmp	.+4      	; 0xb6 <_ZL9lcd_writeh+0x24>
	DPORT |=  (1 << D5);
      b2:	dc 9a       	sbi	0x1b, 4	; 27
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <_ZL9lcd_writeh+0x26>
	else
	DPORT &= ~(1 << D5);
      b6:	dc 98       	cbi	0x1b, 4	; 27
	
	if(c & 0x10)
      b8:	84 ff       	sbrs	r24, 4
      ba:	02 c0       	rjmp	.+4      	; 0xc0 <_ZL9lcd_writeh+0x2e>
	DPORT |=  (1 << D4);
      bc:	dd 9a       	sbi	0x1b, 5	; 27
      be:	01 c0       	rjmp	.+2      	; 0xc2 <_ZL9lcd_writeh+0x30>
	else
	DPORT &= ~(1 << D4);
      c0:	dd 98       	cbi	0x1b, 5	; 27
	
	LCD_STROBE();
      c2:	de 9a       	sbi	0x1b, 6	; 27
      c4:	de 98       	cbi	0x1b, 6	; 27
	
	

	if(c & 0x08)
      c6:	83 ff       	sbrs	r24, 3
      c8:	02 c0       	rjmp	.+4      	; 0xce <_ZL9lcd_writeh+0x3c>
	
	DPORT |=  (1 << D7);
      ca:	da 9a       	sbi	0x1b, 2	; 27
      cc:	01 c0       	rjmp	.+2      	; 0xd0 <_ZL9lcd_writeh+0x3e>
	else
	DPORT &= ~(1 << D7);
      ce:	da 98       	cbi	0x1b, 2	; 27
	
	if(c & 0x04)
      d0:	82 ff       	sbrs	r24, 2
      d2:	02 c0       	rjmp	.+4      	; 0xd8 <_ZL9lcd_writeh+0x46>
	DPORT |=  (1 << D6);
      d4:	db 9a       	sbi	0x1b, 3	; 27
      d6:	01 c0       	rjmp	.+2      	; 0xda <_ZL9lcd_writeh+0x48>
	else
	DPORT &= ~(1 << D6);
      d8:	db 98       	cbi	0x1b, 3	; 27
	
	if(c & 0x02)
      da:	81 ff       	sbrs	r24, 1
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <_ZL9lcd_writeh+0x50>
	DPORT |=  (1 << D5);
      de:	dc 9a       	sbi	0x1b, 4	; 27
      e0:	01 c0       	rjmp	.+2      	; 0xe4 <_ZL9lcd_writeh+0x52>
	else
	DPORT &= ~(1 << D5);
      e2:	dc 98       	cbi	0x1b, 4	; 27
	
	if(c & 0x01)
      e4:	80 ff       	sbrs	r24, 0
      e6:	02 c0       	rjmp	.+4      	; 0xec <_ZL9lcd_writeh+0x5a>
	DPORT |=  (1 << D4);
      e8:	dd 9a       	sbi	0x1b, 5	; 27
      ea:	01 c0       	rjmp	.+2      	; 0xee <_ZL9lcd_writeh+0x5c>
	else
	DPORT &= ~(1 << D4);
      ec:	dd 98       	cbi	0x1b, 5	; 27
	
	LCD_STROBE();
      ee:	de 9a       	sbi	0x1b, 6	; 27
      f0:	de 98       	cbi	0x1b, 6	; 27
      f2:	08 95       	ret

000000f4 <_Z9lcd_clearv>:
#include "lcd.h"


void lcd_clear(void)
{
	CPORT &= ~(1 << RS);
      f4:	df 98       	cbi	0x1b, 7	; 27
	lcd_write(1<<LCD_CLR);
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      fc:	8f e3       	ldi	r24, 0x3F	; 63
      fe:	9f e1       	ldi	r25, 0x1F	; 31
     100:	01 97       	sbiw	r24, 0x01	; 1
     102:	f1 f7       	brne	.-4      	; 0x100 <_Z9lcd_clearv+0xc>
     104:	00 c0       	rjmp	.+0      	; 0x106 <_Z9lcd_clearv+0x12>
     106:	00 00       	nop
     108:	08 95       	ret

0000010a <_Z8lcd_gotoh>:
	_delay_ms(2);
}

void lcd_goto(unsigned char pos)
{
	CPORT &= ~(1 << RS);
     10a:	df 98       	cbi	0x1b, 7	; 27
	lcd_write(0x80|pos);
     10c:	80 68       	ori	r24, 0x80	; 128
     10e:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     112:	08 95       	ret

00000114 <_Z10lcd_gotoxyhh>:
}


void lcd_gotoxy( unsigned char x, unsigned char y )
{
	lcd_goto( y*64+x );
     114:	90 e4       	ldi	r25, 0x40	; 64
     116:	69 9f       	mul	r22, r25
     118:	80 0d       	add	r24, r0
     11a:	11 24       	eor	r1, r1
     11c:	0e 94 85 00 	call	0x10a	; 0x10a <_Z8lcd_gotoh>
     120:	08 95       	ret

00000122 <_Z8lcd_initv>:
}

void lcd_init()
{
	DDR(CPORT) |= (1 << RS);
     122:	d7 9a       	sbi	0x1a, 7	; 26
	DDR(CPORT) |= (1 << EN);
     124:	d6 9a       	sbi	0x1a, 6	; 26
	
	DDR(DPORT) |= (1 << D7);
     126:	d2 9a       	sbi	0x1a, 2	; 26
	DDR(DPORT) |= (1 << D6);
     128:	d3 9a       	sbi	0x1a, 3	; 26
	DDR(DPORT) |= (1 << D5);
     12a:	d4 9a       	sbi	0x1a, 4	; 26
	DDR(DPORT) |= (1 << D4);
     12c:	d5 9a       	sbi	0x1a, 5	; 26
	
	CPORT &= ~(1 << RS);
     12e:	df 98       	cbi	0x1b, 7	; 27
	CPORT &= ~(1 << EN);
     130:	de 98       	cbi	0x1b, 6	; 27
     132:	8f e5       	ldi	r24, 0x5F	; 95
     134:	9a ee       	ldi	r25, 0xEA	; 234
     136:	01 97       	sbiw	r24, 0x01	; 1
     138:	f1 f7       	brne	.-4      	; 0x136 <_Z8lcd_initv+0x14>
     13a:	00 c0       	rjmp	.+0      	; 0x13c <_Z8lcd_initv+0x1a>
     13c:	00 00       	nop
	
	_delay_ms(15);

	DPORT |= (1 << D4);
     13e:	dd 9a       	sbi	0x1b, 5	; 27
	DPORT |= (1 << D5);
     140:	dc 9a       	sbi	0x1b, 4	; 27
	DPORT &= ~(1 << D6);
     142:	db 98       	cbi	0x1b, 3	; 27
	DPORT &= ~(1 << D7);
     144:	da 98       	cbi	0x1b, 2	; 27
	
	LCD_STROBE();
     146:	de 9a       	sbi	0x1b, 6	; 27
     148:	de 98       	cbi	0x1b, 6	; 27
     14a:	8f e1       	ldi	r24, 0x1F	; 31
     14c:	9e e4       	ldi	r25, 0x4E	; 78
     14e:	01 97       	sbiw	r24, 0x01	; 1
     150:	f1 f7       	brne	.-4      	; 0x14e <_Z8lcd_initv+0x2c>
     152:	00 c0       	rjmp	.+0      	; 0x154 <_Z8lcd_initv+0x32>
     154:	00 00       	nop
	_delay_ms(5);
	LCD_STROBE();
     156:	de 9a       	sbi	0x1b, 6	; 27
     158:	de 98       	cbi	0x1b, 6	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     15a:	8f e1       	ldi	r24, 0x1F	; 31
     15c:	93 e0       	ldi	r25, 0x03	; 3
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <_Z8lcd_initv+0x3c>
     162:	00 c0       	rjmp	.+0      	; 0x164 <_Z8lcd_initv+0x42>
     164:	00 00       	nop
	_delay_us(200);
	LCD_STROBE();
     166:	de 9a       	sbi	0x1b, 6	; 27
     168:	de 98       	cbi	0x1b, 6	; 27
     16a:	8f e1       	ldi	r24, 0x1F	; 31
     16c:	93 e0       	ldi	r25, 0x03	; 3
     16e:	01 97       	sbiw	r24, 0x01	; 1
     170:	f1 f7       	brne	.-4      	; 0x16e <_Z8lcd_initv+0x4c>
     172:	00 c0       	rjmp	.+0      	; 0x174 <_Z8lcd_initv+0x52>
     174:	00 00       	nop
	_delay_us(200);
	
	
	DPORT &= ~(1 << D4);
     176:	dd 98       	cbi	0x1b, 5	; 27
	DPORT |=  (1 << D5);
     178:	dc 9a       	sbi	0x1b, 4	; 27
	DPORT &= ~(1 << D6);
     17a:	db 98       	cbi	0x1b, 3	; 27
	DPORT &= ~(1 << D7);
     17c:	da 98       	cbi	0x1b, 2	; 27
	
	LCD_STROBE();
     17e:	de 9a       	sbi	0x1b, 6	; 27
     180:	de 98       	cbi	0x1b, 6	; 27

	lcd_write(0x28);
     182:	88 e2       	ldi	r24, 0x28	; 40
     184:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	lcd_write(0b00001100);
     188:	8c e0       	ldi	r24, 0x0C	; 12
     18a:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
	lcd_clear();
     18e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	lcd_write(0x6);
     192:	86 e0       	ldi	r24, 0x06	; 6
     194:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     198:	08 95       	ret

0000019a <_Z8lcd_putsPKc>:
}

void lcd_puts(const char * s)
{
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	ec 01       	movw	r28, r24
	CPORT|= (1 << RS);
     1a0:	df 9a       	sbi	0x1b, 7	; 27
	while(*s)
     1a2:	88 81       	ld	r24, Y
     1a4:	88 23       	and	r24, r24
     1a6:	31 f0       	breq	.+12     	; 0x1b4 <_Z8lcd_putsPKc+0x1a>
     1a8:	21 96       	adiw	r28, 0x01	; 1
	lcd_write(*s++);
     1aa:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
}

void lcd_puts(const char * s)
{
	CPORT|= (1 << RS);
	while(*s)
     1ae:	89 91       	ld	r24, Y+
     1b0:	81 11       	cpse	r24, r1
     1b2:	fb cf       	rjmp	.-10     	; 0x1aa <_Z8lcd_putsPKc+0x10>
	lcd_write(*s++);
}
     1b4:	df 91       	pop	r29
     1b6:	cf 91       	pop	r28
     1b8:	08 95       	ret

000001ba <_Z8lcd_putcc>:

void lcd_putc(char x)
{
	CPORT|= (1 << RS);
     1ba:	df 9a       	sbi	0x1b, 7	; 27
	lcd_write(x);
     1bc:	0e 94 49 00 	call	0x92	; 0x92 <_ZL9lcd_writeh>
     1c0:	08 95       	ret

000001c2 <_Z7lcd_numi>:
}

void lcd_num(int in)
{
     1c2:	ef 92       	push	r14
     1c4:	ff 92       	push	r15
     1c6:	0f 93       	push	r16
     1c8:	1f 93       	push	r17
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	c4 56       	subi	r28, 0x64	; 100
     1d4:	d1 09       	sbc	r29, r1
     1d6:	0f b6       	in	r0, 0x3f	; 63
     1d8:	f8 94       	cli
     1da:	de bf       	out	0x3e, r29	; 62
     1dc:	0f be       	out	0x3f, r0	; 63
     1de:	cd bf       	out	0x3d, r28	; 61
     1e0:	bc 01       	movw	r22, r24
     1e2:	ce 01       	movw	r24, r28
     1e4:	01 96       	adiw	r24, 0x01	; 1
     1e6:	7c 01       	movw	r14, r24
     1e8:	fc 01       	movw	r30, r24
	int c;
	char temp[100];
	int index=0;
     1ea:	00 e0       	ldi	r16, 0x00	; 0
     1ec:	10 e0       	ldi	r17, 0x00	; 0
	do
	{
		c=in%10;
     1ee:	2a e0       	ldi	r18, 0x0A	; 10
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	01 c0       	rjmp	.+2      	; 0x1f6 <_Z7lcd_numi+0x34>
		in=in/10;
		temp[index]=c+'0';
		index++;
     1f4:	8c 01       	movw	r16, r24
	char temp[100];
	int index=0;
	do
	{
		c=in%10;
		in=in/10;
     1f6:	cb 01       	movw	r24, r22
     1f8:	b9 01       	movw	r22, r18
     1fa:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__divmodhi4>
		temp[index]=c+'0';
     1fe:	90 e3       	ldi	r25, 0x30	; 48
     200:	98 0f       	add	r25, r24
     202:	91 93       	st	Z+, r25
		index++;
     204:	c8 01       	movw	r24, r16
     206:	01 96       	adiw	r24, 0x01	; 1
void lcd_num(int in)
{
	int c;
	char temp[100];
	int index=0;
	do
     208:	61 15       	cp	r22, r1
     20a:	71 05       	cpc	r23, r1
     20c:	99 f7       	brne	.-26     	; 0x1f4 <_Z7lcd_numi+0x32>
		in=in/10;
		temp[index]=c+'0';
		index++;
	}
	while (in!=0);
	for (int i=index-1;i>=0;i--)
     20e:	11 23       	and	r17, r17
     210:	64 f0       	brlt	.+24     	; 0x22a <_Z7lcd_numi+0x68>
     212:	0c 0f       	add	r16, r28
     214:	1d 1f       	adc	r17, r29
     216:	0e 5f       	subi	r16, 0xFE	; 254
     218:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		lcd_putc(temp[i]);
     21a:	f8 01       	movw	r30, r16
     21c:	82 91       	ld	r24, -Z
     21e:	8f 01       	movw	r16, r30
     220:	0e 94 dd 00 	call	0x1ba	; 0x1ba <_Z8lcd_putcc>
		in=in/10;
		temp[index]=c+'0';
		index++;
	}
	while (in!=0);
	for (int i=index-1;i>=0;i--)
     224:	0e 15       	cp	r16, r14
     226:	1f 05       	cpc	r17, r15
     228:	c1 f7       	brne	.-16     	; 0x21a <_Z7lcd_numi+0x58>
	{
		lcd_putc(temp[i]);
	}
}
     22a:	cc 59       	subi	r28, 0x9C	; 156
     22c:	df 4f       	sbci	r29, 0xFF	; 255
     22e:	0f b6       	in	r0, 0x3f	; 63
     230:	f8 94       	cli
     232:	de bf       	out	0x3e, r29	; 62
     234:	0f be       	out	0x3f, r0	; 63
     236:	cd bf       	out	0x3d, r28	; 61
     238:	df 91       	pop	r29
     23a:	cf 91       	pop	r28
     23c:	1f 91       	pop	r17
     23e:	0f 91       	pop	r16
     240:	ff 90       	pop	r15
     242:	ef 90       	pop	r14
     244:	08 95       	ret

00000246 <_Z13lcd_setCursorii>:
	}
	
	int digitalRead (int s)
	{
		return (PIND & (1<<s));
	}
     246:	92 e0       	ldi	r25, 0x02	; 2
     248:	96 1b       	sub	r25, r22
     24a:	69 2f       	mov	r22, r25
     24c:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     250:	08 95       	ret

00000252 <_Z12wait_messagev>:

    void wait_message()
    {
        lcd_clear();
     252:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
        lcd_puts("Please wait");
     256:	8e e6       	ldi	r24, 0x6E	; 110
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     25e:	08 95       	ret

00000260 <_Z5inputv>:
		return ans;
	}
	
	int digitalRead (int s)
	{
		return (PIND & (1<<s));
     260:	80 b3       	in	r24, 0x10	; 16
        lcd_puts("Please wait");
    }
   int input()
   {
       int a=0;
       if (digitalRead(s_zero))
     262:	28 2f       	mov	r18, r24
     264:	21 70       	andi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
        lcd_clear();
        lcd_puts("Please wait");
    }
   int input()
   {
       int a=0;
     268:	c9 01       	movw	r24, r18
       if (digitalRead(s_zero))
         a+=1;
       if (digitalRead(s_one))
     26a:	81 99       	sbic	0x10, 1	; 16
         a+=10;
     26c:	0a 96       	adiw	r24, 0x0a	; 10
       if (digitalRead(s_two))
     26e:	82 9b       	sbis	0x10, 2	; 16
     270:	02 c0       	rjmp	.+4      	; 0x276 <_Z5inputv+0x16>
         a+=100;
     272:	8c 59       	subi	r24, 0x9C	; 156
     274:	9f 4f       	sbci	r25, 0xFF	; 255
       return(a);
   }
     276:	08 95       	ret

00000278 <_Z15main_menu_printi>:

   void main_menu_print(int first_visit)
   {
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	ec 01       	movw	r28, r24
     lcd_clear();
     27e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     282:	62 e0       	ldi	r22, 0x02	; 2
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

   void main_menu_print(int first_visit)
   {
     lcd_clear();
     lcd_setCursor(0,0);
     lcd_puts(" ");
     28a:	8f eb       	ldi	r24, 0xBF	; 191
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     292:	62 e0       	ldi	r22, 0x02	; 2
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
   {
     lcd_clear();
     lcd_setCursor(0,0);
     lcd_puts(" ");
     lcd_setCursor(0,0);
      lcd_puts(">");
     29a:	8a e7       	ldi	r24, 0x7A	; 122
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     2a2:	61 e0       	ldi	r22, 0x01	; 1
     2a4:	82 e0       	ldi	r24, 0x02	; 2
     2a6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     lcd_puts(" ");
     lcd_setCursor(0,0);
      lcd_puts(">");

      lcd_setCursor(2, 1);
      lcd_puts("Selected Food");
     2aa:	8c e7       	ldi	r24, 0x7C	; 124
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     2b2:	62 e0       	ldi	r22, 0x02	; 2
     2b4:	82 e0       	ldi	r24, 0x02	; 2
     2b6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

      lcd_setCursor(2, 1);
      lcd_puts("Selected Food");

      lcd_setCursor(2, 0);
      if (first_visit==1)
     2ba:	21 97       	sbiw	r28, 0x01	; 1
     2bc:	29 f4       	brne	.+10     	; 0x2c8 <_Z15main_menu_printi+0x50>
      lcd_puts("Change Food");
     2be:	8a e8       	ldi	r24, 0x8A	; 138
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     2c6:	04 c0       	rjmp	.+8      	; 0x2d0 <_Z15main_menu_printi+0x58>
      else
      lcd_puts("Select Food");
     2c8:	86 e9       	ldi	r24, 0x96	; 150
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
   }
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <_Z17clear_second_linev>:
                lcd_num(food[selected_pk].num);

     }

     void clear_second_line()
     {
     2d6:	cf 93       	push	r28
     2d8:	c0 e0       	ldi	r28, 0x00	; 0
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     2da:	61 e0       	ldi	r22, 0x01	; 1
     2dc:	8c 2f       	mov	r24, r28
     2de:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     void clear_second_line()
     {
       for (int i=0;i<=15;i++)
       {
         lcd_setCursor(i,1);
         lcd_puts(" ");
     2e2:	8f eb       	ldi	r24, 0xBF	; 191
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     2ea:	cf 5f       	subi	r28, 0xFF	; 255

     }

     void clear_second_line()
     {
       for (int i=0;i<=15;i++)
     2ec:	c0 31       	cpi	r28, 0x10	; 16
     2ee:	a9 f7       	brne	.-22     	; 0x2da <_Z17clear_second_linev+0x4>
       {
         lcd_setCursor(i,1);
         lcd_puts(" ");
       }
     }
     2f0:	cf 91       	pop	r28
     2f2:	08 95       	ret

000002f4 <_Z17select_food_printi>:
      else
      lcd_puts("Select Food");
   }

   void select_food_print(int selected_pk)
     {
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	8c 01       	movw	r16, r24
               clear_second_line();
     2fe:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <_Z17clear_second_linev>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     302:	61 e0       	ldi	r22, 0x01	; 1
     304:	80 e0       	ldi	r24, 0x00	; 0
     306:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     {
               clear_second_line();

                lcd_setCursor(0,1);

                lcd_puts(food[selected_pk].name);
     30a:	8c e1       	ldi	r24, 0x1C	; 28
     30c:	80 9f       	mul	r24, r16
     30e:	e0 01       	movw	r28, r0
     310:	81 9f       	mul	r24, r17
     312:	d0 0d       	add	r29, r0
     314:	11 24       	eor	r1, r1
     316:	ce 01       	movw	r24, r28
     318:	88 5e       	subi	r24, 0xE8	; 232
     31a:	9e 4f       	sbci	r25, 0xFE	; 254
     31c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     320:	61 e0       	ldi	r22, 0x01	; 1
     322:	88 e0       	ldi	r24, 0x08	; 8
     324:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                lcd_setCursor(0,1);

                lcd_puts(food[selected_pk].name);

                lcd_setCursor(8,1);
                lcd_num(food[selected_pk].price);
     328:	ca 5e       	subi	r28, 0xEA	; 234
     32a:	de 4f       	sbci	r29, 0xFE	; 254
     32c:	8e 89       	ldd	r24, Y+22	; 0x16
     32e:	9f 89       	ldd	r25, Y+23	; 0x17
     330:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	8e e0       	ldi	r24, 0x0E	; 14
     338:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>

                lcd_setCursor(8,1);
                lcd_num(food[selected_pk].price);

                 lcd_setCursor(14,1);
                lcd_num(food[selected_pk].num);
     33c:	88 8d       	ldd	r24, Y+24	; 0x18
     33e:	99 8d       	ldd	r25, Y+25	; 0x19
     340:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>

     }
     344:	df 91       	pop	r29
     346:	cf 91       	pop	r28
     348:	1f 91       	pop	r17
     34a:	0f 91       	pop	r16
     34c:	08 95       	ret

0000034e <_Z13cannot_cancelv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	2f ef       	ldi	r18, 0xFF	; 255
     350:	35 ea       	ldi	r19, 0xA5	; 165
     352:	4e e0       	ldi	r20, 0x0E	; 14
     354:	21 50       	subi	r18, 0x01	; 1
     356:	30 40       	sbci	r19, 0x00	; 0
     358:	40 40       	sbci	r20, 0x00	; 0
     35a:	e1 f7       	brne	.-8      	; 0x354 <_Z13cannot_cancelv+0x6>
     35c:	00 c0       	rjmp	.+0      	; 0x35e <_Z13cannot_cancelv+0x10>
     35e:	00 00       	nop
     }

     void cannot_cancel()
     {
		  _delay_ms(DELAY_TIME_STRAIGHT_START);
          lcd_clear();
     360:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
         lcd_puts(" Cannot Cancel ");
     364:	82 ea       	ldi	r24, 0xA2	; 162
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     36c:	61 e0       	ldi	r22, 0x01	; 1
     36e:	86 e0       	ldi	r24, 0x06	; 6
     370:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     {
		  _delay_ms(DELAY_TIME_STRAIGHT_START);
          lcd_clear();
         lcd_puts(" Cannot Cancel ");
         lcd_setCursor(6,1);
         lcd_puts(">Ok");
     374:	82 eb       	ldi	r24, 0xB2	; 178
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
         while(1)
           {
             int in=input();
     37c:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
			 if (in !=0)
     380:	00 97       	sbiw	r24, 0x00	; 0
     382:	e1 f3       	breq	.-8      	; 0x37c <_Z13cannot_cancelv+0x2e>
     384:	2f ef       	ldi	r18, 0xFF	; 255
     386:	36 e7       	ldi	r19, 0x76	; 118
     388:	41 e0       	ldi	r20, 0x01	; 1
     38a:	21 50       	subi	r18, 0x01	; 1
     38c:	30 40       	sbci	r19, 0x00	; 0
     38e:	40 40       	sbci	r20, 0x00	; 0
     390:	e1 f7       	brne	.-8      	; 0x38a <_Z13cannot_cancelv+0x3c>
     392:	00 c0       	rjmp	.+0      	; 0x394 <_Z13cannot_cancelv+0x46>
     394:	00 00       	nop
			 {
				 _delay_ms(DELAY_BOUNCE);
             if (in == ok)
     396:	20 91 62 00 	lds	r18, 0x0062
     39a:	30 91 63 00 	lds	r19, 0x0063
     39e:	82 17       	cp	r24, r18
     3a0:	93 07       	cpc	r25, r19
     3a2:	51 f0       	breq	.+20     	; 0x3b8 <_Z13cannot_cancelv+0x6a>
     3a4:	8f ef       	ldi	r24, 0xFF	; 255
     3a6:	95 ea       	ldi	r25, 0xA5	; 165
     3a8:	2e e0       	ldi	r18, 0x0E	; 14
     3aa:	81 50       	subi	r24, 0x01	; 1
     3ac:	90 40       	sbci	r25, 0x00	; 0
     3ae:	20 40       	sbci	r18, 0x00	; 0
     3b0:	e1 f7       	brne	.-8      	; 0x3aa <_Z13cannot_cancelv+0x5c>
     3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <_Z13cannot_cancelv+0x66>
     3b4:	00 00       	nop
     3b6:	e2 cf       	rjmp	.-60     	; 0x37c <_Z13cannot_cancelv+0x2e>
     3b8:	08 95       	ret

000003ba <_Z16display_message1PKc>:
		 }
     }

     //confirmation messages
     int display_message1(char const *s)
       {
     3ba:	ef 92       	push	r14
     3bc:	ff 92       	push	r15
     3be:	0f 93       	push	r16
     3c0:	1f 93       	push	r17
     3c2:	cf 93       	push	r28
     3c4:	df 93       	push	r29
     3c6:	ec 01       	movw	r28, r24
           lcd_clear();
     3c8:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
           lcd_puts(s);
     3cc:	ce 01       	movw	r24, r28
     3ce:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     3d2:	61 e0       	ldi	r22, 0x01	; 1
     3d4:	82 e0       	ldi	r24, 0x02	; 2
     3d6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
     int display_message1(char const *s)
       {
           lcd_clear();
           lcd_puts(s);
           lcd_setCursor(2,1);
           lcd_puts(">Yes");
     3da:	86 eb       	ldi	r24, 0xB6	; 182
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     3e2:	61 e0       	ldi	r22, 0x01	; 1
     3e4:	8c e0       	ldi	r24, 0x0C	; 12
     3e6:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
           lcd_puts(s);
           lcd_setCursor(2,1);
           lcd_puts(">Yes");

           lcd_setCursor(12,1);
           lcd_puts("No");
     3ea:	8b eb       	ldi	r24, 0xBB	; 187
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     3f2:	2f ef       	ldi	r18, 0xFF	; 255
     3f4:	85 ea       	ldi	r24, 0xA5	; 165
     3f6:	9e e0       	ldi	r25, 0x0E	; 14
     3f8:	21 50       	subi	r18, 0x01	; 1
     3fa:	80 40       	sbci	r24, 0x00	; 0
     3fc:	90 40       	sbci	r25, 0x00	; 0
     3fe:	e1 f7       	brne	.-8      	; 0x3f8 <_Z16display_message1PKc+0x3e>
     400:	00 c0       	rjmp	.+0      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     402:	00 00       	nop
           _delay_ms(DELAY_TIME_STRAIGHT_START);

           int state=1;
     404:	c1 e0       	ldi	r28, 0x01	; 1
     406:	d0 e0       	ldi	r29, 0x00	; 0
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
                        lcd_setCursor(2,1);
                         lcd_puts(">");
                         state=1;
     408:	01 e0       	ldi	r16, 0x01	; 1
     40a:	10 e0       	ldi	r17, 0x00	; 0
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
                        lcd_setCursor(11,1);
                         lcd_puts(">");
                         state=0;
     40c:	e1 2c       	mov	r14, r1
     40e:	f1 2c       	mov	r15, r1
           _delay_ms(DELAY_TIME_STRAIGHT_START);

           int state=1;
           while(1)
              {
                    int in=input();
     410:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
                  //  lcd_puts (in);
				  if (in !=0)
     414:	89 2b       	or	r24, r25
     416:	e1 f3       	breq	.-8      	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
     418:	2f ef       	ldi	r18, 0xFF	; 255
     41a:	86 e7       	ldi	r24, 0x76	; 118
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	21 50       	subi	r18, 0x01	; 1
     420:	80 40       	sbci	r24, 0x00	; 0
     422:	90 40       	sbci	r25, 0x00	; 0
     424:	e1 f7       	brne	.-8      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
     426:	00 c0       	rjmp	.+0      	; 0x428 <__FUSE_REGION_LENGTH__+0x28>
     428:	00 00       	nop
				  {
					  _delay_ms(DELAY_BOUNCE);
					  in =input();
     42a:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
                   if (state==1&& (in==left ||in==right))
     42e:	c1 30       	cpi	r28, 0x01	; 1
     430:	d1 05       	cpc	r29, r1
     432:	09 f5       	brne	.+66     	; 0x476 <__FUSE_REGION_LENGTH__+0x76>
     434:	20 91 66 00 	lds	r18, 0x0066
     438:	30 91 67 00 	lds	r19, 0x0067
     43c:	82 17       	cp	r24, r18
     43e:	93 07       	cpc	r25, r19
     440:	39 f0       	breq	.+14     	; 0x450 <__FUSE_REGION_LENGTH__+0x50>
     442:	20 91 68 00 	lds	r18, 0x0068
     446:	30 91 69 00 	lds	r19, 0x0069
     44a:	82 17       	cp	r24, r18
     44c:	93 07       	cpc	r25, r19
     44e:	b1 f5       	brne	.+108    	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	82 e0       	ldi	r24, 0x02	; 2
     454:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
					  _delay_ms(DELAY_BOUNCE);
					  in =input();
                   if (state==1&& (in==left ||in==right))
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
     458:	8f eb       	ldi	r24, 0xBF	; 191
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     460:	61 e0       	ldi	r22, 0x01	; 1
     462:	8b e0       	ldi	r24, 0x0B	; 11
     464:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                   if (state==1&& (in==left ||in==right))
                     {
                        lcd_setCursor(2,1);
                        lcd_puts(" ");
                        lcd_setCursor(11,1);
                         lcd_puts(">");
     468:	8a e7       	ldi	r24, 0x7A	; 122
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
                         state=0;
     470:	ce 2d       	mov	r28, r14
     472:	df 2d       	mov	r29, r15
     474:	2a c0       	rjmp	.+84     	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
                      }
                   else if (state==0 && (in==left ||in==right))
     476:	20 97       	sbiw	r28, 0x00	; 0
     478:	09 f5       	brne	.+66     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
     47a:	20 91 66 00 	lds	r18, 0x0066
     47e:	30 91 67 00 	lds	r19, 0x0067
     482:	82 17       	cp	r24, r18
     484:	93 07       	cpc	r25, r19
     486:	39 f0       	breq	.+14     	; 0x496 <__FUSE_REGION_LENGTH__+0x96>
     488:	20 91 68 00 	lds	r18, 0x0068
     48c:	30 91 69 00 	lds	r19, 0x0069
     490:	82 17       	cp	r24, r18
     492:	93 07       	cpc	r25, r19
     494:	99 f4       	brne	.+38     	; 0x4bc <__FUSE_REGION_LENGTH__+0xbc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     496:	61 e0       	ldi	r22, 0x01	; 1
     498:	8b e0       	ldi	r24, 0x0B	; 11
     49a:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                         state=0;
                      }
                   else if (state==0 && (in==left ||in==right))
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
     49e:	8f eb       	ldi	r24, 0xBF	; 191
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
foods dfood[15];

void lcd_setCursor(int x,int y)
{
	
	lcd_gotoxy(x,(1-y)+1);
     4a6:	61 e0       	ldi	r22, 0x01	; 1
     4a8:	82 e0       	ldi	r24, 0x02	; 2
     4aa:	0e 94 8a 00 	call	0x114	; 0x114 <_Z10lcd_gotoxyhh>
                   else if (state==0 && (in==left ||in==right))
                  {
                        lcd_setCursor(11,1);
                        lcd_puts(" ");
                        lcd_setCursor(2,1);
                         lcd_puts(">");
     4ae:	8a e7       	ldi	r24, 0x7A	; 122
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
                         state=1;
     4b6:	c0 2f       	mov	r28, r16
     4b8:	d1 2f       	mov	r29, r17
     4ba:	07 c0       	rjmp	.+14     	; 0x4ca <__FUSE_REGION_LENGTH__+0xca>
                      }
                  else if (in==ok)
     4bc:	20 91 62 00 	lds	r18, 0x0062
     4c0:	30 91 63 00 	lds	r19, 0x0063
     4c4:	82 17       	cp	r24, r18
     4c6:	93 07       	cpc	r25, r19
     4c8:	51 f0       	breq	.+20     	; 0x4de <__FUSE_REGION_LENGTH__+0xde>
     4ca:	8f ef       	ldi	r24, 0xFF	; 255
     4cc:	95 ea       	ldi	r25, 0xA5	; 165
     4ce:	2e e0       	ldi	r18, 0x0E	; 14
     4d0:	81 50       	subi	r24, 0x01	; 1
     4d2:	90 40       	sbci	r25, 0x00	; 0
     4d4:	20 40       	sbci	r18, 0x00	; 0
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__FUSE_REGION_LENGTH__+0xd0>
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <__FUSE_REGION_LENGTH__+0xda>
     4da:	00 00       	nop
     4dc:	99 cf       	rjmp	.-206    	; 0x410 <__FUSE_REGION_LENGTH__+0x10>

                   _delay_ms(DELAY_TIME_LOOP);
				  }
               }
				
       }
     4de:	ce 01       	movw	r24, r28
     4e0:	df 91       	pop	r29
     4e2:	cf 91       	pop	r28
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	08 95       	ret

000004ee <_Z18database_init_testv>:
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	cd b7       	in	r28, 0x3d	; 61
     4f4:	de b7       	in	r29, 0x3e	; 62
     4f6:	c4 55       	subi	r28, 0x54	; 84
     4f8:	d1 09       	sbc	r29, r1
     4fa:	0f b6       	in	r0, 0x3f	; 63
     4fc:	f8 94       	cli
     4fe:	de bf       	out	0x3e, r29	; 62
     500:	0f be       	out	0x3f, r0	; 63
     502:	cd bf       	out	0x3d, r28	; 61
     504:	81 e0       	ldi	r24, 0x01	; 1
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	9a af       	std	Y+58, r25	; 0x3a
     50a:	89 af       	std	Y+57, r24	; 0x39
     50c:	25 e0       	ldi	r18, 0x05	; 5
     50e:	e1 ec       	ldi	r30, 0xC1	; 193
     510:	f0 e0       	ldi	r31, 0x00	; 0
     512:	de 01       	movw	r26, r28
     514:	db 96       	adiw	r26, 0x3b	; 59
     516:	01 90       	ld	r0, Z+
     518:	0d 92       	st	X+, r0
     51a:	2a 95       	dec	r18
     51c:	e1 f7       	brne	.-8      	; 0x516 <_Z18database_init_testv+0x28>
     51e:	24 e6       	ldi	r18, 0x64	; 100
     520:	30 e0       	ldi	r19, 0x00	; 0
     522:	61 96       	adiw	r28, 0x11	; 17
     524:	3f af       	std	Y+63, r19	; 0x3f
     526:	2e af       	std	Y+62, r18	; 0x3e
     528:	61 97       	sbiw	r28, 0x11	; 17
     52a:	63 96       	adiw	r28, 0x13	; 19
     52c:	1f ae       	std	Y+63, r1	; 0x3f
     52e:	1e ae       	std	Y+62, r1	; 0x3e
     530:	63 97       	sbiw	r28, 0x13	; 19
     532:	65 96       	adiw	r28, 0x15	; 21
     534:	1f ae       	std	Y+63, r1	; 0x3f
     536:	1e ae       	std	Y+62, r1	; 0x3e
     538:	65 97       	sbiw	r28, 0x15	; 21
     53a:	2c e1       	ldi	r18, 0x1C	; 28
     53c:	fe 01       	movw	r30, r28
     53e:	f9 96       	adiw	r30, 0x39	; 57
     540:	aa eb       	ldi	r26, 0xBA	; 186
     542:	b2 e0       	ldi	r27, 0x02	; 2
     544:	01 90       	ld	r0, Z+
     546:	0d 92       	st	X+, r0
     548:	2a 95       	dec	r18
     54a:	e1 f7       	brne	.-8      	; 0x544 <_Z18database_init_testv+0x56>
     54c:	22 e0       	ldi	r18, 0x02	; 2
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	3e 8f       	std	Y+30, r19	; 0x1e
     552:	2d 8f       	std	Y+29, r18	; 0x1d
     554:	25 e0       	ldi	r18, 0x05	; 5
     556:	e6 ec       	ldi	r30, 0xC6	; 198
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	de 01       	movw	r26, r28
     55c:	5f 96       	adiw	r26, 0x1f	; 31
     55e:	01 90       	ld	r0, Z+
     560:	0d 92       	st	X+, r0
     562:	2a 95       	dec	r18
     564:	e1 f7       	brne	.-8      	; 0x55e <_Z18database_init_testv+0x70>
     566:	28 ec       	ldi	r18, 0xC8	; 200
     568:	30 e0       	ldi	r19, 0x00	; 0
     56a:	3c ab       	std	Y+52, r19	; 0x34
     56c:	2b ab       	std	Y+51, r18	; 0x33
     56e:	1e aa       	std	Y+54, r1	; 0x36
     570:	1d aa       	std	Y+53, r1	; 0x35
     572:	98 af       	std	Y+56, r25	; 0x38
     574:	8f ab       	std	Y+55, r24	; 0x37
     576:	8c e1       	ldi	r24, 0x1C	; 28
     578:	fe 01       	movw	r30, r28
     57a:	7d 96       	adiw	r30, 0x1d	; 29
     57c:	a6 ed       	ldi	r26, 0xD6	; 214
     57e:	b2 e0       	ldi	r27, 0x02	; 2
     580:	01 90       	ld	r0, Z+
     582:	0d 92       	st	X+, r0
     584:	8a 95       	dec	r24
     586:	e1 f7       	brne	.-8      	; 0x580 <_Z18database_init_testv+0x92>
     588:	83 e0       	ldi	r24, 0x03	; 3
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01
     590:	85 e0       	ldi	r24, 0x05	; 5
     592:	e5 e8       	ldi	r30, 0x85	; 133
     594:	f0 e0       	ldi	r31, 0x00	; 0
     596:	de 01       	movw	r26, r28
     598:	13 96       	adiw	r26, 0x03	; 3
     59a:	01 90       	ld	r0, Z+
     59c:	0d 92       	st	X+, r0
     59e:	8a 95       	dec	r24
     5a0:	e1 f7       	brne	.-8      	; 0x59a <_Z18database_init_testv+0xac>
     5a2:	8c e2       	ldi	r24, 0x2C	; 44
     5a4:	91 e0       	ldi	r25, 0x01	; 1
     5a6:	98 8f       	std	Y+24, r25	; 0x18
     5a8:	8f 8b       	std	Y+23, r24	; 0x17
     5aa:	1a 8e       	std	Y+26, r1	; 0x1a
     5ac:	19 8e       	std	Y+25, r1	; 0x19
     5ae:	1c 8e       	std	Y+28, r1	; 0x1c
     5b0:	1b 8e       	std	Y+27, r1	; 0x1b
     5b2:	8c e1       	ldi	r24, 0x1C	; 28
     5b4:	fe 01       	movw	r30, r28
     5b6:	31 96       	adiw	r30, 0x01	; 1
     5b8:	a2 ef       	ldi	r26, 0xF2	; 242
     5ba:	b2 e0       	ldi	r27, 0x02	; 2
     5bc:	01 90       	ld	r0, Z+
     5be:	0d 92       	st	X+, r0
     5c0:	8a 95       	dec	r24
     5c2:	e1 f7       	brne	.-8      	; 0x5bc <_Z18database_init_testv+0xce>
     5c4:	cc 5a       	subi	r28, 0xAC	; 172
     5c6:	df 4f       	sbci	r29, 0xFF	; 255
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	08 95       	ret

000005d8 <_Z13get_info_testv>:
     5d8:	8c e1       	ldi	r24, 0x1C	; 28
     5da:	ea eb       	ldi	r30, 0xBA	; 186
     5dc:	f2 e0       	ldi	r31, 0x02	; 2
     5de:	a6 e1       	ldi	r26, 0x16	; 22
     5e0:	b1 e0       	ldi	r27, 0x01	; 1
     5e2:	01 90       	ld	r0, Z+
     5e4:	0d 92       	st	X+, r0
     5e6:	8a 95       	dec	r24
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <_Z13get_info_testv+0xa>
     5ea:	8c e1       	ldi	r24, 0x1C	; 28
     5ec:	e6 ed       	ldi	r30, 0xD6	; 214
     5ee:	f2 e0       	ldi	r31, 0x02	; 2
     5f0:	a2 e3       	ldi	r26, 0x32	; 50
     5f2:	b1 e0       	ldi	r27, 0x01	; 1
     5f4:	01 90       	ld	r0, Z+
     5f6:	0d 92       	st	X+, r0
     5f8:	8a 95       	dec	r24
     5fa:	e1 f7       	brne	.-8      	; 0x5f4 <_Z13get_info_testv+0x1c>
     5fc:	8c e1       	ldi	r24, 0x1C	; 28
     5fe:	e2 ef       	ldi	r30, 0xF2	; 242
     600:	f2 e0       	ldi	r31, 0x02	; 2
     602:	ae e4       	ldi	r26, 0x4E	; 78
     604:	b1 e0       	ldi	r27, 0x01	; 1
     606:	01 90       	ld	r0, Z+
     608:	0d 92       	st	X+, r0
     60a:	8a 95       	dec	r24
     60c:	e1 f7       	brne	.-8      	; 0x606 <_Z13get_info_testv+0x2e>
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	90 93 5f 04 	sts	0x045F, r25
     616:	80 93 5e 04 	sts	0x045E, r24
     61a:	08 95       	ret

0000061c <_Z14send_info_testv>:
     61c:	8c e1       	ldi	r24, 0x1C	; 28
     61e:	e6 e1       	ldi	r30, 0x16	; 22
     620:	f1 e0       	ldi	r31, 0x01	; 1
     622:	aa eb       	ldi	r26, 0xBA	; 186
     624:	b2 e0       	ldi	r27, 0x02	; 2
     626:	01 90       	ld	r0, Z+
     628:	0d 92       	st	X+, r0
     62a:	8a 95       	dec	r24
     62c:	e1 f7       	brne	.-8      	; 0x626 <_Z14send_info_testv+0xa>
     62e:	8c e1       	ldi	r24, 0x1C	; 28
     630:	e2 e3       	ldi	r30, 0x32	; 50
     632:	f1 e0       	ldi	r31, 0x01	; 1
     634:	a6 ed       	ldi	r26, 0xD6	; 214
     636:	b2 e0       	ldi	r27, 0x02	; 2
     638:	01 90       	ld	r0, Z+
     63a:	0d 92       	st	X+, r0
     63c:	8a 95       	dec	r24
     63e:	e1 f7       	brne	.-8      	; 0x638 <_Z14send_info_testv+0x1c>
     640:	8c e1       	ldi	r24, 0x1C	; 28
     642:	ee e4       	ldi	r30, 0x4E	; 78
     644:	f1 e0       	ldi	r31, 0x01	; 1
     646:	a2 ef       	ldi	r26, 0xF2	; 242
     648:	b2 e0       	ldi	r27, 0x02	; 2
     64a:	01 90       	ld	r0, Z+
     64c:	0d 92       	st	X+, r0
     64e:	8a 95       	dec	r24
     650:	e1 f7       	brne	.-8      	; 0x64a <_Z14send_info_testv+0x2e>
     652:	08 95       	ret

00000654 <_Z11select_foodv>:
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	0e 94 29 01 	call	0x252	; 0x252 <_Z12wait_messagev>
     65e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z13get_info_testv>
     662:	2f ef       	ldi	r18, 0xFF	; 255
     664:	85 ea       	ldi	r24, 0xA5	; 165
     666:	9e e0       	ldi	r25, 0x0E	; 14
     668:	21 50       	subi	r18, 0x01	; 1
     66a:	80 40       	sbci	r24, 0x00	; 0
     66c:	90 40       	sbci	r25, 0x00	; 0
     66e:	e1 f7       	brne	.-8      	; 0x668 <_Z11select_foodv+0x14>
     670:	00 c0       	rjmp	.+0      	; 0x672 <_Z11select_foodv+0x1e>
     672:	00 00       	nop
     674:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
     678:	85 e8       	ldi	r24, 0x85	; 133
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     680:	60 e0       	ldi	r22, 0x00	; 0
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	88 e0       	ldi	r24, 0x08	; 8
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     68c:	8b ec       	ldi	r24, 0xCB	; 203
     68e:	90 e0       	ldi	r25, 0x00	; 0
     690:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	70 e0       	ldi	r23, 0x00	; 0
     698:	8e e0       	ldi	r24, 0x0E	; 14
     69a:	90 e0       	ldi	r25, 0x00	; 0
     69c:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     6a0:	8b eb       	ldi	r24, 0xBB	; 187
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     6a8:	61 e0       	ldi	r22, 0x01	; 1
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	90 e0       	ldi	r25, 0x00	; 0
     6b0:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     6b4:	88 e1       	ldi	r24, 0x18	; 24
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     6bc:	61 e0       	ldi	r22, 0x01	; 1
     6be:	70 e0       	ldi	r23, 0x00	; 0
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     6c8:	c6 e1       	ldi	r28, 0x16	; 22
     6ca:	d1 e0       	ldi	r29, 0x01	; 1
     6cc:	8e 89       	ldd	r24, Y+22	; 0x16
     6ce:	9f 89       	ldd	r25, Y+23	; 0x17
     6d0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
     6d4:	61 e0       	ldi	r22, 0x01	; 1
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	8e e0       	ldi	r24, 0x0E	; 14
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     6e0:	88 8d       	ldd	r24, Y+24	; 0x18
     6e2:	99 8d       	ldd	r25, Y+25	; 0x19
     6e4:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
     6e8:	c0 e0       	ldi	r28, 0x00	; 0
     6ea:	d0 e0       	ldi	r29, 0x00	; 0
     6ec:	1c e1       	ldi	r17, 0x1C	; 28
     6ee:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     6f2:	89 2b       	or	r24, r25
     6f4:	e1 f3       	breq	.-8      	; 0x6ee <_Z11select_foodv+0x9a>
     6f6:	2f ef       	ldi	r18, 0xFF	; 255
     6f8:	86 e7       	ldi	r24, 0x76	; 118
     6fa:	91 e0       	ldi	r25, 0x01	; 1
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	80 40       	sbci	r24, 0x00	; 0
     700:	90 40       	sbci	r25, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <_Z11select_foodv+0xa8>
     704:	00 c0       	rjmp	.+0      	; 0x706 <_Z11select_foodv+0xb2>
     706:	00 00       	nop
     708:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     70c:	20 91 6c 00 	lds	r18, 0x006C
     710:	30 91 6d 00 	lds	r19, 0x006D
     714:	82 17       	cp	r24, r18
     716:	93 07       	cpc	r25, r19
     718:	69 f4       	brne	.+26     	; 0x734 <_Z11select_foodv+0xe0>
     71a:	20 97       	sbiw	r28, 0x00	; 0
     71c:	31 f4       	brne	.+12     	; 0x72a <_Z11select_foodv+0xd6>
     71e:	c0 91 5e 04 	lds	r28, 0x045E
     722:	d0 91 5f 04 	lds	r29, 0x045F
     726:	21 97       	sbiw	r28, 0x01	; 1
     728:	01 c0       	rjmp	.+2      	; 0x72c <_Z11select_foodv+0xd8>
     72a:	21 97       	sbiw	r28, 0x01	; 1
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     732:	dd c0       	rjmp	.+442    	; 0x8ee <__stack+0x8f>
     734:	20 91 6a 00 	lds	r18, 0x006A
     738:	30 91 6b 00 	lds	r19, 0x006B
     73c:	82 17       	cp	r24, r18
     73e:	93 07       	cpc	r25, r19
     740:	81 f4       	brne	.+32     	; 0x762 <_Z11select_foodv+0x10e>
     742:	80 91 5e 04 	lds	r24, 0x045E
     746:	90 91 5f 04 	lds	r25, 0x045F
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	8c 17       	cp	r24, r28
     74e:	9d 07       	cpc	r25, r29
     750:	11 f0       	breq	.+4      	; 0x756 <_Z11select_foodv+0x102>
     752:	21 96       	adiw	r28, 0x01	; 1
     754:	02 c0       	rjmp	.+4      	; 0x75a <_Z11select_foodv+0x106>
     756:	c0 e0       	ldi	r28, 0x00	; 0
     758:	d0 e0       	ldi	r29, 0x00	; 0
     75a:	ce 01       	movw	r24, r28
     75c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     760:	c6 c0       	rjmp	.+396    	; 0x8ee <__stack+0x8f>
     762:	20 91 66 00 	lds	r18, 0x0066
     766:	30 91 67 00 	lds	r19, 0x0067
     76a:	82 17       	cp	r24, r18
     76c:	93 07       	cpc	r25, r19
     76e:	d1 f4       	brne	.+52     	; 0x7a4 <_Z11select_foodv+0x150>
     770:	1c 9f       	mul	r17, r28
     772:	f0 01       	movw	r30, r0
     774:	1d 9f       	mul	r17, r29
     776:	f0 0d       	add	r31, r0
     778:	11 24       	eor	r1, r1
     77a:	ea 5e       	subi	r30, 0xEA	; 234
     77c:	fe 4f       	sbci	r31, 0xFE	; 254
     77e:	80 8d       	ldd	r24, Z+24	; 0x18
     780:	91 8d       	ldd	r25, Z+25	; 0x19
     782:	00 97       	sbiw	r24, 0x00	; 0
     784:	09 f4       	brne	.+2      	; 0x788 <_Z11select_foodv+0x134>
     786:	b3 c0       	rjmp	.+358    	; 0x8ee <__stack+0x8f>
     788:	1c 9f       	mul	r17, r28
     78a:	f0 01       	movw	r30, r0
     78c:	1d 9f       	mul	r17, r29
     78e:	f0 0d       	add	r31, r0
     790:	11 24       	eor	r1, r1
     792:	ea 5e       	subi	r30, 0xEA	; 234
     794:	fe 4f       	sbci	r31, 0xFE	; 254
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	91 8f       	std	Z+25, r25	; 0x19
     79a:	80 8f       	std	Z+24, r24	; 0x18
     79c:	ce 01       	movw	r24, r28
     79e:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     7a2:	a5 c0       	rjmp	.+330    	; 0x8ee <__stack+0x8f>
     7a4:	20 91 68 00 	lds	r18, 0x0068
     7a8:	30 91 69 00 	lds	r19, 0x0069
     7ac:	82 17       	cp	r24, r18
     7ae:	93 07       	cpc	r25, r19
     7b0:	81 f4       	brne	.+32     	; 0x7d2 <_Z11select_foodv+0x17e>
     7b2:	1c 9f       	mul	r17, r28
     7b4:	f0 01       	movw	r30, r0
     7b6:	1d 9f       	mul	r17, r29
     7b8:	f0 0d       	add	r31, r0
     7ba:	11 24       	eor	r1, r1
     7bc:	ea 5e       	subi	r30, 0xEA	; 234
     7be:	fe 4f       	sbci	r31, 0xFE	; 254
     7c0:	80 8d       	ldd	r24, Z+24	; 0x18
     7c2:	91 8d       	ldd	r25, Z+25	; 0x19
     7c4:	01 96       	adiw	r24, 0x01	; 1
     7c6:	91 8f       	std	Z+25, r25	; 0x19
     7c8:	80 8f       	std	Z+24, r24	; 0x18
     7ca:	ce 01       	movw	r24, r28
     7cc:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     7d0:	8e c0       	rjmp	.+284    	; 0x8ee <__stack+0x8f>
     7d2:	20 91 64 00 	lds	r18, 0x0064
     7d6:	30 91 65 00 	lds	r19, 0x0065
     7da:	82 17       	cp	r24, r18
     7dc:	93 07       	cpc	r25, r19
     7de:	69 f5       	brne	.+90     	; 0x83a <_Z11select_foodv+0x1e6>
     7e0:	81 ed       	ldi	r24, 0xD1	; 209
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     7e8:	89 2b       	or	r24, r25
     7ea:	49 f0       	breq	.+18     	; 0x7fe <_Z11select_foodv+0x1aa>
     7ec:	1c 9f       	mul	r17, r28
     7ee:	f0 01       	movw	r30, r0
     7f0:	1d 9f       	mul	r17, r29
     7f2:	f0 0d       	add	r31, r0
     7f4:	11 24       	eor	r1, r1
     7f6:	ea 5e       	subi	r30, 0xEA	; 234
     7f8:	fe 4f       	sbci	r31, 0xFE	; 254
     7fa:	11 8e       	std	Z+25, r1	; 0x19
     7fc:	10 8e       	std	Z+24, r1	; 0x18
     7fe:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
     802:	85 e8       	ldi	r24, 0x85	; 133
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     80a:	60 e0       	ldi	r22, 0x00	; 0
     80c:	70 e0       	ldi	r23, 0x00	; 0
     80e:	88 e0       	ldi	r24, 0x08	; 8
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     816:	8b ec       	ldi	r24, 0xCB	; 203
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     81e:	60 e0       	ldi	r22, 0x00	; 0
     820:	70 e0       	ldi	r23, 0x00	; 0
     822:	8e e0       	ldi	r24, 0x0E	; 14
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     82a:	8b eb       	ldi	r24, 0xBB	; 187
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     832:	ce 01       	movw	r24, r28
     834:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     838:	5a c0       	rjmp	.+180    	; 0x8ee <__stack+0x8f>
     83a:	20 91 62 00 	lds	r18, 0x0062
     83e:	30 91 63 00 	lds	r19, 0x0063
     842:	82 17       	cp	r24, r18
     844:	93 07       	cpc	r25, r19
     846:	49 f5       	brne	.+82     	; 0x89a <__stack+0x3b>
     848:	82 ee       	ldi	r24, 0xE2	; 226
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     850:	89 2b       	or	r24, r25
     852:	29 f0       	breq	.+10     	; 0x85e <_Z11select_foodv+0x20a>
     854:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z14send_info_testv>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	90 e0       	ldi	r25, 0x00	; 0
     85c:	54 c0       	rjmp	.+168    	; 0x906 <__stack+0xa7>
     85e:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
     862:	85 e8       	ldi	r24, 0x85	; 133
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     86a:	60 e0       	ldi	r22, 0x00	; 0
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	88 e0       	ldi	r24, 0x08	; 8
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     876:	8b ec       	ldi	r24, 0xCB	; 203
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     87e:	60 e0       	ldi	r22, 0x00	; 0
     880:	70 e0       	ldi	r23, 0x00	; 0
     882:	8e e0       	ldi	r24, 0x0E	; 14
     884:	90 e0       	ldi	r25, 0x00	; 0
     886:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     88a:	8b eb       	ldi	r24, 0xBB	; 187
     88c:	90 e0       	ldi	r25, 0x00	; 0
     88e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     892:	ce 01       	movw	r24, r28
     894:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     898:	2a c0       	rjmp	.+84     	; 0x8ee <__stack+0x8f>
     89a:	20 91 60 00 	lds	r18, 0x0060
     89e:	30 91 61 00 	lds	r19, 0x0061
     8a2:	82 17       	cp	r24, r18
     8a4:	93 07       	cpc	r25, r19
     8a6:	19 f5       	brne	.+70     	; 0x8ee <__stack+0x8f>
     8a8:	83 ef       	ldi	r24, 0xF3	; 243
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     8b0:	89 2b       	or	r24, r25
     8b2:	39 f5       	brne	.+78     	; 0x902 <__stack+0xa3>
     8b4:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
     8b8:	85 e8       	ldi	r24, 0x85	; 133
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     8c0:	60 e0       	ldi	r22, 0x00	; 0
     8c2:	70 e0       	ldi	r23, 0x00	; 0
     8c4:	88 e0       	ldi	r24, 0x08	; 8
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     8cc:	8b ec       	ldi	r24, 0xCB	; 203
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	8e e0       	ldi	r24, 0x0E	; 14
     8da:	90 e0       	ldi	r25, 0x00	; 0
     8dc:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     8e0:	8b eb       	ldi	r24, 0xBB	; 187
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     8e8:	ce 01       	movw	r24, r28
     8ea:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     8ee:	2f ef       	ldi	r18, 0xFF	; 255
     8f0:	85 ea       	ldi	r24, 0xA5	; 165
     8f2:	9e e0       	ldi	r25, 0x0E	; 14
     8f4:	21 50       	subi	r18, 0x01	; 1
     8f6:	80 40       	sbci	r24, 0x00	; 0
     8f8:	90 40       	sbci	r25, 0x00	; 0
     8fa:	e1 f7       	brne	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	00 c0       	rjmp	.+0      	; 0x8fe <__stack+0x9f>
     8fe:	00 00       	nop
     900:	f6 ce       	rjmp	.-532    	; 0x6ee <_Z11select_foodv+0x9a>
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	08 95       	ret

0000090e <_Z13selected_foodv>:
     90e:	cf 92       	push	r12
     910:	df 92       	push	r13
     912:	ef 92       	push	r14
     914:	ff 92       	push	r15
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	cf 93       	push	r28
     91c:	df 93       	push	r29
     91e:	cd b7       	in	r28, 0x3d	; 61
     920:	de b7       	in	r29, 0x3e	; 62
     922:	c8 5c       	subi	r28, 0xC8	; 200
     924:	d1 09       	sbc	r29, r1
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	0e 94 29 01 	call	0x252	; 0x252 <_Z12wait_messagev>
     934:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z13get_info_testv>
     938:	2f ef       	ldi	r18, 0xFF	; 255
     93a:	35 ea       	ldi	r19, 0xA5	; 165
     93c:	8e e0       	ldi	r24, 0x0E	; 14
     93e:	21 50       	subi	r18, 0x01	; 1
     940:	30 40       	sbci	r19, 0x00	; 0
     942:	80 40       	sbci	r24, 0x00	; 0
     944:	e1 f7       	brne	.-8      	; 0x93e <_Z13selected_foodv+0x30>
     946:	00 c0       	rjmp	.+0      	; 0x948 <_Z13selected_foodv+0x3a>
     948:	00 00       	nop
     94a:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
     94e:	40 91 5e 04 	lds	r20, 0x045E
     952:	50 91 5f 04 	lds	r21, 0x045F
     956:	14 16       	cp	r1, r20
     958:	15 06       	cpc	r1, r21
     95a:	04 f5       	brge	.+64     	; 0x99c <_Z13selected_foodv+0x8e>
     95c:	ee e2       	ldi	r30, 0x2E	; 46
     95e:	f1 e0       	ldi	r31, 0x01	; 1
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	00 e0       	ldi	r16, 0x00	; 0
     966:	10 e0       	ldi	r17, 0x00	; 0
     968:	20 81       	ld	r18, Z
     96a:	31 81       	ldd	r19, Z+1	; 0x01
     96c:	12 16       	cp	r1, r18
     96e:	13 06       	cpc	r1, r19
     970:	6c f4       	brge	.+26     	; 0x98c <_Z13selected_foodv+0x7e>
     972:	d8 01       	movw	r26, r16
     974:	aa 0f       	add	r26, r26
     976:	bb 1f       	adc	r27, r27
     978:	21 e0       	ldi	r18, 0x01	; 1
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	2c 0f       	add	r18, r28
     97e:	3d 1f       	adc	r19, r29
     980:	a2 0f       	add	r26, r18
     982:	b3 1f       	adc	r27, r19
     984:	8d 93       	st	X+, r24
     986:	9c 93       	st	X, r25
     988:	0f 5f       	subi	r16, 0xFF	; 255
     98a:	1f 4f       	sbci	r17, 0xFF	; 255
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	7c 96       	adiw	r30, 0x1c	; 28
     990:	84 17       	cp	r24, r20
     992:	95 07       	cpc	r25, r21
     994:	4c f3       	brlt	.-46     	; 0x968 <_Z13selected_foodv+0x5a>
     996:	01 15       	cp	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	79 f5       	brne	.+94     	; 0x9fa <_Z13selected_foodv+0xec>
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     9a4:	61 e0       	ldi	r22, 0x01	; 1
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	86 e0       	ldi	r24, 0x06	; 6
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     9b0:	82 eb       	ldi	r24, 0xB2	; 178
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     9b8:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     9bc:	89 2b       	or	r24, r25
     9be:	e1 f3       	breq	.-8      	; 0x9b8 <_Z13selected_foodv+0xaa>
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	86 e7       	ldi	r24, 0x76	; 118
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	31 50       	subi	r19, 0x01	; 1
     9c8:	80 40       	sbci	r24, 0x00	; 0
     9ca:	90 40       	sbci	r25, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <_Z13selected_foodv+0xb8>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <_Z13selected_foodv+0xc2>
     9d0:	00 00       	nop
     9d2:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     9d6:	20 91 62 00 	lds	r18, 0x0062
     9da:	30 91 63 00 	lds	r19, 0x0063
     9de:	82 17       	cp	r24, r18
     9e0:	93 07       	cpc	r25, r19
     9e2:	09 f4       	brne	.+2      	; 0x9e6 <_Z13selected_foodv+0xd8>
     9e4:	ae c0       	rjmp	.+348    	; 0xb42 <_Z13selected_foodv+0x234>
     9e6:	ef ef       	ldi	r30, 0xFF	; 255
     9e8:	f5 ea       	ldi	r31, 0xA5	; 165
     9ea:	2e e0       	ldi	r18, 0x0E	; 14
     9ec:	e1 50       	subi	r30, 0x01	; 1
     9ee:	f0 40       	sbci	r31, 0x00	; 0
     9f0:	20 40       	sbci	r18, 0x00	; 0
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <_Z13selected_foodv+0xde>
     9f4:	00 c0       	rjmp	.+0      	; 0x9f6 <_Z13selected_foodv+0xe8>
     9f6:	00 00       	nop
     9f8:	df cf       	rjmp	.-66     	; 0x9b8 <_Z13selected_foodv+0xaa>
     9fa:	85 e8       	ldi	r24, 0x85	; 133
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	70 e0       	ldi	r23, 0x00	; 0
     a06:	88 e0       	ldi	r24, 0x08	; 8
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     a0e:	8b ec       	ldi	r24, 0xCB	; 203
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	70 e0       	ldi	r23, 0x00	; 0
     a1a:	8e e0       	ldi	r24, 0x0E	; 14
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     a22:	8b eb       	ldi	r24, 0xBB	; 187
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     a2a:	61 e0       	ldi	r22, 0x01	; 1
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	80 e0       	ldi	r24, 0x00	; 0
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     a36:	89 81       	ldd	r24, Y+1	; 0x01
     a38:	9a 81       	ldd	r25, Y+2	; 0x02
     a3a:	2c e1       	ldi	r18, 0x1C	; 28
     a3c:	28 9f       	mul	r18, r24
     a3e:	70 01       	movw	r14, r0
     a40:	29 9f       	mul	r18, r25
     a42:	f0 0c       	add	r15, r0
     a44:	11 24       	eor	r1, r1
     a46:	c7 01       	movw	r24, r14
     a48:	88 5e       	subi	r24, 0xE8	; 232
     a4a:	9e 4f       	sbci	r25, 0xFE	; 254
     a4c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
     a50:	61 e0       	ldi	r22, 0x01	; 1
     a52:	70 e0       	ldi	r23, 0x00	; 0
     a54:	88 e0       	ldi	r24, 0x08	; 8
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     a5c:	c7 01       	movw	r24, r14
     a5e:	8a 5e       	subi	r24, 0xEA	; 234
     a60:	9e 4f       	sbci	r25, 0xFE	; 254
     a62:	7c 01       	movw	r14, r24
     a64:	fc 01       	movw	r30, r24
     a66:	86 89       	ldd	r24, Z+22	; 0x16
     a68:	97 89       	ldd	r25, Z+23	; 0x17
     a6a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
     a6e:	61 e0       	ldi	r22, 0x01	; 1
     a70:	70 e0       	ldi	r23, 0x00	; 0
     a72:	8e e0       	ldi	r24, 0x0E	; 14
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
     a7a:	f7 01       	movw	r30, r14
     a7c:	80 8d       	ldd	r24, Z+24	; 0x18
     a7e:	91 8d       	ldd	r25, Z+25	; 0x19
     a80:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
     a84:	e1 2c       	mov	r14, r1
     a86:	f1 2c       	mov	r15, r1
     a88:	01 50       	subi	r16, 0x01	; 1
     a8a:	11 09       	sbc	r17, r1
     a8c:	c1 2c       	mov	r12, r1
     a8e:	d1 2c       	mov	r13, r1
     a90:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     a94:	89 2b       	or	r24, r25
     a96:	e1 f3       	breq	.-8      	; 0xa90 <_Z13selected_foodv+0x182>
     a98:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
     a9c:	20 91 6c 00 	lds	r18, 0x006C
     aa0:	30 91 6d 00 	lds	r19, 0x006D
     aa4:	82 17       	cp	r24, r18
     aa6:	93 07       	cpc	r25, r19
     aa8:	b1 f4       	brne	.+44     	; 0xad6 <_Z13selected_foodv+0x1c8>
     aaa:	e1 14       	cp	r14, r1
     aac:	f1 04       	cpc	r15, r1
     aae:	11 f4       	brne	.+4      	; 0xab4 <_Z13selected_foodv+0x1a6>
     ab0:	78 01       	movw	r14, r16
     ab2:	03 c0       	rjmp	.+6      	; 0xaba <_Z13selected_foodv+0x1ac>
     ab4:	f1 e0       	ldi	r31, 0x01	; 1
     ab6:	ef 1a       	sub	r14, r31
     ab8:	f1 08       	sbc	r15, r1
     aba:	f7 01       	movw	r30, r14
     abc:	ee 0f       	add	r30, r30
     abe:	ff 1f       	adc	r31, r31
     ac0:	21 e0       	ldi	r18, 0x01	; 1
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	2c 0f       	add	r18, r28
     ac6:	3d 1f       	adc	r19, r29
     ac8:	e2 0f       	add	r30, r18
     aca:	f3 1f       	adc	r31, r19
     acc:	80 81       	ld	r24, Z
     ace:	91 81       	ldd	r25, Z+1	; 0x01
     ad0:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     ad4:	2c c0       	rjmp	.+88     	; 0xb2e <_Z13selected_foodv+0x220>
     ad6:	20 91 6a 00 	lds	r18, 0x006A
     ada:	30 91 6b 00 	lds	r19, 0x006B
     ade:	82 17       	cp	r24, r18
     ae0:	93 07       	cpc	r25, r19
     ae2:	b9 f4       	brne	.+46     	; 0xb12 <_Z13selected_foodv+0x204>
     ae4:	e0 16       	cp	r14, r16
     ae6:	f1 06       	cpc	r15, r17
     ae8:	21 f0       	breq	.+8      	; 0xaf2 <_Z13selected_foodv+0x1e4>
     aea:	3f ef       	ldi	r19, 0xFF	; 255
     aec:	e3 1a       	sub	r14, r19
     aee:	f3 0a       	sbc	r15, r19
     af0:	02 c0       	rjmp	.+4      	; 0xaf6 <_Z13selected_foodv+0x1e8>
     af2:	ec 2c       	mov	r14, r12
     af4:	fd 2c       	mov	r15, r13
     af6:	f7 01       	movw	r30, r14
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	81 e0       	ldi	r24, 0x01	; 1
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	8c 0f       	add	r24, r28
     b02:	9d 1f       	adc	r25, r29
     b04:	e8 0f       	add	r30, r24
     b06:	f9 1f       	adc	r31, r25
     b08:	80 81       	ld	r24, Z
     b0a:	91 81       	ldd	r25, Z+1	; 0x01
     b0c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     b10:	0e c0       	rjmp	.+28     	; 0xb2e <_Z13selected_foodv+0x220>
     b12:	20 91 62 00 	lds	r18, 0x0062
     b16:	30 91 63 00 	lds	r19, 0x0063
     b1a:	82 17       	cp	r24, r18
     b1c:	93 07       	cpc	r25, r19
     b1e:	89 f0       	breq	.+34     	; 0xb42 <_Z13selected_foodv+0x234>
     b20:	20 91 60 00 	lds	r18, 0x0060
     b24:	30 91 61 00 	lds	r19, 0x0061
     b28:	82 17       	cp	r24, r18
     b2a:	93 07       	cpc	r25, r19
     b2c:	51 f0       	breq	.+20     	; 0xb42 <_Z13selected_foodv+0x234>
     b2e:	9f ef       	ldi	r25, 0xFF	; 255
     b30:	e5 ea       	ldi	r30, 0xA5	; 165
     b32:	fe e0       	ldi	r31, 0x0E	; 14
     b34:	91 50       	subi	r25, 0x01	; 1
     b36:	e0 40       	sbci	r30, 0x00	; 0
     b38:	f0 40       	sbci	r31, 0x00	; 0
     b3a:	e1 f7       	brne	.-8      	; 0xb34 <_Z13selected_foodv+0x226>
     b3c:	00 c0       	rjmp	.+0      	; 0xb3e <_Z13selected_foodv+0x230>
     b3e:	00 00       	nop
     b40:	a7 cf       	rjmp	.-178    	; 0xa90 <_Z13selected_foodv+0x182>
     b42:	c8 53       	subi	r28, 0x38	; 56
     b44:	df 4f       	sbci	r29, 0xFF	; 255
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	df 91       	pop	r29
     b52:	cf 91       	pop	r28
     b54:	1f 91       	pop	r17
     b56:	0f 91       	pop	r16
     b58:	ff 90       	pop	r15
     b5a:	ef 90       	pop	r14
     b5c:	df 90       	pop	r13
     b5e:	cf 90       	pop	r12
     b60:	08 95       	ret

00000b62 <_Z11change_foodv>:




void change_food()
{
     b62:	1f 93       	push	r17
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
	wait_message();
     b68:	0e 94 29 01 	call	0x252	; 0x252 <_Z12wait_messagev>
	get_info_test();
     b6c:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <_Z13get_info_testv>
     b70:	2f ef       	ldi	r18, 0xFF	; 255
     b72:	85 ea       	ldi	r24, 0xA5	; 165
     b74:	9e e0       	ldi	r25, 0x0E	; 14
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	80 40       	sbci	r24, 0x00	; 0
     b7a:	90 40       	sbci	r25, 0x00	; 0
     b7c:	e1 f7       	brne	.-8      	; 0xb76 <_Z11change_foodv+0x14>
     b7e:	00 c0       	rjmp	.+0      	; 0xb80 <_Z11change_foodv+0x1e>
     b80:	00 00       	nop
	_delay_ms(DELAY_TIME_GET_INFO);
	lcd_clear();
     b82:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	lcd_puts("Food");
     b86:	85 e8       	ldi	r24, 0x85	; 133
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

	lcd_setCursor(8,0);
     b8e:	60 e0       	ldi	r22, 0x00	; 0
     b90:	70 e0       	ldi	r23, 0x00	; 0
     b92:	88 e0       	ldi	r24, 0x08	; 8
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
	lcd_puts("Price");
     b9a:	8b ec       	ldi	r24, 0xCB	; 203
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

	lcd_setCursor(14,0);
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	8e e0       	ldi	r24, 0x0E	; 14
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
	lcd_puts("No");
     bae:	8b eb       	ldi	r24, 0xBB	; 187
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

	int selected_pk=0;
	lcd_setCursor(0,1);
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>

	lcd_puts(food[selected_pk].name);
     bc2:	88 e1       	ldi	r24, 0x18	; 24
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

	lcd_setCursor(8,1);
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	88 e0       	ldi	r24, 0x08	; 8
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].price);
     bd6:	c6 e1       	ldi	r28, 0x16	; 22
     bd8:	d1 e0       	ldi	r29, 0x01	; 1
     bda:	8e 89       	ldd	r24, Y+22	; 0x16
     bdc:	9f 89       	ldd	r25, Y+23	; 0x17
     bde:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>

	lcd_setCursor(14,1);
     be2:	61 e0       	ldi	r22, 0x01	; 1
     be4:	70 e0       	ldi	r23, 0x00	; 0
     be6:	8e e0       	ldi	r24, 0x0E	; 14
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
	lcd_num(food[selected_pk].num);
     bee:	88 8d       	ldd	r24, Y+24	; 0x18
     bf0:	99 8d       	ldd	r25, Y+25	; 0x19
     bf2:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <_Z7lcd_numi>
	lcd_puts("Price");

	lcd_setCursor(14,0);
	lcd_puts("No");

	int selected_pk=0;
     bf6:	c0 e0       	ldi	r28, 0x00	; 0
     bf8:	d0 e0       	ldi	r29, 0x00	; 0

		}

		else if (in==del)
		{
			if (food[selected_pk].p==0)
     bfa:	1c e1       	ldi	r17, 0x1C	; 28
	lcd_num(food[selected_pk].num);


	while(1)
	{
		int in=input();
     bfc:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
		if(in !=0)
     c00:	89 2b       	or	r24, r25
     c02:	e1 f3       	breq	.-8      	; 0xbfc <_Z11change_foodv+0x9a>
     c04:	2f ef       	ldi	r18, 0xFF	; 255
     c06:	86 e7       	ldi	r24, 0x76	; 118
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	21 50       	subi	r18, 0x01	; 1
     c0c:	80 40       	sbci	r24, 0x00	; 0
     c0e:	90 40       	sbci	r25, 0x00	; 0
     c10:	e1 f7       	brne	.-8      	; 0xc0a <_Z11change_foodv+0xa8>
     c12:	00 c0       	rjmp	.+0      	; 0xc14 <_Z11change_foodv+0xb2>
     c14:	00 00       	nop
		{
			_delay_ms(DELAY_BOUNCE);
			in =input();
     c16:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
		if (in==up)
     c1a:	20 91 6c 00 	lds	r18, 0x006C
     c1e:	30 91 6d 00 	lds	r19, 0x006D
     c22:	82 17       	cp	r24, r18
     c24:	93 07       	cpc	r25, r19
     c26:	69 f4       	brne	.+26     	; 0xc42 <_Z11change_foodv+0xe0>
		{
			if (selected_pk==0)  selected_pk=num_of_food-1;
     c28:	20 97       	sbiw	r28, 0x00	; 0
     c2a:	31 f4       	brne	.+12     	; 0xc38 <_Z11change_foodv+0xd6>
     c2c:	c0 91 5e 04 	lds	r28, 0x045E
     c30:	d0 91 5f 04 	lds	r29, 0x045F
     c34:	21 97       	sbiw	r28, 0x01	; 1
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <_Z11change_foodv+0xd8>
			else selected_pk--;
     c38:	21 97       	sbiw	r28, 0x01	; 1
			select_food_print(selected_pk);
     c3a:	ce 01       	movw	r24, r28
     c3c:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     c40:	15 c1       	rjmp	.+554    	; 0xe6c <_Z11change_foodv+0x30a>

		}

		else if (in==down)
     c42:	20 91 6a 00 	lds	r18, 0x006A
     c46:	30 91 6b 00 	lds	r19, 0x006B
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	81 f4       	brne	.+32     	; 0xc70 <_Z11change_foodv+0x10e>
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     c50:	80 91 5e 04 	lds	r24, 0x045E
     c54:	90 91 5f 04 	lds	r25, 0x045F
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	8c 17       	cp	r24, r28
     c5c:	9d 07       	cpc	r25, r29
     c5e:	11 f0       	breq	.+4      	; 0xc64 <_Z11change_foodv+0x102>
			else selected_pk++;
     c60:	21 96       	adiw	r28, 0x01	; 1
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <_Z11change_foodv+0x106>

		}

		else if (in==down)
		{
			if (selected_pk==num_of_food-1) selected_pk=0;
     c64:	c0 e0       	ldi	r28, 0x00	; 0
     c66:	d0 e0       	ldi	r29, 0x00	; 0
			else selected_pk++;
			select_food_print(selected_pk);
     c68:	ce 01       	movw	r24, r28
     c6a:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     c6e:	fe c0       	rjmp	.+508    	; 0xe6c <_Z11change_foodv+0x30a>

		}

		else if (in==left)
     c70:	20 91 66 00 	lds	r18, 0x0066
     c74:	30 91 67 00 	lds	r19, 0x0067
     c78:	82 17       	cp	r24, r18
     c7a:	93 07       	cpc	r25, r19
     c7c:	09 f0       	breq	.+2      	; 0xc80 <_Z11change_foodv+0x11e>
     c7e:	45 c0       	rjmp	.+138    	; 0xd0a <_Z11change_foodv+0x1a8>
		{
			if (food[selected_pk].p==0)
     c80:	1c 9f       	mul	r17, r28
     c82:	f0 01       	movw	r30, r0
     c84:	1d 9f       	mul	r17, r29
     c86:	f0 0d       	add	r31, r0
     c88:	11 24       	eor	r1, r1
     c8a:	ea 5e       	subi	r30, 0xEA	; 234
     c8c:	fe 4f       	sbci	r31, 0xFE	; 254
     c8e:	82 8d       	ldd	r24, Z+26	; 0x1a
     c90:	93 8d       	ldd	r25, Z+27	; 0x1b
     c92:	89 2b       	or	r24, r25
     c94:	d1 f4       	brne	.+52     	; 0xcca <_Z11change_foodv+0x168>
			{
				if(food[selected_pk].num != 0)
     c96:	1c 9f       	mul	r17, r28
     c98:	f0 01       	movw	r30, r0
     c9a:	1d 9f       	mul	r17, r29
     c9c:	f0 0d       	add	r31, r0
     c9e:	11 24       	eor	r1, r1
     ca0:	ea 5e       	subi	r30, 0xEA	; 234
     ca2:	fe 4f       	sbci	r31, 0xFE	; 254
     ca4:	80 8d       	ldd	r24, Z+24	; 0x18
     ca6:	91 8d       	ldd	r25, Z+25	; 0x19
     ca8:	00 97       	sbiw	r24, 0x00	; 0
     caa:	09 f4       	brne	.+2      	; 0xcae <_Z11change_foodv+0x14c>
     cac:	df c0       	rjmp	.+446    	; 0xe6c <_Z11change_foodv+0x30a>
				{
					food[selected_pk].num--;
     cae:	1c 9f       	mul	r17, r28
     cb0:	f0 01       	movw	r30, r0
     cb2:	1d 9f       	mul	r17, r29
     cb4:	f0 0d       	add	r31, r0
     cb6:	11 24       	eor	r1, r1
     cb8:	ea 5e       	subi	r30, 0xEA	; 234
     cba:	fe 4f       	sbci	r31, 0xFE	; 254
     cbc:	01 97       	sbiw	r24, 0x01	; 1
     cbe:	91 8f       	std	Z+25, r25	; 0x19
     cc0:	80 8f       	std	Z+24, r24	; 0x18
					select_food_print(selected_pk);
     cc2:	ce 01       	movw	r24, r28
     cc4:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     cc8:	d1 c0       	rjmp	.+418    	; 0xe6c <_Z11change_foodv+0x30a>
				}

			}
			else
			{
				cannot_cancel();
     cca:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z13cannot_cancelv>
				lcd_clear();
     cce:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
				lcd_puts("Food");
     cd2:	85 e8       	ldi	r24, 0x85	; 133
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

				lcd_setCursor(8,0);
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	88 e0       	ldi	r24, 0x08	; 8
     ce0:	90 e0       	ldi	r25, 0x00	; 0
     ce2:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts("Price");
     ce6:	8b ec       	ldi	r24, 0xCB	; 203
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

				lcd_setCursor(14,0);
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	8e e0       	ldi	r24, 0x0E	; 14
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts("No");
     cfa:	8b eb       	ldi	r24, 0xBB	; 187
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

				select_food_print(selected_pk);
     d02:	ce 01       	movw	r24, r28
     d04:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     d08:	b1 c0       	rjmp	.+354    	; 0xe6c <_Z11change_foodv+0x30a>





		else if (in==right)
     d0a:	20 91 68 00 	lds	r18, 0x0068
     d0e:	30 91 69 00 	lds	r19, 0x0069
     d12:	82 17       	cp	r24, r18
     d14:	93 07       	cpc	r25, r19
     d16:	81 f4       	brne	.+32     	; 0xd38 <_Z11change_foodv+0x1d6>
		{
			food[selected_pk].num++;
     d18:	1c 9f       	mul	r17, r28
     d1a:	f0 01       	movw	r30, r0
     d1c:	1d 9f       	mul	r17, r29
     d1e:	f0 0d       	add	r31, r0
     d20:	11 24       	eor	r1, r1
     d22:	ea 5e       	subi	r30, 0xEA	; 234
     d24:	fe 4f       	sbci	r31, 0xFE	; 254
     d26:	80 8d       	ldd	r24, Z+24	; 0x18
     d28:	91 8d       	ldd	r25, Z+25	; 0x19
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	91 8f       	std	Z+25, r25	; 0x19
     d2e:	80 8f       	std	Z+24, r24	; 0x18
			select_food_print(selected_pk);
     d30:	ce 01       	movw	r24, r28
     d32:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     d36:	9a c0       	rjmp	.+308    	; 0xe6c <_Z11change_foodv+0x30a>

		}

		else if (in==del)
     d38:	20 91 64 00 	lds	r18, 0x0064
     d3c:	30 91 65 00 	lds	r19, 0x0065
     d40:	82 17       	cp	r24, r18
     d42:	93 07       	cpc	r25, r19
     d44:	d9 f5       	brne	.+118    	; 0xdbc <_Z11change_foodv+0x25a>
		{
			if (food[selected_pk].p==0)
     d46:	1c 9f       	mul	r17, r28
     d48:	f0 01       	movw	r30, r0
     d4a:	1d 9f       	mul	r17, r29
     d4c:	f0 0d       	add	r31, r0
     d4e:	11 24       	eor	r1, r1
     d50:	ea 5e       	subi	r30, 0xEA	; 234
     d52:	fe 4f       	sbci	r31, 0xFE	; 254
     d54:	82 8d       	ldd	r24, Z+26	; 0x1a
     d56:	93 8d       	ldd	r25, Z+27	; 0x1b
     d58:	89 2b       	or	r24, r25
     d5a:	81 f4       	brne	.+32     	; 0xd7c <_Z11change_foodv+0x21a>
			{
				if (display_message1("Set the no to 0?"))
     d5c:	81 ed       	ldi	r24, 0xD1	; 209
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     d64:	89 2b       	or	r24, r25
     d66:	61 f0       	breq	.+24     	; 0xd80 <_Z11change_foodv+0x21e>
				food[selected_pk].num=0;
     d68:	1c 9f       	mul	r17, r28
     d6a:	f0 01       	movw	r30, r0
     d6c:	1d 9f       	mul	r17, r29
     d6e:	f0 0d       	add	r31, r0
     d70:	11 24       	eor	r1, r1
     d72:	ea 5e       	subi	r30, 0xEA	; 234
     d74:	fe 4f       	sbci	r31, 0xFE	; 254
     d76:	11 8e       	std	Z+25, r1	; 0x19
     d78:	10 8e       	std	Z+24, r1	; 0x18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <_Z11change_foodv+0x21e>
			}
			else
			cannot_cancel();
     d7c:	0e 94 a7 01 	call	0x34e	; 0x34e <_Z13cannot_cancelv>

			lcd_clear();
     d80:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     d84:	85 e8       	ldi	r24, 0x85	; 133
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     d8c:	60 e0       	ldi	r22, 0x00	; 0
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	88 e0       	ldi	r24, 0x08	; 8
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("Price");
     d98:	8b ec       	ldi	r24, 0xCB	; 203
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     da0:	60 e0       	ldi	r22, 0x00	; 0
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	8e e0       	ldi	r24, 0x0E	; 14
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("No");
     dac:	8b eb       	ldi	r24, 0xBB	; 187
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     db4:	ce 01       	movw	r24, r28
     db6:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     dba:	58 c0       	rjmp	.+176    	; 0xe6c <_Z11change_foodv+0x30a>
		}

		else if (in==ok)
     dbc:	20 91 62 00 	lds	r18, 0x0062
     dc0:	30 91 63 00 	lds	r19, 0x0063
     dc4:	82 17       	cp	r24, r18
     dc6:	93 07       	cpc	r25, r19
     dc8:	39 f5       	brne	.+78     	; 0xe18 <_Z11change_foodv+0x2b6>
		{
			if (display_message1("Save the changes"))
     dca:	82 ee       	ldi	r24, 0xE2	; 226
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     dd2:	89 2b       	or	r24, r25
     dd4:	19 f0       	breq	.+6      	; 0xddc <_Z11change_foodv+0x27a>
			{
				send_info_test();
     dd6:	0e 94 0e 03 	call	0x61c	; 0x61c <_Z14send_info_testv>
				//_delay_ms(DELAY_TIME);
				return;
     dda:	52 c0       	rjmp	.+164    	; 0xe80 <_Z11change_foodv+0x31e>
			}

			lcd_clear();
     ddc:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     de0:	85 e8       	ldi	r24, 0x85	; 133
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	70 e0       	ldi	r23, 0x00	; 0
     dec:	88 e0       	ldi	r24, 0x08	; 8
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("Price");
     df4:	8b ec       	ldi	r24, 0xCB	; 203
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     dfc:	60 e0       	ldi	r22, 0x00	; 0
     dfe:	70 e0       	ldi	r23, 0x00	; 0
     e00:	8e e0       	ldi	r24, 0x0E	; 14
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("No");
     e08:	8b eb       	ldi	r24, 0xBB	; 187
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     e10:	ce 01       	movw	r24, r28
     e12:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     e16:	2a c0       	rjmp	.+84     	; 0xe6c <_Z11change_foodv+0x30a>

		}


		else if (in==back)
     e18:	20 91 60 00 	lds	r18, 0x0060
     e1c:	30 91 61 00 	lds	r19, 0x0061
     e20:	82 17       	cp	r24, r18
     e22:	93 07       	cpc	r25, r19
     e24:	19 f5       	brne	.+70     	; 0xe6c <_Z11change_foodv+0x30a>
		{
			if (display_message1("Discard Changes?"))
     e26:	83 ef       	ldi	r24, 0xF3	; 243
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 dd 01 	call	0x3ba	; 0x3ba <_Z16display_message1PKc>
     e2e:	89 2b       	or	r24, r25
     e30:	39 f5       	brne	.+78     	; 0xe80 <_Z11change_foodv+0x31e>
			{
				//_delay_ms(DELAY_TIME);
				return ;
			}

			lcd_clear();
     e32:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
			lcd_puts("Food");
     e36:	85 e8       	ldi	r24, 0x85	; 133
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(8,0);
     e3e:	60 e0       	ldi	r22, 0x00	; 0
     e40:	70 e0       	ldi	r23, 0x00	; 0
     e42:	88 e0       	ldi	r24, 0x08	; 8
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("Price");
     e4a:	8b ec       	ldi	r24, 0xCB	; 203
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			lcd_setCursor(14,0);
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	8e e0       	ldi	r24, 0x0E	; 14
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
			lcd_puts("No");
     e5e:	8b eb       	ldi	r24, 0xBB	; 187
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>

			select_food_print(selected_pk);
     e66:	ce 01       	movw	r24, r28
     e68:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z17select_food_printi>
     e6c:	2f ef       	ldi	r18, 0xFF	; 255
     e6e:	85 ea       	ldi	r24, 0xA5	; 165
     e70:	9e e0       	ldi	r25, 0x0E	; 14
     e72:	21 50       	subi	r18, 0x01	; 1
     e74:	80 40       	sbci	r24, 0x00	; 0
     e76:	90 40       	sbci	r25, 0x00	; 0
     e78:	e1 f7       	brne	.-8      	; 0xe72 <_Z11change_foodv+0x310>
     e7a:	00 c0       	rjmp	.+0      	; 0xe7c <_Z11change_foodv+0x31a>
     e7c:	00 00       	nop
     e7e:	be ce       	rjmp	.-644    	; 0xbfc <_Z11change_foodv+0x9a>

		_delay_ms(DELAY_TIME_LOOP);
		}
	}

}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	1f 91       	pop	r17
     e86:	08 95       	ret

00000e88 <_Z8mainmenuv>:
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	85 ea       	ldi	r24, 0xA5	; 165
     e8c:	9e e0       	ldi	r25, 0x0E	; 14
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <_Z8mainmenuv+0x6>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <_Z8mainmenuv+0x10>
     e98:	00 00       	nop


void mainmenu()
{
	_delay_ms(DELAY_TIME_STRAIGHT_START);
	lcd_clear();
     e9a:	0e 94 7a 00 	call	0xf4	; 0xf4 <_Z9lcd_clearv>
	num_of_food=0;
     e9e:	10 92 5f 04 	sts	0x045F, r1
     ea2:	10 92 5e 04 	sts	0x045E, r1
	int state=0;
	int first_visit=0;
	main_menu_print(first_visit);
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 3c 01 	call	0x278	; 0x278 <_Z15main_menu_printi>
{
	_delay_ms(DELAY_TIME_STRAIGHT_START);
	lcd_clear();
	num_of_food=0;
	int state=0;
	int first_visit=0;
     eae:	e1 2c       	mov	r14, r1
     eb0:	f1 2c       	mov	r15, r1
void mainmenu()
{
	_delay_ms(DELAY_TIME_STRAIGHT_START);
	lcd_clear();
	num_of_food=0;
	int state=0;
     eb2:	c0 e0       	ldi	r28, 0x00	; 0
     eb4:	d0 e0       	ldi	r29, 0x00	; 0
					c=select_food();
					else
					change_food();
					if (c==1)
					first_visit=1;
					state=0;
     eb6:	00 e0       	ldi	r16, 0x00	; 0
     eb8:	10 e0       	ldi	r17, 0x00	; 0
					int c=0;
					if (first_visit==0)
					c=select_food();
					else
					change_food();
					if (c==1)
     eba:	cc 24       	eor	r12, r12
     ebc:	c3 94       	inc	r12
     ebe:	d1 2c       	mov	r13, r1
	int first_visit=0;
	main_menu_print(first_visit);

	while(1)
	{
		int in=input();
     ec0:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
		//  lcd_puts (in);
		if (in!=000)
     ec4:	89 2b       	or	r24, r25
     ec6:	e1 f3       	breq	.-8      	; 0xec0 <_Z8mainmenuv+0x38>
     ec8:	2f ef       	ldi	r18, 0xFF	; 255
     eca:	86 e7       	ldi	r24, 0x76	; 118
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	21 50       	subi	r18, 0x01	; 1
     ed0:	80 40       	sbci	r24, 0x00	; 0
     ed2:	90 40       	sbci	r25, 0x00	; 0
     ed4:	e1 f7       	brne	.-8      	; 0xece <_Z8mainmenuv+0x46>
     ed6:	00 c0       	rjmp	.+0      	; 0xed8 <_Z8mainmenuv+0x50>
     ed8:	00 00       	nop
		{
			_delay_ms(DELAY_BOUNCE);
			in=input();
     eda:	0e 94 30 01 	call	0x260	; 0x260 <_Z5inputv>
			if (state==0&& (in==up ||in==down))
     ede:	20 97       	sbiw	r28, 0x00	; 0
     ee0:	31 f5       	brne	.+76     	; 0xf2e <_Z8mainmenuv+0xa6>
     ee2:	20 91 6c 00 	lds	r18, 0x006C
     ee6:	30 91 6d 00 	lds	r19, 0x006D
     eea:	82 17       	cp	r24, r18
     eec:	93 07       	cpc	r25, r19
     eee:	41 f0       	breq	.+16     	; 0xf00 <_Z8mainmenuv+0x78>
     ef0:	20 91 6a 00 	lds	r18, 0x006A
     ef4:	30 91 6b 00 	lds	r19, 0x006B
     ef8:	82 17       	cp	r24, r18
     efa:	93 07       	cpc	r25, r19
     efc:	09 f0       	breq	.+2      	; 0xf00 <_Z8mainmenuv+0x78>
     efe:	70 c0       	rjmp	.+224    	; 0xfe0 <_Z8mainmenuv+0x158>
			{
				lcd_setCursor(0,0);
     f00:	60 2f       	mov	r22, r16
     f02:	71 2f       	mov	r23, r17
     f04:	80 2f       	mov	r24, r16
     f06:	91 2f       	mov	r25, r17
     f08:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts(" ");
     f0c:	8f eb       	ldi	r24, 0xBF	; 191
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
				lcd_setCursor(0,1);
     f14:	6c 2d       	mov	r22, r12
     f16:	7d 2d       	mov	r23, r13
     f18:	80 2f       	mov	r24, r16
     f1a:	91 2f       	mov	r25, r17
     f1c:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts(">");
     f20:	8a e7       	ldi	r24, 0x7A	; 122
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
				state=1;
     f28:	cc 2d       	mov	r28, r12
     f2a:	dd 2d       	mov	r29, r13
     f2c:	4f c0       	rjmp	.+158    	; 0xfcc <_Z8mainmenuv+0x144>
			}
			else if (state==1 && (in==up ||in==down))
     f2e:	c1 30       	cpi	r28, 0x01	; 1
     f30:	d1 05       	cpc	r29, r1
     f32:	09 f0       	breq	.+2      	; 0xf36 <_Z8mainmenuv+0xae>
     f34:	5d c0       	rjmp	.+186    	; 0xff0 <_Z8mainmenuv+0x168>
     f36:	20 91 6c 00 	lds	r18, 0x006C
     f3a:	30 91 6d 00 	lds	r19, 0x006D
     f3e:	82 17       	cp	r24, r18
     f40:	93 07       	cpc	r25, r19
     f42:	39 f0       	breq	.+14     	; 0xf52 <_Z8mainmenuv+0xca>
     f44:	20 91 6a 00 	lds	r18, 0x006A
     f48:	30 91 6b 00 	lds	r19, 0x006B
     f4c:	82 17       	cp	r24, r18
     f4e:	93 07       	cpc	r25, r19
     f50:	b9 f4       	brne	.+46     	; 0xf80 <_Z8mainmenuv+0xf8>
			{
				lcd_setCursor(0,1);
     f52:	6c 2d       	mov	r22, r12
     f54:	7d 2d       	mov	r23, r13
     f56:	80 2f       	mov	r24, r16
     f58:	91 2f       	mov	r25, r17
     f5a:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts(" ");
     f5e:	8f eb       	ldi	r24, 0xBF	; 191
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
				lcd_setCursor(0,0);
     f66:	60 2f       	mov	r22, r16
     f68:	71 2f       	mov	r23, r17
     f6a:	80 2f       	mov	r24, r16
     f6c:	91 2f       	mov	r25, r17
     f6e:	0e 94 23 01 	call	0x246	; 0x246 <_Z13lcd_setCursorii>
				lcd_puts(">");
     f72:	8a e7       	ldi	r24, 0x7A	; 122
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	0e 94 cd 00 	call	0x19a	; 0x19a <_Z8lcd_putsPKc>
				state=0;
     f7a:	c0 2f       	mov	r28, r16
     f7c:	d1 2f       	mov	r29, r17
     f7e:	26 c0       	rjmp	.+76     	; 0xfcc <_Z8mainmenuv+0x144>
			}
			else if (in==ok)
     f80:	20 91 62 00 	lds	r18, 0x0062
     f84:	30 91 63 00 	lds	r19, 0x0063
     f88:	82 17       	cp	r24, r18
     f8a:	93 07       	cpc	r25, r19
     f8c:	f9 f4       	brne	.+62     	; 0xfcc <_Z8mainmenuv+0x144>
			{
				//_delay_ms(DELAY_TIME);
				if (state==0)
     f8e:	cd 2b       	or	r28, r29
     f90:	b1 f4       	brne	.+44     	; 0xfbe <_Z8mainmenuv+0x136>
				{
					int c=0;
					if (first_visit==0)
     f92:	e1 14       	cp	r14, r1
     f94:	f1 04       	cpc	r15, r1
     f96:	59 f4       	brne	.+22     	; 0xfae <_Z8mainmenuv+0x126>
					c=select_food();
     f98:	0e 94 2a 03 	call	0x654	; 0x654 <_Z11select_foodv>
					else
					change_food();
					if (c==1)
     f9c:	3c 2d       	mov	r19, r12
     f9e:	2d 2d       	mov	r18, r13
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	11 f0       	breq	.+4      	; 0xfa8 <_Z8mainmenuv+0x120>
     fa4:	30 2f       	mov	r19, r16
     fa6:	21 2f       	mov	r18, r17
					first_visit=1;
     fa8:	e3 2e       	mov	r14, r19
     faa:	f2 2e       	mov	r15, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <_Z8mainmenuv+0x12a>
				{
					int c=0;
					if (first_visit==0)
					c=select_food();
					else
					change_food();
     fae:	0e 94 b1 05 	call	0xb62	; 0xb62 <_Z11change_foodv>
					if (c==1)
					first_visit=1;
					state=0;
					main_menu_print(first_visit);
     fb2:	c7 01       	movw	r24, r14
     fb4:	0e 94 3c 01 	call	0x278	; 0x278 <_Z15main_menu_printi>
					c=select_food();
					else
					change_food();
					if (c==1)
					first_visit=1;
					state=0;
     fb8:	c0 2f       	mov	r28, r16
     fba:	d1 2f       	mov	r29, r17
     fbc:	07 c0       	rjmp	.+14     	; 0xfcc <_Z8mainmenuv+0x144>
					main_menu_print(first_visit);
				}
				else
				//selected_food();
				{
					selected_food();
     fbe:	0e 94 87 04 	call	0x90e	; 0x90e <_Z13selected_foodv>
					main_menu_print(first_visit);
     fc2:	c7 01       	movw	r24, r14
     fc4:	0e 94 3c 01 	call	0x278	; 0x278 <_Z15main_menu_printi>
					state=0;
     fc8:	c0 2f       	mov	r28, r16
     fca:	d1 2f       	mov	r29, r17
     fcc:	9f ef       	ldi	r25, 0xFF	; 255
     fce:	25 ea       	ldi	r18, 0xA5	; 165
     fd0:	8e e0       	ldi	r24, 0x0E	; 14
     fd2:	91 50       	subi	r25, 0x01	; 1
     fd4:	20 40       	sbci	r18, 0x00	; 0
     fd6:	80 40       	sbci	r24, 0x00	; 0
     fd8:	e1 f7       	brne	.-8      	; 0xfd2 <_Z8mainmenuv+0x14a>
     fda:	00 c0       	rjmp	.+0      	; 0xfdc <_Z8mainmenuv+0x154>
     fdc:	00 00       	nop
     fde:	70 cf       	rjmp	.-288    	; 0xec0 <_Z8mainmenuv+0x38>
				lcd_puts(" ");
				lcd_setCursor(0,0);
				lcd_puts(">");
				state=0;
			}
			else if (in==ok)
     fe0:	20 91 62 00 	lds	r18, 0x0062
     fe4:	30 91 63 00 	lds	r19, 0x0063
     fe8:	82 17       	cp	r24, r18
     fea:	93 07       	cpc	r25, r19
     fec:	79 f7       	brne	.-34     	; 0xfcc <_Z8mainmenuv+0x144>
     fee:	d1 cf       	rjmp	.-94     	; 0xf92 <_Z8mainmenuv+0x10a>
     ff0:	20 91 62 00 	lds	r18, 0x0062
     ff4:	30 91 63 00 	lds	r19, 0x0063
     ff8:	82 17       	cp	r24, r18
     ffa:	93 07       	cpc	r25, r19
     ffc:	39 f7       	brne	.-50     	; 0xfcc <_Z8mainmenuv+0x144>
     ffe:	df cf       	rjmp	.-66     	; 0xfbe <_Z8mainmenuv+0x136>

00001000 <main>:
	dfood[2]=food[2];
		

}
int main() {
	database_init_test();
    1000:	0e 94 77 02 	call	0x4ee	; 0x4ee <_Z18database_init_testv>
	sei();
    1004:	78 94       	sei
	uart0_init(UART_BAUD_SELECT(9600,F_CPU));
    1006:	87 e6       	ldi	r24, 0x67	; 103
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <_Z10uart0_initj>
	// set up the LCD's number of columns and rows:
	// pinMode(13,OUTPUT);
	
	DDRD&= ~(1<<s_zero);
    100e:	88 98       	cbi	0x11, 0	; 17
	DDRD&= ~(1<<s_one);
    1010:	89 98       	cbi	0x11, 1	; 17
   DDRD&= ~(1<<s_two);
    1012:	8a 98       	cbi	0x11, 2	; 17


	lcd_init();
    1014:	0e 94 91 00 	call	0x122	; 0x122 <_Z8lcd_initv>
	mainmenu();
    1018:	0e 94 44 07 	call	0xe88	; 0xe88 <_Z8mainmenuv>

0000101c <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    101c:	1f 92       	push	r1
    101e:	0f 92       	push	r0
    1020:	0f b6       	in	r0, 0x3f	; 63
    1022:	0f 92       	push	r0
    1024:	11 24       	eor	r1, r1
    1026:	2f 93       	push	r18
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	ef 93       	push	r30
    102e:	ff 93       	push	r31
	unsigned char usr;
	unsigned char lastRxError;


	/* read UART status register and UART data register */
	usr = UART0_STATUS;
    1030:	8b b1       	in	r24, 0x0b	; 11
	data = UART0_DATA;
    1032:	2c b1       	in	r18, 0x0c	; 12

	/* */
#if defined( AT90_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#elif defined( ATMEGA_USART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
    1034:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
	lastRxError = (usr & (_BV(FE) | _BV(DOR)));
#endif

	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;
    1036:	e0 91 62 04 	lds	r30, 0x0462
    103a:	ef 5f       	subi	r30, 0xFF	; 255
    103c:	ef 71       	andi	r30, 0x1F	; 31

	if (tmphead == UART0_RxTail) {
    103e:	90 91 61 04 	lds	r25, 0x0461
    1042:	e9 17       	cp	r30, r25
    1044:	39 f0       	breq	.+14     	; 0x1054 <__vector_13+0x38>
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
	}
	else {
		/* store new index */
		UART0_RxHead = tmphead;
    1046:	e0 93 62 04 	sts	0x0462, r30
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	eb 59       	subi	r30, 0x9B	; 155
    104e:	fb 4f       	sbci	r31, 0xFB	; 251
    1050:	20 83       	st	Z, r18
    1052:	01 c0       	rjmp	.+2      	; 0x1056 <__vector_13+0x3a>
	/* calculate buffer index */
	tmphead = (UART0_RxHead + 1) & UART_RX_BUFFER_MASK;

	if (tmphead == UART0_RxTail) {
		/* error: receive buffer overflow */
		lastRxError = UART_BUFFER_OVERFLOW >> 8;
    1054:	82 e0       	ldi	r24, 0x02	; 2
		/* store new index */
		UART0_RxHead = tmphead;
		/* store received data in buffer */
		UART0_RxBuf[tmphead] = data;
	}
	UART0_LastRxError = lastRxError;
    1056:	80 93 60 04 	sts	0x0460, r24
}
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	9f 91       	pop	r25
    1060:	8f 91       	pop	r24
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	8f 93       	push	r24
    107a:	9f 93       	push	r25
    107c:	ef 93       	push	r30
    107e:	ff 93       	push	r31
	unsigned char tmptail;


	if (UART0_TxHead != UART0_TxTail) {
    1080:	90 91 64 04 	lds	r25, 0x0464
    1084:	80 91 63 04 	lds	r24, 0x0463
    1088:	98 17       	cp	r25, r24
    108a:	61 f0       	breq	.+24     	; 0x10a4 <__vector_14+0x36>
		/* calculate and store new buffer index */
		tmptail = (UART0_TxTail + 1) & UART_TX_BUFFER_MASK;
    108c:	e0 91 63 04 	lds	r30, 0x0463
    1090:	ef 5f       	subi	r30, 0xFF	; 255
    1092:	ef 71       	andi	r30, 0x1F	; 31
		UART0_TxTail = tmptail;
    1094:	e0 93 63 04 	sts	0x0463, r30
		/* get one byte from buffer and write it to UART */
		UART0_DATA = UART0_TxBuf[tmptail];  /* start transmission */
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	eb 57       	subi	r30, 0x7B	; 123
    109c:	fb 4f       	sbci	r31, 0xFB	; 251
    109e:	80 81       	ld	r24, Z
    10a0:	8c b9       	out	0x0c, r24	; 12
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <__vector_14+0x38>
	}
	else {
		/* tx buffer empty, disable UDRE interrupt */
		UART0_CONTROL &= ~_BV(UART0_UDRIE);
    10a4:	55 98       	cbi	0x0a, 5	; 10
	}
}
    10a6:	ff 91       	pop	r31
    10a8:	ef 91       	pop	r30
    10aa:	9f 91       	pop	r25
    10ac:	8f 91       	pop	r24
    10ae:	0f 90       	pop	r0
    10b0:	0f be       	out	0x3f, r0	; 63
    10b2:	0f 90       	pop	r0
    10b4:	1f 90       	pop	r1
    10b6:	18 95       	reti

000010b8 <_Z10uart0_initj>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart0_init(unsigned int baudrate)
{
	UART0_TxHead = 0;
    10b8:	10 92 64 04 	sts	0x0464, r1
	UART0_TxTail = 0;
    10bc:	10 92 63 04 	sts	0x0463, r1
	UART0_RxHead = 0;
    10c0:	10 92 62 04 	sts	0x0462, r1
	UART0_RxTail = 0;
    10c4:	10 92 61 04 	sts	0x0461, r1
	/* enable UART receiver and transmmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | _BV(RXEN) | _BV(TXEN);

#elif defined (ATMEGA_USART)
	/* Set baud rate */
	if (baudrate & 0x8000)
    10c8:	99 23       	and	r25, r25
    10ca:	1c f4       	brge	.+6      	; 0x10d2 <_Z10uart0_initj+0x1a>
	{
		UART0_STATUS = (1 << U2X);  //Enable 2x speed
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	2b b9       	out	0x0b, r18	; 11
		baudrate &= ~0x8000;
    10d0:	9f 77       	andi	r25, 0x7F	; 127
	}
	UBRRH = (unsigned char)(baudrate >> 8);
    10d2:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baudrate;
    10d4:	89 b9       	out	0x09, r24	; 9

	/* Enable USART receiver and transmitter and receive complete interrupt */
	UART0_CONTROL = _BV(RXCIE) | (1 << RXEN) | (1 << TXEN);
    10d6:	88 e9       	ldi	r24, 0x98	; 152
    10d8:	8a b9       	out	0x0a, r24	; 10

	/* Set frame format: asynchronous, 8data, no parity, 1stop bit */
#ifdef URSEL
	UCSRC = (1 << URSEL) | (1 << UCSZ0) | ( 1 << UCSZ1);
    10da:	86 e8       	ldi	r24, 0x86	; 134
    10dc:	80 bd       	out	0x20, r24	; 32
    10de:	08 95       	ret

000010e0 <__divmodhi4>:
    10e0:	97 fb       	bst	r25, 7
    10e2:	07 2e       	mov	r0, r23
    10e4:	16 f4       	brtc	.+4      	; 0x10ea <__divmodhi4+0xa>
    10e6:	00 94       	com	r0
    10e8:	07 d0       	rcall	.+14     	; 0x10f8 <__divmodhi4_neg1>
    10ea:	77 fd       	sbrc	r23, 7
    10ec:	09 d0       	rcall	.+18     	; 0x1100 <__divmodhi4_neg2>
    10ee:	0e 94 84 08 	call	0x1108	; 0x1108 <__udivmodhi4>
    10f2:	07 fc       	sbrc	r0, 7
    10f4:	05 d0       	rcall	.+10     	; 0x1100 <__divmodhi4_neg2>
    10f6:	3e f4       	brtc	.+14     	; 0x1106 <__divmodhi4_exit>

000010f8 <__divmodhi4_neg1>:
    10f8:	90 95       	com	r25
    10fa:	81 95       	neg	r24
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	08 95       	ret

00001100 <__divmodhi4_neg2>:
    1100:	70 95       	com	r23
    1102:	61 95       	neg	r22
    1104:	7f 4f       	sbci	r23, 0xFF	; 255

00001106 <__divmodhi4_exit>:
    1106:	08 95       	ret

00001108 <__udivmodhi4>:
    1108:	aa 1b       	sub	r26, r26
    110a:	bb 1b       	sub	r27, r27
    110c:	51 e1       	ldi	r21, 0x11	; 17
    110e:	07 c0       	rjmp	.+14     	; 0x111e <__udivmodhi4_ep>

00001110 <__udivmodhi4_loop>:
    1110:	aa 1f       	adc	r26, r26
    1112:	bb 1f       	adc	r27, r27
    1114:	a6 17       	cp	r26, r22
    1116:	b7 07       	cpc	r27, r23
    1118:	10 f0       	brcs	.+4      	; 0x111e <__udivmodhi4_ep>
    111a:	a6 1b       	sub	r26, r22
    111c:	b7 0b       	sbc	r27, r23

0000111e <__udivmodhi4_ep>:
    111e:	88 1f       	adc	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	5a 95       	dec	r21
    1124:	a9 f7       	brne	.-22     	; 0x1110 <__udivmodhi4_loop>
    1126:	80 95       	com	r24
    1128:	90 95       	com	r25
    112a:	bc 01       	movw	r22, r24
    112c:	cd 01       	movw	r24, r26
    112e:	08 95       	ret

00001130 <_exit>:
    1130:	f8 94       	cli

00001132 <__stop_program>:
    1132:	ff cf       	rjmp	.-2      	; 0x1132 <__stop_program>
